/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
//misc
#define true 1
#define false 0
#define HIGH 1
#define LOW 0
#define IDLE 0
#define STARTED 1

//ADC settings
#define MULTIPLIER 0.03343
#define OFFSET 2.432

//Auto mode
#define BUFFER_SIZE 1 //uint16_t only; wielkosc buffera
#define MAX_TIMER_IDLE 490 //w MS; ile czasu poświęca na odczytywanie jednego napiecia
//BUFFER_SIZE * MAX_TIMER_IDLE = czas na stabilny odczyt

//Signle mode
#define BUFFER_SIZE_SINGLE 1 //buffer for single calculation
#define TIMER_TIME_SINGLE 1000 //time for calculation in signle mode
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

TIM_HandleTypeDef htim16;

UART_HandleTypeDef huart2;
DMA_HandleTypeDef hdma_usart2_tx;

/* USER CODE BEGIN PV */
//for output
uint16_t RAW_VOLTAGE = 255; //real voltage = VOLTAGE / 100  //TODO 8t
uint8_t VOLTAGE = 255; //real voltage = VOLTAGE / 100  //TODO 8t
uint32_t dupa=0;

uint16_t BUFFER[BUFFER_SIZE]; //TODO 8t
uint16_t buffer_counter=0;
uint32_t buffer_sum=0;
uint16_t timer_OVC=0; //timer overrun counter

uint16_t MAX_TIMER_OVERRUNS;

uint32_t counter=0;
uint32_t counter_high=0;
uint16_t time0=0;
uint16_t ovc0=0;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_TIM16_Init(void);
/* USER CODE BEGIN PFP */
void MANUAL_MODE(void);
void EXIT_DEEP_SLEEP_MODE(void);
void SEND_VIA_UART(void);
void CALCULATION_COMPLETED(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_USART2_UART_Init();
  MX_TIM16_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim16);
  //HAL_TIM_Base_Start_IT(&htim3);
  //HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_3);

  //check if mode is single
  if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1)
  {
	  MAX_TIMER_OVERRUNS = (uint16_t)((MAX_TIMER_IDLE / 1000.0f) / (((TIM16->PSC + 1.0f) * (TIM16->ARR + 1.0f)) / 48000000.0f));
  }

  MAX_TIMER_OVERRUNS = (uint16_t)((MAX_TIMER_IDLE / 1000.0f) / (((TIM16->PSC + 1.0f) * (TIM16->ARR + 1.0f)) / 48000000.0f));
  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
  //__HAL_RCC_PWR_CLK_ENABLE(); //TODO TO CHECK IF WORKS STOP MODE // https://www.youtube.com/watch?v=td_CbkFBCfE
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
  htim16.Init.Prescaler = 1-1;
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim16.Init.Period = 48000-1;
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim16.Init.RepetitionCounter = 0;
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 1200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin : INPUT_Pin */
  GPIO_InitStruct.Pin = INPUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
//====================================================================================================================================================================
//====================================================================================================================================================================
//====================================================================================================================================================================
/*	//TODO things
 * try to do digital read on EXTI???
deep sleep/light sleep cpu?
err show in console via uart?
*/

//nax lenght 1ms

//CCR3 - cos sie stalo
//CNT - clock counter

uint8_t state = IDLE;

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) //MODE pin was shorted with 3.3 => we are into manual mode
{
    if(GPIO_Pin == INPUT_Pin && state == IDLE)
    {
    	time0 = TIM16->CNT;
    	ovc0 = timer_OVC;
    	state = STARTED;

    }
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) //MODE pin got release => we are going into auto mode
{
    if(GPIO_Pin == INPUT_Pin && state == STARTED)
    {
    	counter_high = counter_high + (TIM16->CNT - time0) + (timer_OVC - ovc0)*TIM16->ARR;
    	state = IDLE;
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
	if(htim->Instance == TIM16) //TIMER OVERFLOW
	{
		timer_OVC++;
		if(timer_OVC > MAX_TIMER_OVERRUNS) //every MAX_TIMER_IDLE run this
		{
			RAW_VOLTAGE=(uint32_t)(10000.0f*counter_high/counter);

			counter_high=0;
			time0=0;
			timer_OVC=0;
			ovc0 = 0;
			state = IDLE;

			//buffer for clearing noise
			buffer_sum = buffer_sum + RAW_VOLTAGE;
			buffer_sum = buffer_sum - BUFFER[buffer_counter];
			BUFFER[buffer_counter] = RAW_VOLTAGE;

			//buffer counter
			buffer_counter++;
			if(buffer_counter >= BUFFER_SIZE)
			{
				buffer_counter = 0;
				CALCULATION_COMPLETED();
			}

		}
	}
}

void CALCULATION_COMPLETED()
{
	//VOLTAGE
	int16_t v = MULTIPLIER*buffer_sum/BUFFER_SIZE+OFFSET;
	VOLTAGE = (v)*(v <= 255 && v >= 0) + (255)*(v > 255) + (0)*(v<0);
	SEND_VIA_UART(); //send info about readings via uart
}


void SEND_VIA_UART() //TODO //TODO //TODO
{
	static char uart_buffer[7];
    uart_buffer[0] = ((VOLTAGE / 100) % 10) + '0';
    uart_buffer[1] = '.';
    uart_buffer[2] = ((VOLTAGE / 10) % 10) + '0';
    uart_buffer[3] = (VOLTAGE % 10) + '0';
    uart_buffer[4] = 'v';
    uart_buffer[5] = '\r';
    uart_buffer[6] = '\n';

	if (huart2.gState == HAL_UART_STATE_READY)
	{
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, 7);
	}
}


void MANUAL_MODE()
{
	//HAL_TIM_Base_Stop_IT(&htim17); //stops auto mode


	//STOP MODE of mcu
	//HAL_SuspendTick();
	//HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI); //TODO low power regulator?
}

void EXIT_DEEP_SLEEP_MODE()
{
	//HAL_ResumeTick();
	//SystemClock_Config();
	//HAL_TIM_Base_Start_IT(&htim17); //resums auto mode
}

//=======================================================INTERRUPTS===================================================================


/*
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) //MODE pin was shorted with 3.3 => we are into manual mode
{
    if(GPIO_Pin == MODE_Pin)
    {
    	//MANUAL_MODE();
    }
}

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) //MODE pin got release => we are going into auto mode
{
    if(GPIO_Pin == MODE_Pin)
    {
    	//EXIT_DEEP_SLEEP_MODE();
    }
}
*/

//====================================================================================================================================================================
//====================================================================================================================================================================
//====================================================================================================================================================================
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
