
sigma-delta-adc-2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004084  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08004144  08004144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800423c  0800423c  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  0800423c  0800423c  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800423c  0800423c  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800423c  0800423c  0000523c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004240  08004240  00005240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004244  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  20000010  08004254  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000188  08004254  00006188  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001546c  00000000  00000000  00006038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026be  00000000  00000000  0001b4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000f535  00000000  00000000  0001db62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  0002d098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001758  00000000  00000000  0002dd20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013342  00000000  00000000  0002f478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015a28  00000000  00000000  000427ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007c063  00000000  00000000  000581e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000d4245  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002534  00000000  00000000  000d4288  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800412c 	.word	0x0800412c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	0800412c 	.word	0x0800412c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	@ 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f001 fcc6 	bl	8001bb8 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fd99 	bl	8000d68 <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	@ 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 fbef 	bl	8000a20 <__aeabi_fsub>
 8000242:	f000 fd91 	bl	8000d68 <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	@ 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fadd>:
 8000250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000252:	46ce      	mov	lr, r9
 8000254:	4647      	mov	r7, r8
 8000256:	0243      	lsls	r3, r0, #9
 8000258:	0a5a      	lsrs	r2, r3, #9
 800025a:	024e      	lsls	r6, r1, #9
 800025c:	0045      	lsls	r5, r0, #1
 800025e:	0fc4      	lsrs	r4, r0, #31
 8000260:	0048      	lsls	r0, r1, #1
 8000262:	4691      	mov	r9, r2
 8000264:	0e2d      	lsrs	r5, r5, #24
 8000266:	0a72      	lsrs	r2, r6, #9
 8000268:	0e00      	lsrs	r0, r0, #24
 800026a:	4694      	mov	ip, r2
 800026c:	b580      	push	{r7, lr}
 800026e:	099b      	lsrs	r3, r3, #6
 8000270:	0fc9      	lsrs	r1, r1, #31
 8000272:	09b6      	lsrs	r6, r6, #6
 8000274:	1a2a      	subs	r2, r5, r0
 8000276:	428c      	cmp	r4, r1
 8000278:	d021      	beq.n	80002be <__aeabi_fadd+0x6e>
 800027a:	2a00      	cmp	r2, #0
 800027c:	dd0d      	ble.n	800029a <__aeabi_fadd+0x4a>
 800027e:	2800      	cmp	r0, #0
 8000280:	d12d      	bne.n	80002de <__aeabi_fadd+0x8e>
 8000282:	2e00      	cmp	r6, #0
 8000284:	d100      	bne.n	8000288 <__aeabi_fadd+0x38>
 8000286:	e08d      	b.n	80003a4 <__aeabi_fadd+0x154>
 8000288:	1e51      	subs	r1, r2, #1
 800028a:	2a01      	cmp	r2, #1
 800028c:	d100      	bne.n	8000290 <__aeabi_fadd+0x40>
 800028e:	e11d      	b.n	80004cc <__aeabi_fadd+0x27c>
 8000290:	2aff      	cmp	r2, #255	@ 0xff
 8000292:	d100      	bne.n	8000296 <__aeabi_fadd+0x46>
 8000294:	e0ab      	b.n	80003ee <__aeabi_fadd+0x19e>
 8000296:	000a      	movs	r2, r1
 8000298:	e027      	b.n	80002ea <__aeabi_fadd+0x9a>
 800029a:	2a00      	cmp	r2, #0
 800029c:	d04d      	beq.n	800033a <__aeabi_fadd+0xea>
 800029e:	1b42      	subs	r2, r0, r5
 80002a0:	2d00      	cmp	r5, #0
 80002a2:	d000      	beq.n	80002a6 <__aeabi_fadd+0x56>
 80002a4:	e0cc      	b.n	8000440 <__aeabi_fadd+0x1f0>
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d100      	bne.n	80002ac <__aeabi_fadd+0x5c>
 80002aa:	e079      	b.n	80003a0 <__aeabi_fadd+0x150>
 80002ac:	1e54      	subs	r4, r2, #1
 80002ae:	2a01      	cmp	r2, #1
 80002b0:	d100      	bne.n	80002b4 <__aeabi_fadd+0x64>
 80002b2:	e128      	b.n	8000506 <__aeabi_fadd+0x2b6>
 80002b4:	2aff      	cmp	r2, #255	@ 0xff
 80002b6:	d100      	bne.n	80002ba <__aeabi_fadd+0x6a>
 80002b8:	e097      	b.n	80003ea <__aeabi_fadd+0x19a>
 80002ba:	0022      	movs	r2, r4
 80002bc:	e0c5      	b.n	800044a <__aeabi_fadd+0x1fa>
 80002be:	2a00      	cmp	r2, #0
 80002c0:	dc00      	bgt.n	80002c4 <__aeabi_fadd+0x74>
 80002c2:	e096      	b.n	80003f2 <__aeabi_fadd+0x1a2>
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d04f      	beq.n	8000368 <__aeabi_fadd+0x118>
 80002c8:	2dff      	cmp	r5, #255	@ 0xff
 80002ca:	d100      	bne.n	80002ce <__aeabi_fadd+0x7e>
 80002cc:	e08f      	b.n	80003ee <__aeabi_fadd+0x19e>
 80002ce:	2180      	movs	r1, #128	@ 0x80
 80002d0:	04c9      	lsls	r1, r1, #19
 80002d2:	430e      	orrs	r6, r1
 80002d4:	2a1b      	cmp	r2, #27
 80002d6:	dd51      	ble.n	800037c <__aeabi_fadd+0x12c>
 80002d8:	002a      	movs	r2, r5
 80002da:	3301      	adds	r3, #1
 80002dc:	e018      	b.n	8000310 <__aeabi_fadd+0xc0>
 80002de:	2dff      	cmp	r5, #255	@ 0xff
 80002e0:	d100      	bne.n	80002e4 <__aeabi_fadd+0x94>
 80002e2:	e084      	b.n	80003ee <__aeabi_fadd+0x19e>
 80002e4:	2180      	movs	r1, #128	@ 0x80
 80002e6:	04c9      	lsls	r1, r1, #19
 80002e8:	430e      	orrs	r6, r1
 80002ea:	2101      	movs	r1, #1
 80002ec:	2a1b      	cmp	r2, #27
 80002ee:	dc08      	bgt.n	8000302 <__aeabi_fadd+0xb2>
 80002f0:	0031      	movs	r1, r6
 80002f2:	2020      	movs	r0, #32
 80002f4:	40d1      	lsrs	r1, r2
 80002f6:	1a82      	subs	r2, r0, r2
 80002f8:	4096      	lsls	r6, r2
 80002fa:	0032      	movs	r2, r6
 80002fc:	1e50      	subs	r0, r2, #1
 80002fe:	4182      	sbcs	r2, r0
 8000300:	4311      	orrs	r1, r2
 8000302:	1a5b      	subs	r3, r3, r1
 8000304:	015a      	lsls	r2, r3, #5
 8000306:	d459      	bmi.n	80003bc <__aeabi_fadd+0x16c>
 8000308:	2107      	movs	r1, #7
 800030a:	002a      	movs	r2, r5
 800030c:	4019      	ands	r1, r3
 800030e:	d049      	beq.n	80003a4 <__aeabi_fadd+0x154>
 8000310:	210f      	movs	r1, #15
 8000312:	4019      	ands	r1, r3
 8000314:	2904      	cmp	r1, #4
 8000316:	d000      	beq.n	800031a <__aeabi_fadd+0xca>
 8000318:	3304      	adds	r3, #4
 800031a:	0159      	lsls	r1, r3, #5
 800031c:	d542      	bpl.n	80003a4 <__aeabi_fadd+0x154>
 800031e:	1c50      	adds	r0, r2, #1
 8000320:	2afe      	cmp	r2, #254	@ 0xfe
 8000322:	d03a      	beq.n	800039a <__aeabi_fadd+0x14a>
 8000324:	019b      	lsls	r3, r3, #6
 8000326:	b2c0      	uxtb	r0, r0
 8000328:	0a5b      	lsrs	r3, r3, #9
 800032a:	05c0      	lsls	r0, r0, #23
 800032c:	4318      	orrs	r0, r3
 800032e:	07e4      	lsls	r4, r4, #31
 8000330:	4320      	orrs	r0, r4
 8000332:	bcc0      	pop	{r6, r7}
 8000334:	46b9      	mov	r9, r7
 8000336:	46b0      	mov	r8, r6
 8000338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800033a:	20fe      	movs	r0, #254	@ 0xfe
 800033c:	4680      	mov	r8, r0
 800033e:	1c6f      	adds	r7, r5, #1
 8000340:	0038      	movs	r0, r7
 8000342:	4647      	mov	r7, r8
 8000344:	4207      	tst	r7, r0
 8000346:	d000      	beq.n	800034a <__aeabi_fadd+0xfa>
 8000348:	e08e      	b.n	8000468 <__aeabi_fadd+0x218>
 800034a:	2d00      	cmp	r5, #0
 800034c:	d000      	beq.n	8000350 <__aeabi_fadd+0x100>
 800034e:	e0b4      	b.n	80004ba <__aeabi_fadd+0x26a>
 8000350:	2b00      	cmp	r3, #0
 8000352:	d100      	bne.n	8000356 <__aeabi_fadd+0x106>
 8000354:	e0db      	b.n	800050e <__aeabi_fadd+0x2be>
 8000356:	2e00      	cmp	r6, #0
 8000358:	d06c      	beq.n	8000434 <__aeabi_fadd+0x1e4>
 800035a:	1b98      	subs	r0, r3, r6
 800035c:	0145      	lsls	r5, r0, #5
 800035e:	d400      	bmi.n	8000362 <__aeabi_fadd+0x112>
 8000360:	e0f7      	b.n	8000552 <__aeabi_fadd+0x302>
 8000362:	000c      	movs	r4, r1
 8000364:	1af3      	subs	r3, r6, r3
 8000366:	e03d      	b.n	80003e4 <__aeabi_fadd+0x194>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d01b      	beq.n	80003a4 <__aeabi_fadd+0x154>
 800036c:	1e51      	subs	r1, r2, #1
 800036e:	2a01      	cmp	r2, #1
 8000370:	d100      	bne.n	8000374 <__aeabi_fadd+0x124>
 8000372:	e082      	b.n	800047a <__aeabi_fadd+0x22a>
 8000374:	2aff      	cmp	r2, #255	@ 0xff
 8000376:	d03a      	beq.n	80003ee <__aeabi_fadd+0x19e>
 8000378:	000a      	movs	r2, r1
 800037a:	e7ab      	b.n	80002d4 <__aeabi_fadd+0x84>
 800037c:	0031      	movs	r1, r6
 800037e:	2020      	movs	r0, #32
 8000380:	40d1      	lsrs	r1, r2
 8000382:	1a82      	subs	r2, r0, r2
 8000384:	4096      	lsls	r6, r2
 8000386:	0032      	movs	r2, r6
 8000388:	1e50      	subs	r0, r2, #1
 800038a:	4182      	sbcs	r2, r0
 800038c:	430a      	orrs	r2, r1
 800038e:	189b      	adds	r3, r3, r2
 8000390:	015a      	lsls	r2, r3, #5
 8000392:	d5b9      	bpl.n	8000308 <__aeabi_fadd+0xb8>
 8000394:	1c6a      	adds	r2, r5, #1
 8000396:	2dfe      	cmp	r5, #254	@ 0xfe
 8000398:	d175      	bne.n	8000486 <__aeabi_fadd+0x236>
 800039a:	20ff      	movs	r0, #255	@ 0xff
 800039c:	2300      	movs	r3, #0
 800039e:	e7c4      	b.n	800032a <__aeabi_fadd+0xda>
 80003a0:	000c      	movs	r4, r1
 80003a2:	0033      	movs	r3, r6
 80003a4:	08db      	lsrs	r3, r3, #3
 80003a6:	2aff      	cmp	r2, #255	@ 0xff
 80003a8:	d146      	bne.n	8000438 <__aeabi_fadd+0x1e8>
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0f5      	beq.n	800039a <__aeabi_fadd+0x14a>
 80003ae:	2280      	movs	r2, #128	@ 0x80
 80003b0:	03d2      	lsls	r2, r2, #15
 80003b2:	4313      	orrs	r3, r2
 80003b4:	025b      	lsls	r3, r3, #9
 80003b6:	20ff      	movs	r0, #255	@ 0xff
 80003b8:	0a5b      	lsrs	r3, r3, #9
 80003ba:	e7b6      	b.n	800032a <__aeabi_fadd+0xda>
 80003bc:	019f      	lsls	r7, r3, #6
 80003be:	09bf      	lsrs	r7, r7, #6
 80003c0:	0038      	movs	r0, r7
 80003c2:	f001 fc03 	bl	8001bcc <__clzsi2>
 80003c6:	3805      	subs	r0, #5
 80003c8:	4087      	lsls	r7, r0
 80003ca:	4285      	cmp	r5, r0
 80003cc:	dc24      	bgt.n	8000418 <__aeabi_fadd+0x1c8>
 80003ce:	003b      	movs	r3, r7
 80003d0:	2120      	movs	r1, #32
 80003d2:	1b42      	subs	r2, r0, r5
 80003d4:	3201      	adds	r2, #1
 80003d6:	40d3      	lsrs	r3, r2
 80003d8:	1a8a      	subs	r2, r1, r2
 80003da:	4097      	lsls	r7, r2
 80003dc:	1e7a      	subs	r2, r7, #1
 80003de:	4197      	sbcs	r7, r2
 80003e0:	2200      	movs	r2, #0
 80003e2:	433b      	orrs	r3, r7
 80003e4:	0759      	lsls	r1, r3, #29
 80003e6:	d193      	bne.n	8000310 <__aeabi_fadd+0xc0>
 80003e8:	e797      	b.n	800031a <__aeabi_fadd+0xca>
 80003ea:	000c      	movs	r4, r1
 80003ec:	0033      	movs	r3, r6
 80003ee:	08db      	lsrs	r3, r3, #3
 80003f0:	e7db      	b.n	80003aa <__aeabi_fadd+0x15a>
 80003f2:	2a00      	cmp	r2, #0
 80003f4:	d014      	beq.n	8000420 <__aeabi_fadd+0x1d0>
 80003f6:	1b42      	subs	r2, r0, r5
 80003f8:	2d00      	cmp	r5, #0
 80003fa:	d14b      	bne.n	8000494 <__aeabi_fadd+0x244>
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d0d0      	beq.n	80003a2 <__aeabi_fadd+0x152>
 8000400:	1e51      	subs	r1, r2, #1
 8000402:	2a01      	cmp	r2, #1
 8000404:	d100      	bne.n	8000408 <__aeabi_fadd+0x1b8>
 8000406:	e09e      	b.n	8000546 <__aeabi_fadd+0x2f6>
 8000408:	2aff      	cmp	r2, #255	@ 0xff
 800040a:	d0ef      	beq.n	80003ec <__aeabi_fadd+0x19c>
 800040c:	000a      	movs	r2, r1
 800040e:	2a1b      	cmp	r2, #27
 8000410:	dd5f      	ble.n	80004d2 <__aeabi_fadd+0x282>
 8000412:	0002      	movs	r2, r0
 8000414:	1c73      	adds	r3, r6, #1
 8000416:	e77b      	b.n	8000310 <__aeabi_fadd+0xc0>
 8000418:	4b50      	ldr	r3, [pc, #320]	@ (800055c <__aeabi_fadd+0x30c>)
 800041a:	1a2a      	subs	r2, r5, r0
 800041c:	403b      	ands	r3, r7
 800041e:	e7e1      	b.n	80003e4 <__aeabi_fadd+0x194>
 8000420:	21fe      	movs	r1, #254	@ 0xfe
 8000422:	1c6a      	adds	r2, r5, #1
 8000424:	4211      	tst	r1, r2
 8000426:	d13b      	bne.n	80004a0 <__aeabi_fadd+0x250>
 8000428:	2d00      	cmp	r5, #0
 800042a:	d15d      	bne.n	80004e8 <__aeabi_fadd+0x298>
 800042c:	2b00      	cmp	r3, #0
 800042e:	d07f      	beq.n	8000530 <__aeabi_fadd+0x2e0>
 8000430:	2e00      	cmp	r6, #0
 8000432:	d17f      	bne.n	8000534 <__aeabi_fadd+0x2e4>
 8000434:	2200      	movs	r2, #0
 8000436:	08db      	lsrs	r3, r3, #3
 8000438:	025b      	lsls	r3, r3, #9
 800043a:	0a5b      	lsrs	r3, r3, #9
 800043c:	b2d0      	uxtb	r0, r2
 800043e:	e774      	b.n	800032a <__aeabi_fadd+0xda>
 8000440:	28ff      	cmp	r0, #255	@ 0xff
 8000442:	d0d2      	beq.n	80003ea <__aeabi_fadd+0x19a>
 8000444:	2480      	movs	r4, #128	@ 0x80
 8000446:	04e4      	lsls	r4, r4, #19
 8000448:	4323      	orrs	r3, r4
 800044a:	2401      	movs	r4, #1
 800044c:	2a1b      	cmp	r2, #27
 800044e:	dc07      	bgt.n	8000460 <__aeabi_fadd+0x210>
 8000450:	001c      	movs	r4, r3
 8000452:	2520      	movs	r5, #32
 8000454:	40d4      	lsrs	r4, r2
 8000456:	1aaa      	subs	r2, r5, r2
 8000458:	4093      	lsls	r3, r2
 800045a:	1e5a      	subs	r2, r3, #1
 800045c:	4193      	sbcs	r3, r2
 800045e:	431c      	orrs	r4, r3
 8000460:	1b33      	subs	r3, r6, r4
 8000462:	0005      	movs	r5, r0
 8000464:	000c      	movs	r4, r1
 8000466:	e74d      	b.n	8000304 <__aeabi_fadd+0xb4>
 8000468:	1b9f      	subs	r7, r3, r6
 800046a:	017a      	lsls	r2, r7, #5
 800046c:	d422      	bmi.n	80004b4 <__aeabi_fadd+0x264>
 800046e:	2f00      	cmp	r7, #0
 8000470:	d1a6      	bne.n	80003c0 <__aeabi_fadd+0x170>
 8000472:	2400      	movs	r4, #0
 8000474:	2000      	movs	r0, #0
 8000476:	2300      	movs	r3, #0
 8000478:	e757      	b.n	800032a <__aeabi_fadd+0xda>
 800047a:	199b      	adds	r3, r3, r6
 800047c:	2501      	movs	r5, #1
 800047e:	3201      	adds	r2, #1
 8000480:	0159      	lsls	r1, r3, #5
 8000482:	d400      	bmi.n	8000486 <__aeabi_fadd+0x236>
 8000484:	e740      	b.n	8000308 <__aeabi_fadd+0xb8>
 8000486:	2101      	movs	r1, #1
 8000488:	4835      	ldr	r0, [pc, #212]	@ (8000560 <__aeabi_fadd+0x310>)
 800048a:	4019      	ands	r1, r3
 800048c:	085b      	lsrs	r3, r3, #1
 800048e:	4003      	ands	r3, r0
 8000490:	430b      	orrs	r3, r1
 8000492:	e7a7      	b.n	80003e4 <__aeabi_fadd+0x194>
 8000494:	28ff      	cmp	r0, #255	@ 0xff
 8000496:	d0a9      	beq.n	80003ec <__aeabi_fadd+0x19c>
 8000498:	2180      	movs	r1, #128	@ 0x80
 800049a:	04c9      	lsls	r1, r1, #19
 800049c:	430b      	orrs	r3, r1
 800049e:	e7b6      	b.n	800040e <__aeabi_fadd+0x1be>
 80004a0:	2aff      	cmp	r2, #255	@ 0xff
 80004a2:	d100      	bne.n	80004a6 <__aeabi_fadd+0x256>
 80004a4:	e779      	b.n	800039a <__aeabi_fadd+0x14a>
 80004a6:	199b      	adds	r3, r3, r6
 80004a8:	085b      	lsrs	r3, r3, #1
 80004aa:	0759      	lsls	r1, r3, #29
 80004ac:	d000      	beq.n	80004b0 <__aeabi_fadd+0x260>
 80004ae:	e72f      	b.n	8000310 <__aeabi_fadd+0xc0>
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	e7c1      	b.n	8000438 <__aeabi_fadd+0x1e8>
 80004b4:	000c      	movs	r4, r1
 80004b6:	1af7      	subs	r7, r6, r3
 80004b8:	e782      	b.n	80003c0 <__aeabi_fadd+0x170>
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d12c      	bne.n	8000518 <__aeabi_fadd+0x2c8>
 80004be:	2e00      	cmp	r6, #0
 80004c0:	d193      	bne.n	80003ea <__aeabi_fadd+0x19a>
 80004c2:	2380      	movs	r3, #128	@ 0x80
 80004c4:	2400      	movs	r4, #0
 80004c6:	20ff      	movs	r0, #255	@ 0xff
 80004c8:	03db      	lsls	r3, r3, #15
 80004ca:	e72e      	b.n	800032a <__aeabi_fadd+0xda>
 80004cc:	2501      	movs	r5, #1
 80004ce:	1b9b      	subs	r3, r3, r6
 80004d0:	e718      	b.n	8000304 <__aeabi_fadd+0xb4>
 80004d2:	0019      	movs	r1, r3
 80004d4:	2520      	movs	r5, #32
 80004d6:	40d1      	lsrs	r1, r2
 80004d8:	1aaa      	subs	r2, r5, r2
 80004da:	4093      	lsls	r3, r2
 80004dc:	1e5a      	subs	r2, r3, #1
 80004de:	4193      	sbcs	r3, r2
 80004e0:	430b      	orrs	r3, r1
 80004e2:	0005      	movs	r5, r0
 80004e4:	199b      	adds	r3, r3, r6
 80004e6:	e753      	b.n	8000390 <__aeabi_fadd+0x140>
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d100      	bne.n	80004ee <__aeabi_fadd+0x29e>
 80004ec:	e77e      	b.n	80003ec <__aeabi_fadd+0x19c>
 80004ee:	2e00      	cmp	r6, #0
 80004f0:	d100      	bne.n	80004f4 <__aeabi_fadd+0x2a4>
 80004f2:	e77c      	b.n	80003ee <__aeabi_fadd+0x19e>
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	03d2      	lsls	r2, r2, #15
 80004f8:	4591      	cmp	r9, r2
 80004fa:	d302      	bcc.n	8000502 <__aeabi_fadd+0x2b2>
 80004fc:	4594      	cmp	ip, r2
 80004fe:	d200      	bcs.n	8000502 <__aeabi_fadd+0x2b2>
 8000500:	0033      	movs	r3, r6
 8000502:	08db      	lsrs	r3, r3, #3
 8000504:	e753      	b.n	80003ae <__aeabi_fadd+0x15e>
 8000506:	000c      	movs	r4, r1
 8000508:	1af3      	subs	r3, r6, r3
 800050a:	3501      	adds	r5, #1
 800050c:	e6fa      	b.n	8000304 <__aeabi_fadd+0xb4>
 800050e:	2e00      	cmp	r6, #0
 8000510:	d0af      	beq.n	8000472 <__aeabi_fadd+0x222>
 8000512:	000c      	movs	r4, r1
 8000514:	0033      	movs	r3, r6
 8000516:	e78d      	b.n	8000434 <__aeabi_fadd+0x1e4>
 8000518:	2e00      	cmp	r6, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0x2ce>
 800051c:	e767      	b.n	80003ee <__aeabi_fadd+0x19e>
 800051e:	2280      	movs	r2, #128	@ 0x80
 8000520:	03d2      	lsls	r2, r2, #15
 8000522:	4591      	cmp	r9, r2
 8000524:	d3ed      	bcc.n	8000502 <__aeabi_fadd+0x2b2>
 8000526:	4594      	cmp	ip, r2
 8000528:	d2eb      	bcs.n	8000502 <__aeabi_fadd+0x2b2>
 800052a:	000c      	movs	r4, r1
 800052c:	0033      	movs	r3, r6
 800052e:	e7e8      	b.n	8000502 <__aeabi_fadd+0x2b2>
 8000530:	0033      	movs	r3, r6
 8000532:	e77f      	b.n	8000434 <__aeabi_fadd+0x1e4>
 8000534:	199b      	adds	r3, r3, r6
 8000536:	2200      	movs	r2, #0
 8000538:	0159      	lsls	r1, r3, #5
 800053a:	d5b9      	bpl.n	80004b0 <__aeabi_fadd+0x260>
 800053c:	4a07      	ldr	r2, [pc, #28]	@ (800055c <__aeabi_fadd+0x30c>)
 800053e:	4013      	ands	r3, r2
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	2201      	movs	r2, #1
 8000544:	e778      	b.n	8000438 <__aeabi_fadd+0x1e8>
 8000546:	199b      	adds	r3, r3, r6
 8000548:	3201      	adds	r2, #1
 800054a:	3501      	adds	r5, #1
 800054c:	0159      	lsls	r1, r3, #5
 800054e:	d49a      	bmi.n	8000486 <__aeabi_fadd+0x236>
 8000550:	e6da      	b.n	8000308 <__aeabi_fadd+0xb8>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d08d      	beq.n	8000472 <__aeabi_fadd+0x222>
 8000556:	08db      	lsrs	r3, r3, #3
 8000558:	e76e      	b.n	8000438 <__aeabi_fadd+0x1e8>
 800055a:	46c0      	nop			@ (mov r8, r8)
 800055c:	fbffffff 	.word	0xfbffffff
 8000560:	7dffffff 	.word	0x7dffffff

08000564 <__aeabi_fdiv>:
 8000564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000566:	464f      	mov	r7, r9
 8000568:	4646      	mov	r6, r8
 800056a:	46d6      	mov	lr, sl
 800056c:	0244      	lsls	r4, r0, #9
 800056e:	b5c0      	push	{r6, r7, lr}
 8000570:	0047      	lsls	r7, r0, #1
 8000572:	1c0e      	adds	r6, r1, #0
 8000574:	0a64      	lsrs	r4, r4, #9
 8000576:	0e3f      	lsrs	r7, r7, #24
 8000578:	0fc5      	lsrs	r5, r0, #31
 800057a:	2f00      	cmp	r7, #0
 800057c:	d03c      	beq.n	80005f8 <__aeabi_fdiv+0x94>
 800057e:	2fff      	cmp	r7, #255	@ 0xff
 8000580:	d042      	beq.n	8000608 <__aeabi_fdiv+0xa4>
 8000582:	2300      	movs	r3, #0
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	4699      	mov	r9, r3
 8000588:	469a      	mov	sl, r3
 800058a:	00e4      	lsls	r4, r4, #3
 800058c:	04d2      	lsls	r2, r2, #19
 800058e:	4314      	orrs	r4, r2
 8000590:	3f7f      	subs	r7, #127	@ 0x7f
 8000592:	0273      	lsls	r3, r6, #9
 8000594:	0a5b      	lsrs	r3, r3, #9
 8000596:	4698      	mov	r8, r3
 8000598:	0073      	lsls	r3, r6, #1
 800059a:	0e1b      	lsrs	r3, r3, #24
 800059c:	0ff6      	lsrs	r6, r6, #31
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d01b      	beq.n	80005da <__aeabi_fdiv+0x76>
 80005a2:	2bff      	cmp	r3, #255	@ 0xff
 80005a4:	d013      	beq.n	80005ce <__aeabi_fdiv+0x6a>
 80005a6:	4642      	mov	r2, r8
 80005a8:	2180      	movs	r1, #128	@ 0x80
 80005aa:	00d2      	lsls	r2, r2, #3
 80005ac:	04c9      	lsls	r1, r1, #19
 80005ae:	4311      	orrs	r1, r2
 80005b0:	4688      	mov	r8, r1
 80005b2:	2000      	movs	r0, #0
 80005b4:	3b7f      	subs	r3, #127	@ 0x7f
 80005b6:	0029      	movs	r1, r5
 80005b8:	1aff      	subs	r7, r7, r3
 80005ba:	464b      	mov	r3, r9
 80005bc:	4071      	eors	r1, r6
 80005be:	b2c9      	uxtb	r1, r1
 80005c0:	2b0f      	cmp	r3, #15
 80005c2:	d900      	bls.n	80005c6 <__aeabi_fdiv+0x62>
 80005c4:	e0b5      	b.n	8000732 <__aeabi_fdiv+0x1ce>
 80005c6:	4a74      	ldr	r2, [pc, #464]	@ (8000798 <__aeabi_fdiv+0x234>)
 80005c8:	009b      	lsls	r3, r3, #2
 80005ca:	58d3      	ldr	r3, [r2, r3]
 80005cc:	469f      	mov	pc, r3
 80005ce:	4643      	mov	r3, r8
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d13f      	bne.n	8000654 <__aeabi_fdiv+0xf0>
 80005d4:	3fff      	subs	r7, #255	@ 0xff
 80005d6:	3302      	adds	r3, #2
 80005d8:	e003      	b.n	80005e2 <__aeabi_fdiv+0x7e>
 80005da:	4643      	mov	r3, r8
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d12d      	bne.n	800063c <__aeabi_fdiv+0xd8>
 80005e0:	2301      	movs	r3, #1
 80005e2:	0029      	movs	r1, r5
 80005e4:	464a      	mov	r2, r9
 80005e6:	4071      	eors	r1, r6
 80005e8:	b2c9      	uxtb	r1, r1
 80005ea:	431a      	orrs	r2, r3
 80005ec:	2a0e      	cmp	r2, #14
 80005ee:	d838      	bhi.n	8000662 <__aeabi_fdiv+0xfe>
 80005f0:	486a      	ldr	r0, [pc, #424]	@ (800079c <__aeabi_fdiv+0x238>)
 80005f2:	0092      	lsls	r2, r2, #2
 80005f4:	5882      	ldr	r2, [r0, r2]
 80005f6:	4697      	mov	pc, r2
 80005f8:	2c00      	cmp	r4, #0
 80005fa:	d113      	bne.n	8000624 <__aeabi_fdiv+0xc0>
 80005fc:	2304      	movs	r3, #4
 80005fe:	4699      	mov	r9, r3
 8000600:	3b03      	subs	r3, #3
 8000602:	2700      	movs	r7, #0
 8000604:	469a      	mov	sl, r3
 8000606:	e7c4      	b.n	8000592 <__aeabi_fdiv+0x2e>
 8000608:	2c00      	cmp	r4, #0
 800060a:	d105      	bne.n	8000618 <__aeabi_fdiv+0xb4>
 800060c:	2308      	movs	r3, #8
 800060e:	4699      	mov	r9, r3
 8000610:	3b06      	subs	r3, #6
 8000612:	27ff      	movs	r7, #255	@ 0xff
 8000614:	469a      	mov	sl, r3
 8000616:	e7bc      	b.n	8000592 <__aeabi_fdiv+0x2e>
 8000618:	230c      	movs	r3, #12
 800061a:	4699      	mov	r9, r3
 800061c:	3b09      	subs	r3, #9
 800061e:	27ff      	movs	r7, #255	@ 0xff
 8000620:	469a      	mov	sl, r3
 8000622:	e7b6      	b.n	8000592 <__aeabi_fdiv+0x2e>
 8000624:	0020      	movs	r0, r4
 8000626:	f001 fad1 	bl	8001bcc <__clzsi2>
 800062a:	2776      	movs	r7, #118	@ 0x76
 800062c:	1f43      	subs	r3, r0, #5
 800062e:	409c      	lsls	r4, r3
 8000630:	2300      	movs	r3, #0
 8000632:	427f      	negs	r7, r7
 8000634:	4699      	mov	r9, r3
 8000636:	469a      	mov	sl, r3
 8000638:	1a3f      	subs	r7, r7, r0
 800063a:	e7aa      	b.n	8000592 <__aeabi_fdiv+0x2e>
 800063c:	4640      	mov	r0, r8
 800063e:	f001 fac5 	bl	8001bcc <__clzsi2>
 8000642:	4642      	mov	r2, r8
 8000644:	1f43      	subs	r3, r0, #5
 8000646:	409a      	lsls	r2, r3
 8000648:	2376      	movs	r3, #118	@ 0x76
 800064a:	425b      	negs	r3, r3
 800064c:	1a1b      	subs	r3, r3, r0
 800064e:	4690      	mov	r8, r2
 8000650:	2000      	movs	r0, #0
 8000652:	e7b0      	b.n	80005b6 <__aeabi_fdiv+0x52>
 8000654:	2303      	movs	r3, #3
 8000656:	464a      	mov	r2, r9
 8000658:	431a      	orrs	r2, r3
 800065a:	4691      	mov	r9, r2
 800065c:	2003      	movs	r0, #3
 800065e:	33fc      	adds	r3, #252	@ 0xfc
 8000660:	e7a9      	b.n	80005b6 <__aeabi_fdiv+0x52>
 8000662:	000d      	movs	r5, r1
 8000664:	20ff      	movs	r0, #255	@ 0xff
 8000666:	2200      	movs	r2, #0
 8000668:	05c0      	lsls	r0, r0, #23
 800066a:	07ed      	lsls	r5, r5, #31
 800066c:	4310      	orrs	r0, r2
 800066e:	4328      	orrs	r0, r5
 8000670:	bce0      	pop	{r5, r6, r7}
 8000672:	46ba      	mov	sl, r7
 8000674:	46b1      	mov	r9, r6
 8000676:	46a8      	mov	r8, r5
 8000678:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800067a:	000d      	movs	r5, r1
 800067c:	2000      	movs	r0, #0
 800067e:	2200      	movs	r2, #0
 8000680:	e7f2      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000682:	4653      	mov	r3, sl
 8000684:	2b02      	cmp	r3, #2
 8000686:	d0ed      	beq.n	8000664 <__aeabi_fdiv+0x100>
 8000688:	2b03      	cmp	r3, #3
 800068a:	d033      	beq.n	80006f4 <__aeabi_fdiv+0x190>
 800068c:	46a0      	mov	r8, r4
 800068e:	2b01      	cmp	r3, #1
 8000690:	d105      	bne.n	800069e <__aeabi_fdiv+0x13a>
 8000692:	2000      	movs	r0, #0
 8000694:	2200      	movs	r2, #0
 8000696:	e7e7      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000698:	0035      	movs	r5, r6
 800069a:	2803      	cmp	r0, #3
 800069c:	d07a      	beq.n	8000794 <__aeabi_fdiv+0x230>
 800069e:	003b      	movs	r3, r7
 80006a0:	337f      	adds	r3, #127	@ 0x7f
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	dd2d      	ble.n	8000702 <__aeabi_fdiv+0x19e>
 80006a6:	4642      	mov	r2, r8
 80006a8:	0752      	lsls	r2, r2, #29
 80006aa:	d007      	beq.n	80006bc <__aeabi_fdiv+0x158>
 80006ac:	220f      	movs	r2, #15
 80006ae:	4641      	mov	r1, r8
 80006b0:	400a      	ands	r2, r1
 80006b2:	2a04      	cmp	r2, #4
 80006b4:	d002      	beq.n	80006bc <__aeabi_fdiv+0x158>
 80006b6:	2204      	movs	r2, #4
 80006b8:	4694      	mov	ip, r2
 80006ba:	44e0      	add	r8, ip
 80006bc:	4642      	mov	r2, r8
 80006be:	0112      	lsls	r2, r2, #4
 80006c0:	d505      	bpl.n	80006ce <__aeabi_fdiv+0x16a>
 80006c2:	4642      	mov	r2, r8
 80006c4:	4b36      	ldr	r3, [pc, #216]	@ (80007a0 <__aeabi_fdiv+0x23c>)
 80006c6:	401a      	ands	r2, r3
 80006c8:	003b      	movs	r3, r7
 80006ca:	4690      	mov	r8, r2
 80006cc:	3380      	adds	r3, #128	@ 0x80
 80006ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80006d0:	dcc8      	bgt.n	8000664 <__aeabi_fdiv+0x100>
 80006d2:	4642      	mov	r2, r8
 80006d4:	0192      	lsls	r2, r2, #6
 80006d6:	0a52      	lsrs	r2, r2, #9
 80006d8:	b2d8      	uxtb	r0, r3
 80006da:	e7c5      	b.n	8000668 <__aeabi_fdiv+0x104>
 80006dc:	2280      	movs	r2, #128	@ 0x80
 80006de:	2500      	movs	r5, #0
 80006e0:	20ff      	movs	r0, #255	@ 0xff
 80006e2:	03d2      	lsls	r2, r2, #15
 80006e4:	e7c0      	b.n	8000668 <__aeabi_fdiv+0x104>
 80006e6:	2280      	movs	r2, #128	@ 0x80
 80006e8:	03d2      	lsls	r2, r2, #15
 80006ea:	4214      	tst	r4, r2
 80006ec:	d002      	beq.n	80006f4 <__aeabi_fdiv+0x190>
 80006ee:	4643      	mov	r3, r8
 80006f0:	4213      	tst	r3, r2
 80006f2:	d049      	beq.n	8000788 <__aeabi_fdiv+0x224>
 80006f4:	2280      	movs	r2, #128	@ 0x80
 80006f6:	03d2      	lsls	r2, r2, #15
 80006f8:	4322      	orrs	r2, r4
 80006fa:	0252      	lsls	r2, r2, #9
 80006fc:	20ff      	movs	r0, #255	@ 0xff
 80006fe:	0a52      	lsrs	r2, r2, #9
 8000700:	e7b2      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000702:	2201      	movs	r2, #1
 8000704:	1ad3      	subs	r3, r2, r3
 8000706:	2b1b      	cmp	r3, #27
 8000708:	dcc3      	bgt.n	8000692 <__aeabi_fdiv+0x12e>
 800070a:	4642      	mov	r2, r8
 800070c:	40da      	lsrs	r2, r3
 800070e:	4643      	mov	r3, r8
 8000710:	379e      	adds	r7, #158	@ 0x9e
 8000712:	40bb      	lsls	r3, r7
 8000714:	1e59      	subs	r1, r3, #1
 8000716:	418b      	sbcs	r3, r1
 8000718:	431a      	orrs	r2, r3
 800071a:	0753      	lsls	r3, r2, #29
 800071c:	d004      	beq.n	8000728 <__aeabi_fdiv+0x1c4>
 800071e:	230f      	movs	r3, #15
 8000720:	4013      	ands	r3, r2
 8000722:	2b04      	cmp	r3, #4
 8000724:	d000      	beq.n	8000728 <__aeabi_fdiv+0x1c4>
 8000726:	3204      	adds	r2, #4
 8000728:	0153      	lsls	r3, r2, #5
 800072a:	d529      	bpl.n	8000780 <__aeabi_fdiv+0x21c>
 800072c:	2001      	movs	r0, #1
 800072e:	2200      	movs	r2, #0
 8000730:	e79a      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000732:	4642      	mov	r2, r8
 8000734:	0163      	lsls	r3, r4, #5
 8000736:	0155      	lsls	r5, r2, #5
 8000738:	42ab      	cmp	r3, r5
 800073a:	d215      	bcs.n	8000768 <__aeabi_fdiv+0x204>
 800073c:	201b      	movs	r0, #27
 800073e:	2200      	movs	r2, #0
 8000740:	3f01      	subs	r7, #1
 8000742:	2601      	movs	r6, #1
 8000744:	001c      	movs	r4, r3
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	2c00      	cmp	r4, #0
 800074c:	db01      	blt.n	8000752 <__aeabi_fdiv+0x1ee>
 800074e:	429d      	cmp	r5, r3
 8000750:	d801      	bhi.n	8000756 <__aeabi_fdiv+0x1f2>
 8000752:	1b5b      	subs	r3, r3, r5
 8000754:	4332      	orrs	r2, r6
 8000756:	3801      	subs	r0, #1
 8000758:	2800      	cmp	r0, #0
 800075a:	d1f3      	bne.n	8000744 <__aeabi_fdiv+0x1e0>
 800075c:	1e58      	subs	r0, r3, #1
 800075e:	4183      	sbcs	r3, r0
 8000760:	4313      	orrs	r3, r2
 8000762:	4698      	mov	r8, r3
 8000764:	000d      	movs	r5, r1
 8000766:	e79a      	b.n	800069e <__aeabi_fdiv+0x13a>
 8000768:	201a      	movs	r0, #26
 800076a:	2201      	movs	r2, #1
 800076c:	1b5b      	subs	r3, r3, r5
 800076e:	e7e8      	b.n	8000742 <__aeabi_fdiv+0x1de>
 8000770:	3b02      	subs	r3, #2
 8000772:	425a      	negs	r2, r3
 8000774:	4153      	adcs	r3, r2
 8000776:	425b      	negs	r3, r3
 8000778:	0035      	movs	r5, r6
 800077a:	2200      	movs	r2, #0
 800077c:	b2d8      	uxtb	r0, r3
 800077e:	e773      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000780:	0192      	lsls	r2, r2, #6
 8000782:	2000      	movs	r0, #0
 8000784:	0a52      	lsrs	r2, r2, #9
 8000786:	e76f      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000788:	431a      	orrs	r2, r3
 800078a:	0252      	lsls	r2, r2, #9
 800078c:	0035      	movs	r5, r6
 800078e:	20ff      	movs	r0, #255	@ 0xff
 8000790:	0a52      	lsrs	r2, r2, #9
 8000792:	e769      	b.n	8000668 <__aeabi_fdiv+0x104>
 8000794:	4644      	mov	r4, r8
 8000796:	e7ad      	b.n	80006f4 <__aeabi_fdiv+0x190>
 8000798:	08004144 	.word	0x08004144
 800079c:	08004184 	.word	0x08004184
 80007a0:	f7ffffff 	.word	0xf7ffffff

080007a4 <__aeabi_fmul>:
 80007a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a6:	464f      	mov	r7, r9
 80007a8:	4646      	mov	r6, r8
 80007aa:	46d6      	mov	lr, sl
 80007ac:	0243      	lsls	r3, r0, #9
 80007ae:	0a5b      	lsrs	r3, r3, #9
 80007b0:	0045      	lsls	r5, r0, #1
 80007b2:	b5c0      	push	{r6, r7, lr}
 80007b4:	4699      	mov	r9, r3
 80007b6:	1c0f      	adds	r7, r1, #0
 80007b8:	0e2d      	lsrs	r5, r5, #24
 80007ba:	0fc6      	lsrs	r6, r0, #31
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d100      	bne.n	80007c2 <__aeabi_fmul+0x1e>
 80007c0:	e088      	b.n	80008d4 <__aeabi_fmul+0x130>
 80007c2:	2dff      	cmp	r5, #255	@ 0xff
 80007c4:	d100      	bne.n	80007c8 <__aeabi_fmul+0x24>
 80007c6:	e08d      	b.n	80008e4 <__aeabi_fmul+0x140>
 80007c8:	2280      	movs	r2, #128	@ 0x80
 80007ca:	00db      	lsls	r3, r3, #3
 80007cc:	04d2      	lsls	r2, r2, #19
 80007ce:	431a      	orrs	r2, r3
 80007d0:	2300      	movs	r3, #0
 80007d2:	4691      	mov	r9, r2
 80007d4:	4698      	mov	r8, r3
 80007d6:	469a      	mov	sl, r3
 80007d8:	3d7f      	subs	r5, #127	@ 0x7f
 80007da:	027c      	lsls	r4, r7, #9
 80007dc:	007b      	lsls	r3, r7, #1
 80007de:	0a64      	lsrs	r4, r4, #9
 80007e0:	0e1b      	lsrs	r3, r3, #24
 80007e2:	0fff      	lsrs	r7, r7, #31
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d068      	beq.n	80008ba <__aeabi_fmul+0x116>
 80007e8:	2bff      	cmp	r3, #255	@ 0xff
 80007ea:	d021      	beq.n	8000830 <__aeabi_fmul+0x8c>
 80007ec:	2280      	movs	r2, #128	@ 0x80
 80007ee:	00e4      	lsls	r4, r4, #3
 80007f0:	04d2      	lsls	r2, r2, #19
 80007f2:	4314      	orrs	r4, r2
 80007f4:	4642      	mov	r2, r8
 80007f6:	3b7f      	subs	r3, #127	@ 0x7f
 80007f8:	195b      	adds	r3, r3, r5
 80007fa:	2100      	movs	r1, #0
 80007fc:	1c5d      	adds	r5, r3, #1
 80007fe:	2a0a      	cmp	r2, #10
 8000800:	dc2e      	bgt.n	8000860 <__aeabi_fmul+0xbc>
 8000802:	407e      	eors	r6, r7
 8000804:	4642      	mov	r2, r8
 8000806:	2a02      	cmp	r2, #2
 8000808:	dc23      	bgt.n	8000852 <__aeabi_fmul+0xae>
 800080a:	3a01      	subs	r2, #1
 800080c:	2a01      	cmp	r2, #1
 800080e:	d900      	bls.n	8000812 <__aeabi_fmul+0x6e>
 8000810:	e0bd      	b.n	800098e <__aeabi_fmul+0x1ea>
 8000812:	2902      	cmp	r1, #2
 8000814:	d06e      	beq.n	80008f4 <__aeabi_fmul+0x150>
 8000816:	2901      	cmp	r1, #1
 8000818:	d12c      	bne.n	8000874 <__aeabi_fmul+0xd0>
 800081a:	2000      	movs	r0, #0
 800081c:	2200      	movs	r2, #0
 800081e:	05c0      	lsls	r0, r0, #23
 8000820:	07f6      	lsls	r6, r6, #31
 8000822:	4310      	orrs	r0, r2
 8000824:	4330      	orrs	r0, r6
 8000826:	bce0      	pop	{r5, r6, r7}
 8000828:	46ba      	mov	sl, r7
 800082a:	46b1      	mov	r9, r6
 800082c:	46a8      	mov	r8, r5
 800082e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000830:	002b      	movs	r3, r5
 8000832:	33ff      	adds	r3, #255	@ 0xff
 8000834:	2c00      	cmp	r4, #0
 8000836:	d065      	beq.n	8000904 <__aeabi_fmul+0x160>
 8000838:	2203      	movs	r2, #3
 800083a:	4641      	mov	r1, r8
 800083c:	4311      	orrs	r1, r2
 800083e:	0032      	movs	r2, r6
 8000840:	3501      	adds	r5, #1
 8000842:	4688      	mov	r8, r1
 8000844:	407a      	eors	r2, r7
 8000846:	35ff      	adds	r5, #255	@ 0xff
 8000848:	290a      	cmp	r1, #10
 800084a:	dd00      	ble.n	800084e <__aeabi_fmul+0xaa>
 800084c:	e0d8      	b.n	8000a00 <__aeabi_fmul+0x25c>
 800084e:	0016      	movs	r6, r2
 8000850:	2103      	movs	r1, #3
 8000852:	4640      	mov	r0, r8
 8000854:	2201      	movs	r2, #1
 8000856:	4082      	lsls	r2, r0
 8000858:	20a6      	movs	r0, #166	@ 0xa6
 800085a:	00c0      	lsls	r0, r0, #3
 800085c:	4202      	tst	r2, r0
 800085e:	d020      	beq.n	80008a2 <__aeabi_fmul+0xfe>
 8000860:	4653      	mov	r3, sl
 8000862:	2b02      	cmp	r3, #2
 8000864:	d046      	beq.n	80008f4 <__aeabi_fmul+0x150>
 8000866:	2b03      	cmp	r3, #3
 8000868:	d100      	bne.n	800086c <__aeabi_fmul+0xc8>
 800086a:	e0bb      	b.n	80009e4 <__aeabi_fmul+0x240>
 800086c:	4651      	mov	r1, sl
 800086e:	464c      	mov	r4, r9
 8000870:	2901      	cmp	r1, #1
 8000872:	d0d2      	beq.n	800081a <__aeabi_fmul+0x76>
 8000874:	002b      	movs	r3, r5
 8000876:	337f      	adds	r3, #127	@ 0x7f
 8000878:	2b00      	cmp	r3, #0
 800087a:	dd70      	ble.n	800095e <__aeabi_fmul+0x1ba>
 800087c:	0762      	lsls	r2, r4, #29
 800087e:	d004      	beq.n	800088a <__aeabi_fmul+0xe6>
 8000880:	220f      	movs	r2, #15
 8000882:	4022      	ands	r2, r4
 8000884:	2a04      	cmp	r2, #4
 8000886:	d000      	beq.n	800088a <__aeabi_fmul+0xe6>
 8000888:	3404      	adds	r4, #4
 800088a:	0122      	lsls	r2, r4, #4
 800088c:	d503      	bpl.n	8000896 <__aeabi_fmul+0xf2>
 800088e:	4b63      	ldr	r3, [pc, #396]	@ (8000a1c <__aeabi_fmul+0x278>)
 8000890:	401c      	ands	r4, r3
 8000892:	002b      	movs	r3, r5
 8000894:	3380      	adds	r3, #128	@ 0x80
 8000896:	2bfe      	cmp	r3, #254	@ 0xfe
 8000898:	dc2c      	bgt.n	80008f4 <__aeabi_fmul+0x150>
 800089a:	01a2      	lsls	r2, r4, #6
 800089c:	0a52      	lsrs	r2, r2, #9
 800089e:	b2d8      	uxtb	r0, r3
 80008a0:	e7bd      	b.n	800081e <__aeabi_fmul+0x7a>
 80008a2:	2090      	movs	r0, #144	@ 0x90
 80008a4:	0080      	lsls	r0, r0, #2
 80008a6:	4202      	tst	r2, r0
 80008a8:	d127      	bne.n	80008fa <__aeabi_fmul+0x156>
 80008aa:	38b9      	subs	r0, #185	@ 0xb9
 80008ac:	38ff      	subs	r0, #255	@ 0xff
 80008ae:	4210      	tst	r0, r2
 80008b0:	d06d      	beq.n	800098e <__aeabi_fmul+0x1ea>
 80008b2:	003e      	movs	r6, r7
 80008b4:	46a1      	mov	r9, r4
 80008b6:	468a      	mov	sl, r1
 80008b8:	e7d2      	b.n	8000860 <__aeabi_fmul+0xbc>
 80008ba:	2c00      	cmp	r4, #0
 80008bc:	d141      	bne.n	8000942 <__aeabi_fmul+0x19e>
 80008be:	2301      	movs	r3, #1
 80008c0:	4642      	mov	r2, r8
 80008c2:	431a      	orrs	r2, r3
 80008c4:	4690      	mov	r8, r2
 80008c6:	002b      	movs	r3, r5
 80008c8:	4642      	mov	r2, r8
 80008ca:	2101      	movs	r1, #1
 80008cc:	1c5d      	adds	r5, r3, #1
 80008ce:	2a0a      	cmp	r2, #10
 80008d0:	dd97      	ble.n	8000802 <__aeabi_fmul+0x5e>
 80008d2:	e7c5      	b.n	8000860 <__aeabi_fmul+0xbc>
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d126      	bne.n	8000926 <__aeabi_fmul+0x182>
 80008d8:	2304      	movs	r3, #4
 80008da:	4698      	mov	r8, r3
 80008dc:	3b03      	subs	r3, #3
 80008de:	2500      	movs	r5, #0
 80008e0:	469a      	mov	sl, r3
 80008e2:	e77a      	b.n	80007da <__aeabi_fmul+0x36>
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d118      	bne.n	800091a <__aeabi_fmul+0x176>
 80008e8:	2308      	movs	r3, #8
 80008ea:	4698      	mov	r8, r3
 80008ec:	3b06      	subs	r3, #6
 80008ee:	25ff      	movs	r5, #255	@ 0xff
 80008f0:	469a      	mov	sl, r3
 80008f2:	e772      	b.n	80007da <__aeabi_fmul+0x36>
 80008f4:	20ff      	movs	r0, #255	@ 0xff
 80008f6:	2200      	movs	r2, #0
 80008f8:	e791      	b.n	800081e <__aeabi_fmul+0x7a>
 80008fa:	2280      	movs	r2, #128	@ 0x80
 80008fc:	2600      	movs	r6, #0
 80008fe:	20ff      	movs	r0, #255	@ 0xff
 8000900:	03d2      	lsls	r2, r2, #15
 8000902:	e78c      	b.n	800081e <__aeabi_fmul+0x7a>
 8000904:	4641      	mov	r1, r8
 8000906:	2202      	movs	r2, #2
 8000908:	3501      	adds	r5, #1
 800090a:	4311      	orrs	r1, r2
 800090c:	4688      	mov	r8, r1
 800090e:	35ff      	adds	r5, #255	@ 0xff
 8000910:	290a      	cmp	r1, #10
 8000912:	dca5      	bgt.n	8000860 <__aeabi_fmul+0xbc>
 8000914:	2102      	movs	r1, #2
 8000916:	407e      	eors	r6, r7
 8000918:	e774      	b.n	8000804 <__aeabi_fmul+0x60>
 800091a:	230c      	movs	r3, #12
 800091c:	4698      	mov	r8, r3
 800091e:	3b09      	subs	r3, #9
 8000920:	25ff      	movs	r5, #255	@ 0xff
 8000922:	469a      	mov	sl, r3
 8000924:	e759      	b.n	80007da <__aeabi_fmul+0x36>
 8000926:	0018      	movs	r0, r3
 8000928:	f001 f950 	bl	8001bcc <__clzsi2>
 800092c:	464a      	mov	r2, r9
 800092e:	1f43      	subs	r3, r0, #5
 8000930:	2576      	movs	r5, #118	@ 0x76
 8000932:	409a      	lsls	r2, r3
 8000934:	2300      	movs	r3, #0
 8000936:	426d      	negs	r5, r5
 8000938:	4691      	mov	r9, r2
 800093a:	4698      	mov	r8, r3
 800093c:	469a      	mov	sl, r3
 800093e:	1a2d      	subs	r5, r5, r0
 8000940:	e74b      	b.n	80007da <__aeabi_fmul+0x36>
 8000942:	0020      	movs	r0, r4
 8000944:	f001 f942 	bl	8001bcc <__clzsi2>
 8000948:	4642      	mov	r2, r8
 800094a:	1f43      	subs	r3, r0, #5
 800094c:	409c      	lsls	r4, r3
 800094e:	1a2b      	subs	r3, r5, r0
 8000950:	3b76      	subs	r3, #118	@ 0x76
 8000952:	2100      	movs	r1, #0
 8000954:	1c5d      	adds	r5, r3, #1
 8000956:	2a0a      	cmp	r2, #10
 8000958:	dc00      	bgt.n	800095c <__aeabi_fmul+0x1b8>
 800095a:	e752      	b.n	8000802 <__aeabi_fmul+0x5e>
 800095c:	e780      	b.n	8000860 <__aeabi_fmul+0xbc>
 800095e:	2201      	movs	r2, #1
 8000960:	1ad3      	subs	r3, r2, r3
 8000962:	2b1b      	cmp	r3, #27
 8000964:	dd00      	ble.n	8000968 <__aeabi_fmul+0x1c4>
 8000966:	e758      	b.n	800081a <__aeabi_fmul+0x76>
 8000968:	359e      	adds	r5, #158	@ 0x9e
 800096a:	0022      	movs	r2, r4
 800096c:	40ac      	lsls	r4, r5
 800096e:	40da      	lsrs	r2, r3
 8000970:	1e63      	subs	r3, r4, #1
 8000972:	419c      	sbcs	r4, r3
 8000974:	4322      	orrs	r2, r4
 8000976:	0753      	lsls	r3, r2, #29
 8000978:	d004      	beq.n	8000984 <__aeabi_fmul+0x1e0>
 800097a:	230f      	movs	r3, #15
 800097c:	4013      	ands	r3, r2
 800097e:	2b04      	cmp	r3, #4
 8000980:	d000      	beq.n	8000984 <__aeabi_fmul+0x1e0>
 8000982:	3204      	adds	r2, #4
 8000984:	0153      	lsls	r3, r2, #5
 8000986:	d537      	bpl.n	80009f8 <__aeabi_fmul+0x254>
 8000988:	2001      	movs	r0, #1
 800098a:	2200      	movs	r2, #0
 800098c:	e747      	b.n	800081e <__aeabi_fmul+0x7a>
 800098e:	0c21      	lsrs	r1, r4, #16
 8000990:	464a      	mov	r2, r9
 8000992:	0424      	lsls	r4, r4, #16
 8000994:	0c24      	lsrs	r4, r4, #16
 8000996:	0027      	movs	r7, r4
 8000998:	0c10      	lsrs	r0, r2, #16
 800099a:	0412      	lsls	r2, r2, #16
 800099c:	0c12      	lsrs	r2, r2, #16
 800099e:	4344      	muls	r4, r0
 80009a0:	4357      	muls	r7, r2
 80009a2:	4348      	muls	r0, r1
 80009a4:	4351      	muls	r1, r2
 80009a6:	0c3a      	lsrs	r2, r7, #16
 80009a8:	1909      	adds	r1, r1, r4
 80009aa:	1852      	adds	r2, r2, r1
 80009ac:	4294      	cmp	r4, r2
 80009ae:	d903      	bls.n	80009b8 <__aeabi_fmul+0x214>
 80009b0:	2180      	movs	r1, #128	@ 0x80
 80009b2:	0249      	lsls	r1, r1, #9
 80009b4:	468c      	mov	ip, r1
 80009b6:	4460      	add	r0, ip
 80009b8:	043f      	lsls	r7, r7, #16
 80009ba:	0411      	lsls	r1, r2, #16
 80009bc:	0c3f      	lsrs	r7, r7, #16
 80009be:	19c9      	adds	r1, r1, r7
 80009c0:	018c      	lsls	r4, r1, #6
 80009c2:	1e67      	subs	r7, r4, #1
 80009c4:	41bc      	sbcs	r4, r7
 80009c6:	0c12      	lsrs	r2, r2, #16
 80009c8:	0e89      	lsrs	r1, r1, #26
 80009ca:	1812      	adds	r2, r2, r0
 80009cc:	430c      	orrs	r4, r1
 80009ce:	0192      	lsls	r2, r2, #6
 80009d0:	4314      	orrs	r4, r2
 80009d2:	0112      	lsls	r2, r2, #4
 80009d4:	d50e      	bpl.n	80009f4 <__aeabi_fmul+0x250>
 80009d6:	2301      	movs	r3, #1
 80009d8:	0862      	lsrs	r2, r4, #1
 80009da:	401c      	ands	r4, r3
 80009dc:	4314      	orrs	r4, r2
 80009de:	e749      	b.n	8000874 <__aeabi_fmul+0xd0>
 80009e0:	003e      	movs	r6, r7
 80009e2:	46a1      	mov	r9, r4
 80009e4:	2280      	movs	r2, #128	@ 0x80
 80009e6:	464b      	mov	r3, r9
 80009e8:	03d2      	lsls	r2, r2, #15
 80009ea:	431a      	orrs	r2, r3
 80009ec:	0252      	lsls	r2, r2, #9
 80009ee:	20ff      	movs	r0, #255	@ 0xff
 80009f0:	0a52      	lsrs	r2, r2, #9
 80009f2:	e714      	b.n	800081e <__aeabi_fmul+0x7a>
 80009f4:	001d      	movs	r5, r3
 80009f6:	e73d      	b.n	8000874 <__aeabi_fmul+0xd0>
 80009f8:	0192      	lsls	r2, r2, #6
 80009fa:	2000      	movs	r0, #0
 80009fc:	0a52      	lsrs	r2, r2, #9
 80009fe:	e70e      	b.n	800081e <__aeabi_fmul+0x7a>
 8000a00:	290f      	cmp	r1, #15
 8000a02:	d1ed      	bne.n	80009e0 <__aeabi_fmul+0x23c>
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	464b      	mov	r3, r9
 8000a08:	03d2      	lsls	r2, r2, #15
 8000a0a:	4213      	tst	r3, r2
 8000a0c:	d0ea      	beq.n	80009e4 <__aeabi_fmul+0x240>
 8000a0e:	4214      	tst	r4, r2
 8000a10:	d1e8      	bne.n	80009e4 <__aeabi_fmul+0x240>
 8000a12:	003e      	movs	r6, r7
 8000a14:	20ff      	movs	r0, #255	@ 0xff
 8000a16:	4322      	orrs	r2, r4
 8000a18:	e701      	b.n	800081e <__aeabi_fmul+0x7a>
 8000a1a:	46c0      	nop			@ (mov r8, r8)
 8000a1c:	f7ffffff 	.word	0xf7ffffff

08000a20 <__aeabi_fsub>:
 8000a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a22:	4647      	mov	r7, r8
 8000a24:	46ce      	mov	lr, r9
 8000a26:	024e      	lsls	r6, r1, #9
 8000a28:	0243      	lsls	r3, r0, #9
 8000a2a:	0045      	lsls	r5, r0, #1
 8000a2c:	0a72      	lsrs	r2, r6, #9
 8000a2e:	0fc4      	lsrs	r4, r0, #31
 8000a30:	0048      	lsls	r0, r1, #1
 8000a32:	b580      	push	{r7, lr}
 8000a34:	4694      	mov	ip, r2
 8000a36:	0a5f      	lsrs	r7, r3, #9
 8000a38:	0e2d      	lsrs	r5, r5, #24
 8000a3a:	099b      	lsrs	r3, r3, #6
 8000a3c:	0e00      	lsrs	r0, r0, #24
 8000a3e:	0fc9      	lsrs	r1, r1, #31
 8000a40:	09b6      	lsrs	r6, r6, #6
 8000a42:	28ff      	cmp	r0, #255	@ 0xff
 8000a44:	d024      	beq.n	8000a90 <__aeabi_fsub+0x70>
 8000a46:	2201      	movs	r2, #1
 8000a48:	4051      	eors	r1, r2
 8000a4a:	1a2a      	subs	r2, r5, r0
 8000a4c:	428c      	cmp	r4, r1
 8000a4e:	d00f      	beq.n	8000a70 <__aeabi_fsub+0x50>
 8000a50:	2a00      	cmp	r2, #0
 8000a52:	dc00      	bgt.n	8000a56 <__aeabi_fsub+0x36>
 8000a54:	e16a      	b.n	8000d2c <__aeabi_fsub+0x30c>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d135      	bne.n	8000ac6 <__aeabi_fsub+0xa6>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fsub+0x40>
 8000a5e:	e0a2      	b.n	8000ba6 <__aeabi_fsub+0x186>
 8000a60:	1e51      	subs	r1, r2, #1
 8000a62:	2a01      	cmp	r2, #1
 8000a64:	d100      	bne.n	8000a68 <__aeabi_fsub+0x48>
 8000a66:	e124      	b.n	8000cb2 <__aeabi_fsub+0x292>
 8000a68:	2aff      	cmp	r2, #255	@ 0xff
 8000a6a:	d021      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000a6c:	000a      	movs	r2, r1
 8000a6e:	e02f      	b.n	8000ad0 <__aeabi_fsub+0xb0>
 8000a70:	2a00      	cmp	r2, #0
 8000a72:	dc00      	bgt.n	8000a76 <__aeabi_fsub+0x56>
 8000a74:	e167      	b.n	8000d46 <__aeabi_fsub+0x326>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d05e      	beq.n	8000b38 <__aeabi_fsub+0x118>
 8000a7a:	2dff      	cmp	r5, #255	@ 0xff
 8000a7c:	d018      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000a7e:	2180      	movs	r1, #128	@ 0x80
 8000a80:	04c9      	lsls	r1, r1, #19
 8000a82:	430e      	orrs	r6, r1
 8000a84:	2a1b      	cmp	r2, #27
 8000a86:	dc00      	bgt.n	8000a8a <__aeabi_fsub+0x6a>
 8000a88:	e076      	b.n	8000b78 <__aeabi_fsub+0x158>
 8000a8a:	002a      	movs	r2, r5
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	e032      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000a90:	002a      	movs	r2, r5
 8000a92:	3aff      	subs	r2, #255	@ 0xff
 8000a94:	4691      	mov	r9, r2
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d042      	beq.n	8000b20 <__aeabi_fsub+0x100>
 8000a9a:	428c      	cmp	r4, r1
 8000a9c:	d055      	beq.n	8000b4a <__aeabi_fsub+0x12a>
 8000a9e:	464a      	mov	r2, r9
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_fsub+0x86>
 8000aa4:	e09c      	b.n	8000be0 <__aeabi_fsub+0x1c0>
 8000aa6:	2d00      	cmp	r5, #0
 8000aa8:	d100      	bne.n	8000aac <__aeabi_fsub+0x8c>
 8000aaa:	e077      	b.n	8000b9c <__aeabi_fsub+0x17c>
 8000aac:	000c      	movs	r4, r1
 8000aae:	0033      	movs	r3, r6
 8000ab0:	08db      	lsrs	r3, r3, #3
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d100      	bne.n	8000ab8 <__aeabi_fsub+0x98>
 8000ab6:	e06e      	b.n	8000b96 <__aeabi_fsub+0x176>
 8000ab8:	2280      	movs	r2, #128	@ 0x80
 8000aba:	03d2      	lsls	r2, r2, #15
 8000abc:	4313      	orrs	r3, r2
 8000abe:	025b      	lsls	r3, r3, #9
 8000ac0:	20ff      	movs	r0, #255	@ 0xff
 8000ac2:	0a5b      	lsrs	r3, r3, #9
 8000ac4:	e024      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000ac6:	2dff      	cmp	r5, #255	@ 0xff
 8000ac8:	d0f2      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000aca:	2180      	movs	r1, #128	@ 0x80
 8000acc:	04c9      	lsls	r1, r1, #19
 8000ace:	430e      	orrs	r6, r1
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	2a1b      	cmp	r2, #27
 8000ad4:	dc08      	bgt.n	8000ae8 <__aeabi_fsub+0xc8>
 8000ad6:	0031      	movs	r1, r6
 8000ad8:	2020      	movs	r0, #32
 8000ada:	40d1      	lsrs	r1, r2
 8000adc:	1a82      	subs	r2, r0, r2
 8000ade:	4096      	lsls	r6, r2
 8000ae0:	0032      	movs	r2, r6
 8000ae2:	1e50      	subs	r0, r2, #1
 8000ae4:	4182      	sbcs	r2, r0
 8000ae6:	4311      	orrs	r1, r2
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	015a      	lsls	r2, r3, #5
 8000aec:	d460      	bmi.n	8000bb0 <__aeabi_fsub+0x190>
 8000aee:	2107      	movs	r1, #7
 8000af0:	002a      	movs	r2, r5
 8000af2:	4019      	ands	r1, r3
 8000af4:	d057      	beq.n	8000ba6 <__aeabi_fsub+0x186>
 8000af6:	210f      	movs	r1, #15
 8000af8:	4019      	ands	r1, r3
 8000afa:	2904      	cmp	r1, #4
 8000afc:	d000      	beq.n	8000b00 <__aeabi_fsub+0xe0>
 8000afe:	3304      	adds	r3, #4
 8000b00:	0159      	lsls	r1, r3, #5
 8000b02:	d550      	bpl.n	8000ba6 <__aeabi_fsub+0x186>
 8000b04:	1c50      	adds	r0, r2, #1
 8000b06:	2afe      	cmp	r2, #254	@ 0xfe
 8000b08:	d045      	beq.n	8000b96 <__aeabi_fsub+0x176>
 8000b0a:	019b      	lsls	r3, r3, #6
 8000b0c:	b2c0      	uxtb	r0, r0
 8000b0e:	0a5b      	lsrs	r3, r3, #9
 8000b10:	05c0      	lsls	r0, r0, #23
 8000b12:	4318      	orrs	r0, r3
 8000b14:	07e4      	lsls	r4, r4, #31
 8000b16:	4320      	orrs	r0, r4
 8000b18:	bcc0      	pop	{r6, r7}
 8000b1a:	46b9      	mov	r9, r7
 8000b1c:	46b0      	mov	r8, r6
 8000b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000b20:	2201      	movs	r2, #1
 8000b22:	4051      	eors	r1, r2
 8000b24:	428c      	cmp	r4, r1
 8000b26:	d1ba      	bne.n	8000a9e <__aeabi_fsub+0x7e>
 8000b28:	464a      	mov	r2, r9
 8000b2a:	2a00      	cmp	r2, #0
 8000b2c:	d010      	beq.n	8000b50 <__aeabi_fsub+0x130>
 8000b2e:	2d00      	cmp	r5, #0
 8000b30:	d100      	bne.n	8000b34 <__aeabi_fsub+0x114>
 8000b32:	e098      	b.n	8000c66 <__aeabi_fsub+0x246>
 8000b34:	2300      	movs	r3, #0
 8000b36:	e7bb      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d034      	beq.n	8000ba6 <__aeabi_fsub+0x186>
 8000b3c:	1e51      	subs	r1, r2, #1
 8000b3e:	2a01      	cmp	r2, #1
 8000b40:	d06e      	beq.n	8000c20 <__aeabi_fsub+0x200>
 8000b42:	2aff      	cmp	r2, #255	@ 0xff
 8000b44:	d0b4      	beq.n	8000ab0 <__aeabi_fsub+0x90>
 8000b46:	000a      	movs	r2, r1
 8000b48:	e79c      	b.n	8000a84 <__aeabi_fsub+0x64>
 8000b4a:	2a00      	cmp	r2, #0
 8000b4c:	d000      	beq.n	8000b50 <__aeabi_fsub+0x130>
 8000b4e:	e088      	b.n	8000c62 <__aeabi_fsub+0x242>
 8000b50:	20fe      	movs	r0, #254	@ 0xfe
 8000b52:	1c6a      	adds	r2, r5, #1
 8000b54:	4210      	tst	r0, r2
 8000b56:	d000      	beq.n	8000b5a <__aeabi_fsub+0x13a>
 8000b58:	e092      	b.n	8000c80 <__aeabi_fsub+0x260>
 8000b5a:	2d00      	cmp	r5, #0
 8000b5c:	d000      	beq.n	8000b60 <__aeabi_fsub+0x140>
 8000b5e:	e0a4      	b.n	8000caa <__aeabi_fsub+0x28a>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d100      	bne.n	8000b66 <__aeabi_fsub+0x146>
 8000b64:	e0cb      	b.n	8000cfe <__aeabi_fsub+0x2de>
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d000      	beq.n	8000b6c <__aeabi_fsub+0x14c>
 8000b6a:	e0ca      	b.n	8000d02 <__aeabi_fsub+0x2e2>
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	025b      	lsls	r3, r3, #9
 8000b72:	0a5b      	lsrs	r3, r3, #9
 8000b74:	b2d0      	uxtb	r0, r2
 8000b76:	e7cb      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000b78:	0031      	movs	r1, r6
 8000b7a:	2020      	movs	r0, #32
 8000b7c:	40d1      	lsrs	r1, r2
 8000b7e:	1a82      	subs	r2, r0, r2
 8000b80:	4096      	lsls	r6, r2
 8000b82:	0032      	movs	r2, r6
 8000b84:	1e50      	subs	r0, r2, #1
 8000b86:	4182      	sbcs	r2, r0
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	189b      	adds	r3, r3, r2
 8000b8c:	015a      	lsls	r2, r3, #5
 8000b8e:	d5ae      	bpl.n	8000aee <__aeabi_fsub+0xce>
 8000b90:	1c6a      	adds	r2, r5, #1
 8000b92:	2dfe      	cmp	r5, #254	@ 0xfe
 8000b94:	d14a      	bne.n	8000c2c <__aeabi_fsub+0x20c>
 8000b96:	20ff      	movs	r0, #255	@ 0xff
 8000b98:	2300      	movs	r3, #0
 8000b9a:	e7b9      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000b9c:	22ff      	movs	r2, #255	@ 0xff
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d14b      	bne.n	8000c3a <__aeabi_fsub+0x21a>
 8000ba2:	000c      	movs	r4, r1
 8000ba4:	0033      	movs	r3, r6
 8000ba6:	08db      	lsrs	r3, r3, #3
 8000ba8:	2aff      	cmp	r2, #255	@ 0xff
 8000baa:	d100      	bne.n	8000bae <__aeabi_fsub+0x18e>
 8000bac:	e781      	b.n	8000ab2 <__aeabi_fsub+0x92>
 8000bae:	e7df      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000bb0:	019f      	lsls	r7, r3, #6
 8000bb2:	09bf      	lsrs	r7, r7, #6
 8000bb4:	0038      	movs	r0, r7
 8000bb6:	f001 f809 	bl	8001bcc <__clzsi2>
 8000bba:	3805      	subs	r0, #5
 8000bbc:	4087      	lsls	r7, r0
 8000bbe:	4285      	cmp	r5, r0
 8000bc0:	dc21      	bgt.n	8000c06 <__aeabi_fsub+0x1e6>
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	2120      	movs	r1, #32
 8000bc6:	1b42      	subs	r2, r0, r5
 8000bc8:	3201      	adds	r2, #1
 8000bca:	40d3      	lsrs	r3, r2
 8000bcc:	1a8a      	subs	r2, r1, r2
 8000bce:	4097      	lsls	r7, r2
 8000bd0:	1e7a      	subs	r2, r7, #1
 8000bd2:	4197      	sbcs	r7, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	433b      	orrs	r3, r7
 8000bd8:	0759      	lsls	r1, r3, #29
 8000bda:	d000      	beq.n	8000bde <__aeabi_fsub+0x1be>
 8000bdc:	e78b      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000bde:	e78f      	b.n	8000b00 <__aeabi_fsub+0xe0>
 8000be0:	20fe      	movs	r0, #254	@ 0xfe
 8000be2:	1c6a      	adds	r2, r5, #1
 8000be4:	4210      	tst	r0, r2
 8000be6:	d112      	bne.n	8000c0e <__aeabi_fsub+0x1ee>
 8000be8:	2d00      	cmp	r5, #0
 8000bea:	d152      	bne.n	8000c92 <__aeabi_fsub+0x272>
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d07c      	beq.n	8000cea <__aeabi_fsub+0x2ca>
 8000bf0:	2e00      	cmp	r6, #0
 8000bf2:	d0bb      	beq.n	8000b6c <__aeabi_fsub+0x14c>
 8000bf4:	1b9a      	subs	r2, r3, r6
 8000bf6:	0150      	lsls	r0, r2, #5
 8000bf8:	d400      	bmi.n	8000bfc <__aeabi_fsub+0x1dc>
 8000bfa:	e08b      	b.n	8000d14 <__aeabi_fsub+0x2f4>
 8000bfc:	2401      	movs	r4, #1
 8000bfe:	2200      	movs	r2, #0
 8000c00:	1af3      	subs	r3, r6, r3
 8000c02:	400c      	ands	r4, r1
 8000c04:	e7e8      	b.n	8000bd8 <__aeabi_fsub+0x1b8>
 8000c06:	4b56      	ldr	r3, [pc, #344]	@ (8000d60 <__aeabi_fsub+0x340>)
 8000c08:	1a2a      	subs	r2, r5, r0
 8000c0a:	403b      	ands	r3, r7
 8000c0c:	e7e4      	b.n	8000bd8 <__aeabi_fsub+0x1b8>
 8000c0e:	1b9f      	subs	r7, r3, r6
 8000c10:	017a      	lsls	r2, r7, #5
 8000c12:	d446      	bmi.n	8000ca2 <__aeabi_fsub+0x282>
 8000c14:	2f00      	cmp	r7, #0
 8000c16:	d1cd      	bne.n	8000bb4 <__aeabi_fsub+0x194>
 8000c18:	2400      	movs	r4, #0
 8000c1a:	2000      	movs	r0, #0
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	e777      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000c20:	199b      	adds	r3, r3, r6
 8000c22:	2501      	movs	r5, #1
 8000c24:	3201      	adds	r2, #1
 8000c26:	0159      	lsls	r1, r3, #5
 8000c28:	d400      	bmi.n	8000c2c <__aeabi_fsub+0x20c>
 8000c2a:	e760      	b.n	8000aee <__aeabi_fsub+0xce>
 8000c2c:	2101      	movs	r1, #1
 8000c2e:	484d      	ldr	r0, [pc, #308]	@ (8000d64 <__aeabi_fsub+0x344>)
 8000c30:	4019      	ands	r1, r3
 8000c32:	085b      	lsrs	r3, r3, #1
 8000c34:	4003      	ands	r3, r0
 8000c36:	430b      	orrs	r3, r1
 8000c38:	e7ce      	b.n	8000bd8 <__aeabi_fsub+0x1b8>
 8000c3a:	1e57      	subs	r7, r2, #1
 8000c3c:	2a01      	cmp	r2, #1
 8000c3e:	d05a      	beq.n	8000cf6 <__aeabi_fsub+0x2d6>
 8000c40:	000c      	movs	r4, r1
 8000c42:	2aff      	cmp	r2, #255	@ 0xff
 8000c44:	d033      	beq.n	8000cae <__aeabi_fsub+0x28e>
 8000c46:	2201      	movs	r2, #1
 8000c48:	2f1b      	cmp	r7, #27
 8000c4a:	dc07      	bgt.n	8000c5c <__aeabi_fsub+0x23c>
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	1bc9      	subs	r1, r1, r7
 8000c50:	001a      	movs	r2, r3
 8000c52:	408b      	lsls	r3, r1
 8000c54:	40fa      	lsrs	r2, r7
 8000c56:	1e59      	subs	r1, r3, #1
 8000c58:	418b      	sbcs	r3, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	0005      	movs	r5, r0
 8000c5e:	1ab3      	subs	r3, r6, r2
 8000c60:	e743      	b.n	8000aea <__aeabi_fsub+0xca>
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d123      	bne.n	8000cae <__aeabi_fsub+0x28e>
 8000c66:	22ff      	movs	r2, #255	@ 0xff
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d09b      	beq.n	8000ba4 <__aeabi_fsub+0x184>
 8000c6c:	1e51      	subs	r1, r2, #1
 8000c6e:	2a01      	cmp	r2, #1
 8000c70:	d0d6      	beq.n	8000c20 <__aeabi_fsub+0x200>
 8000c72:	2aff      	cmp	r2, #255	@ 0xff
 8000c74:	d01b      	beq.n	8000cae <__aeabi_fsub+0x28e>
 8000c76:	291b      	cmp	r1, #27
 8000c78:	dd2c      	ble.n	8000cd4 <__aeabi_fsub+0x2b4>
 8000c7a:	0002      	movs	r2, r0
 8000c7c:	1c73      	adds	r3, r6, #1
 8000c7e:	e73a      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000c80:	2aff      	cmp	r2, #255	@ 0xff
 8000c82:	d088      	beq.n	8000b96 <__aeabi_fsub+0x176>
 8000c84:	199b      	adds	r3, r3, r6
 8000c86:	085b      	lsrs	r3, r3, #1
 8000c88:	0759      	lsls	r1, r3, #29
 8000c8a:	d000      	beq.n	8000c8e <__aeabi_fsub+0x26e>
 8000c8c:	e733      	b.n	8000af6 <__aeabi_fsub+0xd6>
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	e76e      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d110      	bne.n	8000cb8 <__aeabi_fsub+0x298>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d043      	beq.n	8000d22 <__aeabi_fsub+0x302>
 8000c9a:	2401      	movs	r4, #1
 8000c9c:	0033      	movs	r3, r6
 8000c9e:	400c      	ands	r4, r1
 8000ca0:	e706      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000ca2:	2401      	movs	r4, #1
 8000ca4:	1af7      	subs	r7, r6, r3
 8000ca6:	400c      	ands	r4, r1
 8000ca8:	e784      	b.n	8000bb4 <__aeabi_fsub+0x194>
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d104      	bne.n	8000cb8 <__aeabi_fsub+0x298>
 8000cae:	0033      	movs	r3, r6
 8000cb0:	e6fe      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000cb2:	2501      	movs	r5, #1
 8000cb4:	1b9b      	subs	r3, r3, r6
 8000cb6:	e718      	b.n	8000aea <__aeabi_fsub+0xca>
 8000cb8:	2e00      	cmp	r6, #0
 8000cba:	d100      	bne.n	8000cbe <__aeabi_fsub+0x29e>
 8000cbc:	e6f8      	b.n	8000ab0 <__aeabi_fsub+0x90>
 8000cbe:	2280      	movs	r2, #128	@ 0x80
 8000cc0:	03d2      	lsls	r2, r2, #15
 8000cc2:	4297      	cmp	r7, r2
 8000cc4:	d304      	bcc.n	8000cd0 <__aeabi_fsub+0x2b0>
 8000cc6:	4594      	cmp	ip, r2
 8000cc8:	d202      	bcs.n	8000cd0 <__aeabi_fsub+0x2b0>
 8000cca:	2401      	movs	r4, #1
 8000ccc:	0033      	movs	r3, r6
 8000cce:	400c      	ands	r4, r1
 8000cd0:	08db      	lsrs	r3, r3, #3
 8000cd2:	e6f1      	b.n	8000ab8 <__aeabi_fsub+0x98>
 8000cd4:	001a      	movs	r2, r3
 8000cd6:	2520      	movs	r5, #32
 8000cd8:	40ca      	lsrs	r2, r1
 8000cda:	1a69      	subs	r1, r5, r1
 8000cdc:	408b      	lsls	r3, r1
 8000cde:	1e59      	subs	r1, r3, #1
 8000ce0:	418b      	sbcs	r3, r1
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	0005      	movs	r5, r0
 8000ce6:	199b      	adds	r3, r3, r6
 8000ce8:	e750      	b.n	8000b8c <__aeabi_fsub+0x16c>
 8000cea:	2e00      	cmp	r6, #0
 8000cec:	d094      	beq.n	8000c18 <__aeabi_fsub+0x1f8>
 8000cee:	2401      	movs	r4, #1
 8000cf0:	0033      	movs	r3, r6
 8000cf2:	400c      	ands	r4, r1
 8000cf4:	e73a      	b.n	8000b6c <__aeabi_fsub+0x14c>
 8000cf6:	000c      	movs	r4, r1
 8000cf8:	2501      	movs	r5, #1
 8000cfa:	1af3      	subs	r3, r6, r3
 8000cfc:	e6f5      	b.n	8000aea <__aeabi_fsub+0xca>
 8000cfe:	0033      	movs	r3, r6
 8000d00:	e734      	b.n	8000b6c <__aeabi_fsub+0x14c>
 8000d02:	199b      	adds	r3, r3, r6
 8000d04:	2200      	movs	r2, #0
 8000d06:	0159      	lsls	r1, r3, #5
 8000d08:	d5c1      	bpl.n	8000c8e <__aeabi_fsub+0x26e>
 8000d0a:	4a15      	ldr	r2, [pc, #84]	@ (8000d60 <__aeabi_fsub+0x340>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	08db      	lsrs	r3, r3, #3
 8000d10:	2201      	movs	r2, #1
 8000d12:	e72d      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000d14:	2a00      	cmp	r2, #0
 8000d16:	d100      	bne.n	8000d1a <__aeabi_fsub+0x2fa>
 8000d18:	e77e      	b.n	8000c18 <__aeabi_fsub+0x1f8>
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	08db      	lsrs	r3, r3, #3
 8000d20:	e726      	b.n	8000b70 <__aeabi_fsub+0x150>
 8000d22:	2380      	movs	r3, #128	@ 0x80
 8000d24:	2400      	movs	r4, #0
 8000d26:	20ff      	movs	r0, #255	@ 0xff
 8000d28:	03db      	lsls	r3, r3, #15
 8000d2a:	e6f1      	b.n	8000b10 <__aeabi_fsub+0xf0>
 8000d2c:	2a00      	cmp	r2, #0
 8000d2e:	d100      	bne.n	8000d32 <__aeabi_fsub+0x312>
 8000d30:	e756      	b.n	8000be0 <__aeabi_fsub+0x1c0>
 8000d32:	1b47      	subs	r7, r0, r5
 8000d34:	003a      	movs	r2, r7
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	d100      	bne.n	8000d3c <__aeabi_fsub+0x31c>
 8000d3a:	e730      	b.n	8000b9e <__aeabi_fsub+0x17e>
 8000d3c:	2280      	movs	r2, #128	@ 0x80
 8000d3e:	04d2      	lsls	r2, r2, #19
 8000d40:	000c      	movs	r4, r1
 8000d42:	4313      	orrs	r3, r2
 8000d44:	e77f      	b.n	8000c46 <__aeabi_fsub+0x226>
 8000d46:	2a00      	cmp	r2, #0
 8000d48:	d100      	bne.n	8000d4c <__aeabi_fsub+0x32c>
 8000d4a:	e701      	b.n	8000b50 <__aeabi_fsub+0x130>
 8000d4c:	1b41      	subs	r1, r0, r5
 8000d4e:	2d00      	cmp	r5, #0
 8000d50:	d101      	bne.n	8000d56 <__aeabi_fsub+0x336>
 8000d52:	000a      	movs	r2, r1
 8000d54:	e788      	b.n	8000c68 <__aeabi_fsub+0x248>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	04d2      	lsls	r2, r2, #19
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	e78b      	b.n	8000c76 <__aeabi_fsub+0x256>
 8000d5e:	46c0      	nop			@ (mov r8, r8)
 8000d60:	fbffffff 	.word	0xfbffffff
 8000d64:	7dffffff 	.word	0x7dffffff

08000d68 <__aeabi_f2iz>:
 8000d68:	0241      	lsls	r1, r0, #9
 8000d6a:	0042      	lsls	r2, r0, #1
 8000d6c:	0fc3      	lsrs	r3, r0, #31
 8000d6e:	0a49      	lsrs	r1, r1, #9
 8000d70:	2000      	movs	r0, #0
 8000d72:	0e12      	lsrs	r2, r2, #24
 8000d74:	2a7e      	cmp	r2, #126	@ 0x7e
 8000d76:	dd03      	ble.n	8000d80 <__aeabi_f2iz+0x18>
 8000d78:	2a9d      	cmp	r2, #157	@ 0x9d
 8000d7a:	dd02      	ble.n	8000d82 <__aeabi_f2iz+0x1a>
 8000d7c:	4a09      	ldr	r2, [pc, #36]	@ (8000da4 <__aeabi_f2iz+0x3c>)
 8000d7e:	1898      	adds	r0, r3, r2
 8000d80:	4770      	bx	lr
 8000d82:	2080      	movs	r0, #128	@ 0x80
 8000d84:	0400      	lsls	r0, r0, #16
 8000d86:	4301      	orrs	r1, r0
 8000d88:	2a95      	cmp	r2, #149	@ 0x95
 8000d8a:	dc07      	bgt.n	8000d9c <__aeabi_f2iz+0x34>
 8000d8c:	2096      	movs	r0, #150	@ 0x96
 8000d8e:	1a82      	subs	r2, r0, r2
 8000d90:	40d1      	lsrs	r1, r2
 8000d92:	4248      	negs	r0, r1
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d1f3      	bne.n	8000d80 <__aeabi_f2iz+0x18>
 8000d98:	0008      	movs	r0, r1
 8000d9a:	e7f1      	b.n	8000d80 <__aeabi_f2iz+0x18>
 8000d9c:	3a96      	subs	r2, #150	@ 0x96
 8000d9e:	4091      	lsls	r1, r2
 8000da0:	e7f7      	b.n	8000d92 <__aeabi_f2iz+0x2a>
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	7fffffff 	.word	0x7fffffff

08000da8 <__aeabi_ui2f>:
 8000da8:	b570      	push	{r4, r5, r6, lr}
 8000daa:	1e04      	subs	r4, r0, #0
 8000dac:	d00e      	beq.n	8000dcc <__aeabi_ui2f+0x24>
 8000dae:	f000 ff0d 	bl	8001bcc <__clzsi2>
 8000db2:	239e      	movs	r3, #158	@ 0x9e
 8000db4:	0001      	movs	r1, r0
 8000db6:	1a1b      	subs	r3, r3, r0
 8000db8:	2b96      	cmp	r3, #150	@ 0x96
 8000dba:	dc0c      	bgt.n	8000dd6 <__aeabi_ui2f+0x2e>
 8000dbc:	2808      	cmp	r0, #8
 8000dbe:	d02f      	beq.n	8000e20 <__aeabi_ui2f+0x78>
 8000dc0:	3908      	subs	r1, #8
 8000dc2:	408c      	lsls	r4, r1
 8000dc4:	0264      	lsls	r4, r4, #9
 8000dc6:	0a64      	lsrs	r4, r4, #9
 8000dc8:	b2d8      	uxtb	r0, r3
 8000dca:	e001      	b.n	8000dd0 <__aeabi_ui2f+0x28>
 8000dcc:	2000      	movs	r0, #0
 8000dce:	2400      	movs	r4, #0
 8000dd0:	05c0      	lsls	r0, r0, #23
 8000dd2:	4320      	orrs	r0, r4
 8000dd4:	bd70      	pop	{r4, r5, r6, pc}
 8000dd6:	2b99      	cmp	r3, #153	@ 0x99
 8000dd8:	dc16      	bgt.n	8000e08 <__aeabi_ui2f+0x60>
 8000dda:	1f42      	subs	r2, r0, #5
 8000ddc:	2805      	cmp	r0, #5
 8000dde:	d000      	beq.n	8000de2 <__aeabi_ui2f+0x3a>
 8000de0:	4094      	lsls	r4, r2
 8000de2:	0022      	movs	r2, r4
 8000de4:	4810      	ldr	r0, [pc, #64]	@ (8000e28 <__aeabi_ui2f+0x80>)
 8000de6:	4002      	ands	r2, r0
 8000de8:	0765      	lsls	r5, r4, #29
 8000dea:	d009      	beq.n	8000e00 <__aeabi_ui2f+0x58>
 8000dec:	250f      	movs	r5, #15
 8000dee:	402c      	ands	r4, r5
 8000df0:	2c04      	cmp	r4, #4
 8000df2:	d005      	beq.n	8000e00 <__aeabi_ui2f+0x58>
 8000df4:	3204      	adds	r2, #4
 8000df6:	0154      	lsls	r4, r2, #5
 8000df8:	d502      	bpl.n	8000e00 <__aeabi_ui2f+0x58>
 8000dfa:	239f      	movs	r3, #159	@ 0x9f
 8000dfc:	4002      	ands	r2, r0
 8000dfe:	1a5b      	subs	r3, r3, r1
 8000e00:	0192      	lsls	r2, r2, #6
 8000e02:	0a54      	lsrs	r4, r2, #9
 8000e04:	b2d8      	uxtb	r0, r3
 8000e06:	e7e3      	b.n	8000dd0 <__aeabi_ui2f+0x28>
 8000e08:	0002      	movs	r2, r0
 8000e0a:	0020      	movs	r0, r4
 8000e0c:	321b      	adds	r2, #27
 8000e0e:	4090      	lsls	r0, r2
 8000e10:	0002      	movs	r2, r0
 8000e12:	1e50      	subs	r0, r2, #1
 8000e14:	4182      	sbcs	r2, r0
 8000e16:	2005      	movs	r0, #5
 8000e18:	1a40      	subs	r0, r0, r1
 8000e1a:	40c4      	lsrs	r4, r0
 8000e1c:	4314      	orrs	r4, r2
 8000e1e:	e7e0      	b.n	8000de2 <__aeabi_ui2f+0x3a>
 8000e20:	0264      	lsls	r4, r4, #9
 8000e22:	2096      	movs	r0, #150	@ 0x96
 8000e24:	0a64      	lsrs	r4, r4, #9
 8000e26:	e7d3      	b.n	8000dd0 <__aeabi_ui2f+0x28>
 8000e28:	fbffffff 	.word	0xfbffffff

08000e2c <__aeabi_dadd>:
 8000e2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e2e:	4657      	mov	r7, sl
 8000e30:	464e      	mov	r6, r9
 8000e32:	4645      	mov	r5, r8
 8000e34:	46de      	mov	lr, fp
 8000e36:	b5e0      	push	{r5, r6, r7, lr}
 8000e38:	b083      	sub	sp, #12
 8000e3a:	9000      	str	r0, [sp, #0]
 8000e3c:	9101      	str	r1, [sp, #4]
 8000e3e:	030c      	lsls	r4, r1, #12
 8000e40:	004f      	lsls	r7, r1, #1
 8000e42:	0fce      	lsrs	r6, r1, #31
 8000e44:	0a61      	lsrs	r1, r4, #9
 8000e46:	9c00      	ldr	r4, [sp, #0]
 8000e48:	031d      	lsls	r5, r3, #12
 8000e4a:	0f64      	lsrs	r4, r4, #29
 8000e4c:	430c      	orrs	r4, r1
 8000e4e:	9900      	ldr	r1, [sp, #0]
 8000e50:	9200      	str	r2, [sp, #0]
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	00c8      	lsls	r0, r1, #3
 8000e56:	0059      	lsls	r1, r3, #1
 8000e58:	0d4b      	lsrs	r3, r1, #21
 8000e5a:	4699      	mov	r9, r3
 8000e5c:	9a00      	ldr	r2, [sp, #0]
 8000e5e:	9b01      	ldr	r3, [sp, #4]
 8000e60:	0a6d      	lsrs	r5, r5, #9
 8000e62:	0fd9      	lsrs	r1, r3, #31
 8000e64:	0f53      	lsrs	r3, r2, #29
 8000e66:	432b      	orrs	r3, r5
 8000e68:	469a      	mov	sl, r3
 8000e6a:	9b00      	ldr	r3, [sp, #0]
 8000e6c:	0d7f      	lsrs	r7, r7, #21
 8000e6e:	00da      	lsls	r2, r3, #3
 8000e70:	4694      	mov	ip, r2
 8000e72:	464a      	mov	r2, r9
 8000e74:	46b0      	mov	r8, r6
 8000e76:	1aba      	subs	r2, r7, r2
 8000e78:	428e      	cmp	r6, r1
 8000e7a:	d100      	bne.n	8000e7e <__aeabi_dadd+0x52>
 8000e7c:	e0b0      	b.n	8000fe0 <__aeabi_dadd+0x1b4>
 8000e7e:	2a00      	cmp	r2, #0
 8000e80:	dc00      	bgt.n	8000e84 <__aeabi_dadd+0x58>
 8000e82:	e078      	b.n	8000f76 <__aeabi_dadd+0x14a>
 8000e84:	4649      	mov	r1, r9
 8000e86:	2900      	cmp	r1, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_dadd+0x60>
 8000e8a:	e0e9      	b.n	8001060 <__aeabi_dadd+0x234>
 8000e8c:	49c9      	ldr	r1, [pc, #804]	@ (80011b4 <__aeabi_dadd+0x388>)
 8000e8e:	428f      	cmp	r7, r1
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x68>
 8000e92:	e195      	b.n	80011c0 <__aeabi_dadd+0x394>
 8000e94:	2501      	movs	r5, #1
 8000e96:	2a38      	cmp	r2, #56	@ 0x38
 8000e98:	dc16      	bgt.n	8000ec8 <__aeabi_dadd+0x9c>
 8000e9a:	2180      	movs	r1, #128	@ 0x80
 8000e9c:	4653      	mov	r3, sl
 8000e9e:	0409      	lsls	r1, r1, #16
 8000ea0:	430b      	orrs	r3, r1
 8000ea2:	469a      	mov	sl, r3
 8000ea4:	2a1f      	cmp	r2, #31
 8000ea6:	dd00      	ble.n	8000eaa <__aeabi_dadd+0x7e>
 8000ea8:	e1e7      	b.n	800127a <__aeabi_dadd+0x44e>
 8000eaa:	2120      	movs	r1, #32
 8000eac:	4655      	mov	r5, sl
 8000eae:	1a8b      	subs	r3, r1, r2
 8000eb0:	4661      	mov	r1, ip
 8000eb2:	409d      	lsls	r5, r3
 8000eb4:	40d1      	lsrs	r1, r2
 8000eb6:	430d      	orrs	r5, r1
 8000eb8:	4661      	mov	r1, ip
 8000eba:	4099      	lsls	r1, r3
 8000ebc:	1e4b      	subs	r3, r1, #1
 8000ebe:	4199      	sbcs	r1, r3
 8000ec0:	4653      	mov	r3, sl
 8000ec2:	40d3      	lsrs	r3, r2
 8000ec4:	430d      	orrs	r5, r1
 8000ec6:	1ae4      	subs	r4, r4, r3
 8000ec8:	1b45      	subs	r5, r0, r5
 8000eca:	42a8      	cmp	r0, r5
 8000ecc:	4180      	sbcs	r0, r0
 8000ece:	4240      	negs	r0, r0
 8000ed0:	1a24      	subs	r4, r4, r0
 8000ed2:	0223      	lsls	r3, r4, #8
 8000ed4:	d400      	bmi.n	8000ed8 <__aeabi_dadd+0xac>
 8000ed6:	e10f      	b.n	80010f8 <__aeabi_dadd+0x2cc>
 8000ed8:	0264      	lsls	r4, r4, #9
 8000eda:	0a64      	lsrs	r4, r4, #9
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d100      	bne.n	8000ee2 <__aeabi_dadd+0xb6>
 8000ee0:	e139      	b.n	8001156 <__aeabi_dadd+0x32a>
 8000ee2:	0020      	movs	r0, r4
 8000ee4:	f000 fe72 	bl	8001bcc <__clzsi2>
 8000ee8:	0003      	movs	r3, r0
 8000eea:	3b08      	subs	r3, #8
 8000eec:	2120      	movs	r1, #32
 8000eee:	0028      	movs	r0, r5
 8000ef0:	1aca      	subs	r2, r1, r3
 8000ef2:	40d0      	lsrs	r0, r2
 8000ef4:	409c      	lsls	r4, r3
 8000ef6:	0002      	movs	r2, r0
 8000ef8:	409d      	lsls	r5, r3
 8000efa:	4322      	orrs	r2, r4
 8000efc:	429f      	cmp	r7, r3
 8000efe:	dd00      	ble.n	8000f02 <__aeabi_dadd+0xd6>
 8000f00:	e173      	b.n	80011ea <__aeabi_dadd+0x3be>
 8000f02:	1bd8      	subs	r0, r3, r7
 8000f04:	3001      	adds	r0, #1
 8000f06:	1a09      	subs	r1, r1, r0
 8000f08:	002c      	movs	r4, r5
 8000f0a:	408d      	lsls	r5, r1
 8000f0c:	40c4      	lsrs	r4, r0
 8000f0e:	1e6b      	subs	r3, r5, #1
 8000f10:	419d      	sbcs	r5, r3
 8000f12:	0013      	movs	r3, r2
 8000f14:	40c2      	lsrs	r2, r0
 8000f16:	408b      	lsls	r3, r1
 8000f18:	4325      	orrs	r5, r4
 8000f1a:	2700      	movs	r7, #0
 8000f1c:	0014      	movs	r4, r2
 8000f1e:	431d      	orrs	r5, r3
 8000f20:	076b      	lsls	r3, r5, #29
 8000f22:	d009      	beq.n	8000f38 <__aeabi_dadd+0x10c>
 8000f24:	230f      	movs	r3, #15
 8000f26:	402b      	ands	r3, r5
 8000f28:	2b04      	cmp	r3, #4
 8000f2a:	d005      	beq.n	8000f38 <__aeabi_dadd+0x10c>
 8000f2c:	1d2b      	adds	r3, r5, #4
 8000f2e:	42ab      	cmp	r3, r5
 8000f30:	41ad      	sbcs	r5, r5
 8000f32:	426d      	negs	r5, r5
 8000f34:	1964      	adds	r4, r4, r5
 8000f36:	001d      	movs	r5, r3
 8000f38:	0223      	lsls	r3, r4, #8
 8000f3a:	d400      	bmi.n	8000f3e <__aeabi_dadd+0x112>
 8000f3c:	e12d      	b.n	800119a <__aeabi_dadd+0x36e>
 8000f3e:	4a9d      	ldr	r2, [pc, #628]	@ (80011b4 <__aeabi_dadd+0x388>)
 8000f40:	3701      	adds	r7, #1
 8000f42:	4297      	cmp	r7, r2
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x11c>
 8000f46:	e0d3      	b.n	80010f0 <__aeabi_dadd+0x2c4>
 8000f48:	4646      	mov	r6, r8
 8000f4a:	499b      	ldr	r1, [pc, #620]	@ (80011b8 <__aeabi_dadd+0x38c>)
 8000f4c:	08ed      	lsrs	r5, r5, #3
 8000f4e:	4021      	ands	r1, r4
 8000f50:	074a      	lsls	r2, r1, #29
 8000f52:	432a      	orrs	r2, r5
 8000f54:	057c      	lsls	r4, r7, #21
 8000f56:	024d      	lsls	r5, r1, #9
 8000f58:	0b2d      	lsrs	r5, r5, #12
 8000f5a:	0d64      	lsrs	r4, r4, #21
 8000f5c:	0524      	lsls	r4, r4, #20
 8000f5e:	432c      	orrs	r4, r5
 8000f60:	07f6      	lsls	r6, r6, #31
 8000f62:	4334      	orrs	r4, r6
 8000f64:	0010      	movs	r0, r2
 8000f66:	0021      	movs	r1, r4
 8000f68:	b003      	add	sp, #12
 8000f6a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f6c:	46bb      	mov	fp, r7
 8000f6e:	46b2      	mov	sl, r6
 8000f70:	46a9      	mov	r9, r5
 8000f72:	46a0      	mov	r8, r4
 8000f74:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f76:	2a00      	cmp	r2, #0
 8000f78:	d100      	bne.n	8000f7c <__aeabi_dadd+0x150>
 8000f7a:	e084      	b.n	8001086 <__aeabi_dadd+0x25a>
 8000f7c:	464a      	mov	r2, r9
 8000f7e:	1bd2      	subs	r2, r2, r7
 8000f80:	2f00      	cmp	r7, #0
 8000f82:	d000      	beq.n	8000f86 <__aeabi_dadd+0x15a>
 8000f84:	e16d      	b.n	8001262 <__aeabi_dadd+0x436>
 8000f86:	0025      	movs	r5, r4
 8000f88:	4305      	orrs	r5, r0
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_dadd+0x162>
 8000f8c:	e127      	b.n	80011de <__aeabi_dadd+0x3b2>
 8000f8e:	1e56      	subs	r6, r2, #1
 8000f90:	2a01      	cmp	r2, #1
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x16a>
 8000f94:	e23b      	b.n	800140e <__aeabi_dadd+0x5e2>
 8000f96:	4d87      	ldr	r5, [pc, #540]	@ (80011b4 <__aeabi_dadd+0x388>)
 8000f98:	42aa      	cmp	r2, r5
 8000f9a:	d100      	bne.n	8000f9e <__aeabi_dadd+0x172>
 8000f9c:	e26a      	b.n	8001474 <__aeabi_dadd+0x648>
 8000f9e:	2501      	movs	r5, #1
 8000fa0:	2e38      	cmp	r6, #56	@ 0x38
 8000fa2:	dc12      	bgt.n	8000fca <__aeabi_dadd+0x19e>
 8000fa4:	0032      	movs	r2, r6
 8000fa6:	2a1f      	cmp	r2, #31
 8000fa8:	dd00      	ble.n	8000fac <__aeabi_dadd+0x180>
 8000faa:	e1f8      	b.n	800139e <__aeabi_dadd+0x572>
 8000fac:	2620      	movs	r6, #32
 8000fae:	0025      	movs	r5, r4
 8000fb0:	1ab6      	subs	r6, r6, r2
 8000fb2:	0007      	movs	r7, r0
 8000fb4:	4653      	mov	r3, sl
 8000fb6:	40b0      	lsls	r0, r6
 8000fb8:	40d4      	lsrs	r4, r2
 8000fba:	40b5      	lsls	r5, r6
 8000fbc:	40d7      	lsrs	r7, r2
 8000fbe:	1e46      	subs	r6, r0, #1
 8000fc0:	41b0      	sbcs	r0, r6
 8000fc2:	1b1b      	subs	r3, r3, r4
 8000fc4:	469a      	mov	sl, r3
 8000fc6:	433d      	orrs	r5, r7
 8000fc8:	4305      	orrs	r5, r0
 8000fca:	4662      	mov	r2, ip
 8000fcc:	1b55      	subs	r5, r2, r5
 8000fce:	45ac      	cmp	ip, r5
 8000fd0:	4192      	sbcs	r2, r2
 8000fd2:	4653      	mov	r3, sl
 8000fd4:	4252      	negs	r2, r2
 8000fd6:	000e      	movs	r6, r1
 8000fd8:	464f      	mov	r7, r9
 8000fda:	4688      	mov	r8, r1
 8000fdc:	1a9c      	subs	r4, r3, r2
 8000fde:	e778      	b.n	8000ed2 <__aeabi_dadd+0xa6>
 8000fe0:	2a00      	cmp	r2, #0
 8000fe2:	dc00      	bgt.n	8000fe6 <__aeabi_dadd+0x1ba>
 8000fe4:	e08e      	b.n	8001104 <__aeabi_dadd+0x2d8>
 8000fe6:	4649      	mov	r1, r9
 8000fe8:	2900      	cmp	r1, #0
 8000fea:	d175      	bne.n	80010d8 <__aeabi_dadd+0x2ac>
 8000fec:	4661      	mov	r1, ip
 8000fee:	4653      	mov	r3, sl
 8000ff0:	4319      	orrs	r1, r3
 8000ff2:	d100      	bne.n	8000ff6 <__aeabi_dadd+0x1ca>
 8000ff4:	e0f6      	b.n	80011e4 <__aeabi_dadd+0x3b8>
 8000ff6:	1e51      	subs	r1, r2, #1
 8000ff8:	2a01      	cmp	r2, #1
 8000ffa:	d100      	bne.n	8000ffe <__aeabi_dadd+0x1d2>
 8000ffc:	e191      	b.n	8001322 <__aeabi_dadd+0x4f6>
 8000ffe:	4d6d      	ldr	r5, [pc, #436]	@ (80011b4 <__aeabi_dadd+0x388>)
 8001000:	42aa      	cmp	r2, r5
 8001002:	d100      	bne.n	8001006 <__aeabi_dadd+0x1da>
 8001004:	e0dc      	b.n	80011c0 <__aeabi_dadd+0x394>
 8001006:	2501      	movs	r5, #1
 8001008:	2938      	cmp	r1, #56	@ 0x38
 800100a:	dc14      	bgt.n	8001036 <__aeabi_dadd+0x20a>
 800100c:	000a      	movs	r2, r1
 800100e:	2a1f      	cmp	r2, #31
 8001010:	dd00      	ble.n	8001014 <__aeabi_dadd+0x1e8>
 8001012:	e1a2      	b.n	800135a <__aeabi_dadd+0x52e>
 8001014:	2120      	movs	r1, #32
 8001016:	4653      	mov	r3, sl
 8001018:	1a89      	subs	r1, r1, r2
 800101a:	408b      	lsls	r3, r1
 800101c:	001d      	movs	r5, r3
 800101e:	4663      	mov	r3, ip
 8001020:	40d3      	lsrs	r3, r2
 8001022:	431d      	orrs	r5, r3
 8001024:	4663      	mov	r3, ip
 8001026:	408b      	lsls	r3, r1
 8001028:	0019      	movs	r1, r3
 800102a:	1e4b      	subs	r3, r1, #1
 800102c:	4199      	sbcs	r1, r3
 800102e:	4653      	mov	r3, sl
 8001030:	40d3      	lsrs	r3, r2
 8001032:	430d      	orrs	r5, r1
 8001034:	18e4      	adds	r4, r4, r3
 8001036:	182d      	adds	r5, r5, r0
 8001038:	4285      	cmp	r5, r0
 800103a:	4180      	sbcs	r0, r0
 800103c:	4240      	negs	r0, r0
 800103e:	1824      	adds	r4, r4, r0
 8001040:	0223      	lsls	r3, r4, #8
 8001042:	d559      	bpl.n	80010f8 <__aeabi_dadd+0x2cc>
 8001044:	4b5b      	ldr	r3, [pc, #364]	@ (80011b4 <__aeabi_dadd+0x388>)
 8001046:	3701      	adds	r7, #1
 8001048:	429f      	cmp	r7, r3
 800104a:	d051      	beq.n	80010f0 <__aeabi_dadd+0x2c4>
 800104c:	2101      	movs	r1, #1
 800104e:	4b5a      	ldr	r3, [pc, #360]	@ (80011b8 <__aeabi_dadd+0x38c>)
 8001050:	086a      	lsrs	r2, r5, #1
 8001052:	401c      	ands	r4, r3
 8001054:	4029      	ands	r1, r5
 8001056:	430a      	orrs	r2, r1
 8001058:	07e5      	lsls	r5, r4, #31
 800105a:	4315      	orrs	r5, r2
 800105c:	0864      	lsrs	r4, r4, #1
 800105e:	e75f      	b.n	8000f20 <__aeabi_dadd+0xf4>
 8001060:	4661      	mov	r1, ip
 8001062:	4653      	mov	r3, sl
 8001064:	4319      	orrs	r1, r3
 8001066:	d100      	bne.n	800106a <__aeabi_dadd+0x23e>
 8001068:	e0bc      	b.n	80011e4 <__aeabi_dadd+0x3b8>
 800106a:	1e51      	subs	r1, r2, #1
 800106c:	2a01      	cmp	r2, #1
 800106e:	d100      	bne.n	8001072 <__aeabi_dadd+0x246>
 8001070:	e164      	b.n	800133c <__aeabi_dadd+0x510>
 8001072:	4d50      	ldr	r5, [pc, #320]	@ (80011b4 <__aeabi_dadd+0x388>)
 8001074:	42aa      	cmp	r2, r5
 8001076:	d100      	bne.n	800107a <__aeabi_dadd+0x24e>
 8001078:	e16a      	b.n	8001350 <__aeabi_dadd+0x524>
 800107a:	2501      	movs	r5, #1
 800107c:	2938      	cmp	r1, #56	@ 0x38
 800107e:	dd00      	ble.n	8001082 <__aeabi_dadd+0x256>
 8001080:	e722      	b.n	8000ec8 <__aeabi_dadd+0x9c>
 8001082:	000a      	movs	r2, r1
 8001084:	e70e      	b.n	8000ea4 <__aeabi_dadd+0x78>
 8001086:	4a4d      	ldr	r2, [pc, #308]	@ (80011bc <__aeabi_dadd+0x390>)
 8001088:	1c7d      	adds	r5, r7, #1
 800108a:	4215      	tst	r5, r2
 800108c:	d000      	beq.n	8001090 <__aeabi_dadd+0x264>
 800108e:	e0d0      	b.n	8001232 <__aeabi_dadd+0x406>
 8001090:	0025      	movs	r5, r4
 8001092:	4662      	mov	r2, ip
 8001094:	4653      	mov	r3, sl
 8001096:	4305      	orrs	r5, r0
 8001098:	431a      	orrs	r2, r3
 800109a:	2f00      	cmp	r7, #0
 800109c:	d000      	beq.n	80010a0 <__aeabi_dadd+0x274>
 800109e:	e137      	b.n	8001310 <__aeabi_dadd+0x4e4>
 80010a0:	2d00      	cmp	r5, #0
 80010a2:	d100      	bne.n	80010a6 <__aeabi_dadd+0x27a>
 80010a4:	e1a8      	b.n	80013f8 <__aeabi_dadd+0x5cc>
 80010a6:	2a00      	cmp	r2, #0
 80010a8:	d100      	bne.n	80010ac <__aeabi_dadd+0x280>
 80010aa:	e16a      	b.n	8001382 <__aeabi_dadd+0x556>
 80010ac:	4663      	mov	r3, ip
 80010ae:	1ac5      	subs	r5, r0, r3
 80010b0:	4653      	mov	r3, sl
 80010b2:	1ae2      	subs	r2, r4, r3
 80010b4:	42a8      	cmp	r0, r5
 80010b6:	419b      	sbcs	r3, r3
 80010b8:	425b      	negs	r3, r3
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	021a      	lsls	r2, r3, #8
 80010be:	d400      	bmi.n	80010c2 <__aeabi_dadd+0x296>
 80010c0:	e203      	b.n	80014ca <__aeabi_dadd+0x69e>
 80010c2:	4663      	mov	r3, ip
 80010c4:	1a1d      	subs	r5, r3, r0
 80010c6:	45ac      	cmp	ip, r5
 80010c8:	4192      	sbcs	r2, r2
 80010ca:	4653      	mov	r3, sl
 80010cc:	4252      	negs	r2, r2
 80010ce:	1b1c      	subs	r4, r3, r4
 80010d0:	000e      	movs	r6, r1
 80010d2:	4688      	mov	r8, r1
 80010d4:	1aa4      	subs	r4, r4, r2
 80010d6:	e723      	b.n	8000f20 <__aeabi_dadd+0xf4>
 80010d8:	4936      	ldr	r1, [pc, #216]	@ (80011b4 <__aeabi_dadd+0x388>)
 80010da:	428f      	cmp	r7, r1
 80010dc:	d070      	beq.n	80011c0 <__aeabi_dadd+0x394>
 80010de:	2501      	movs	r5, #1
 80010e0:	2a38      	cmp	r2, #56	@ 0x38
 80010e2:	dca8      	bgt.n	8001036 <__aeabi_dadd+0x20a>
 80010e4:	2180      	movs	r1, #128	@ 0x80
 80010e6:	4653      	mov	r3, sl
 80010e8:	0409      	lsls	r1, r1, #16
 80010ea:	430b      	orrs	r3, r1
 80010ec:	469a      	mov	sl, r3
 80010ee:	e78e      	b.n	800100e <__aeabi_dadd+0x1e2>
 80010f0:	003c      	movs	r4, r7
 80010f2:	2500      	movs	r5, #0
 80010f4:	2200      	movs	r2, #0
 80010f6:	e731      	b.n	8000f5c <__aeabi_dadd+0x130>
 80010f8:	2307      	movs	r3, #7
 80010fa:	402b      	ands	r3, r5
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d000      	beq.n	8001102 <__aeabi_dadd+0x2d6>
 8001100:	e710      	b.n	8000f24 <__aeabi_dadd+0xf8>
 8001102:	e093      	b.n	800122c <__aeabi_dadd+0x400>
 8001104:	2a00      	cmp	r2, #0
 8001106:	d074      	beq.n	80011f2 <__aeabi_dadd+0x3c6>
 8001108:	464a      	mov	r2, r9
 800110a:	1bd2      	subs	r2, r2, r7
 800110c:	2f00      	cmp	r7, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_dadd+0x2e6>
 8001110:	e0c7      	b.n	80012a2 <__aeabi_dadd+0x476>
 8001112:	4928      	ldr	r1, [pc, #160]	@ (80011b4 <__aeabi_dadd+0x388>)
 8001114:	4589      	cmp	r9, r1
 8001116:	d100      	bne.n	800111a <__aeabi_dadd+0x2ee>
 8001118:	e185      	b.n	8001426 <__aeabi_dadd+0x5fa>
 800111a:	2501      	movs	r5, #1
 800111c:	2a38      	cmp	r2, #56	@ 0x38
 800111e:	dc12      	bgt.n	8001146 <__aeabi_dadd+0x31a>
 8001120:	2180      	movs	r1, #128	@ 0x80
 8001122:	0409      	lsls	r1, r1, #16
 8001124:	430c      	orrs	r4, r1
 8001126:	2a1f      	cmp	r2, #31
 8001128:	dd00      	ble.n	800112c <__aeabi_dadd+0x300>
 800112a:	e1ab      	b.n	8001484 <__aeabi_dadd+0x658>
 800112c:	2120      	movs	r1, #32
 800112e:	0025      	movs	r5, r4
 8001130:	1a89      	subs	r1, r1, r2
 8001132:	0007      	movs	r7, r0
 8001134:	4088      	lsls	r0, r1
 8001136:	408d      	lsls	r5, r1
 8001138:	40d7      	lsrs	r7, r2
 800113a:	1e41      	subs	r1, r0, #1
 800113c:	4188      	sbcs	r0, r1
 800113e:	40d4      	lsrs	r4, r2
 8001140:	433d      	orrs	r5, r7
 8001142:	4305      	orrs	r5, r0
 8001144:	44a2      	add	sl, r4
 8001146:	4465      	add	r5, ip
 8001148:	4565      	cmp	r5, ip
 800114a:	4192      	sbcs	r2, r2
 800114c:	4252      	negs	r2, r2
 800114e:	4452      	add	r2, sl
 8001150:	0014      	movs	r4, r2
 8001152:	464f      	mov	r7, r9
 8001154:	e774      	b.n	8001040 <__aeabi_dadd+0x214>
 8001156:	0028      	movs	r0, r5
 8001158:	f000 fd38 	bl	8001bcc <__clzsi2>
 800115c:	0003      	movs	r3, r0
 800115e:	3318      	adds	r3, #24
 8001160:	2b1f      	cmp	r3, #31
 8001162:	dc00      	bgt.n	8001166 <__aeabi_dadd+0x33a>
 8001164:	e6c2      	b.n	8000eec <__aeabi_dadd+0xc0>
 8001166:	002a      	movs	r2, r5
 8001168:	3808      	subs	r0, #8
 800116a:	4082      	lsls	r2, r0
 800116c:	429f      	cmp	r7, r3
 800116e:	dd00      	ble.n	8001172 <__aeabi_dadd+0x346>
 8001170:	e0a9      	b.n	80012c6 <__aeabi_dadd+0x49a>
 8001172:	1bdb      	subs	r3, r3, r7
 8001174:	1c58      	adds	r0, r3, #1
 8001176:	281f      	cmp	r0, #31
 8001178:	dc00      	bgt.n	800117c <__aeabi_dadd+0x350>
 800117a:	e1ac      	b.n	80014d6 <__aeabi_dadd+0x6aa>
 800117c:	0015      	movs	r5, r2
 800117e:	3b1f      	subs	r3, #31
 8001180:	40dd      	lsrs	r5, r3
 8001182:	2820      	cmp	r0, #32
 8001184:	d005      	beq.n	8001192 <__aeabi_dadd+0x366>
 8001186:	2340      	movs	r3, #64	@ 0x40
 8001188:	1a1b      	subs	r3, r3, r0
 800118a:	409a      	lsls	r2, r3
 800118c:	1e53      	subs	r3, r2, #1
 800118e:	419a      	sbcs	r2, r3
 8001190:	4315      	orrs	r5, r2
 8001192:	2307      	movs	r3, #7
 8001194:	2700      	movs	r7, #0
 8001196:	402b      	ands	r3, r5
 8001198:	e7b0      	b.n	80010fc <__aeabi_dadd+0x2d0>
 800119a:	08ed      	lsrs	r5, r5, #3
 800119c:	4b05      	ldr	r3, [pc, #20]	@ (80011b4 <__aeabi_dadd+0x388>)
 800119e:	0762      	lsls	r2, r4, #29
 80011a0:	432a      	orrs	r2, r5
 80011a2:	08e4      	lsrs	r4, r4, #3
 80011a4:	429f      	cmp	r7, r3
 80011a6:	d00f      	beq.n	80011c8 <__aeabi_dadd+0x39c>
 80011a8:	0324      	lsls	r4, r4, #12
 80011aa:	0b25      	lsrs	r5, r4, #12
 80011ac:	057c      	lsls	r4, r7, #21
 80011ae:	0d64      	lsrs	r4, r4, #21
 80011b0:	e6d4      	b.n	8000f5c <__aeabi_dadd+0x130>
 80011b2:	46c0      	nop			@ (mov r8, r8)
 80011b4:	000007ff 	.word	0x000007ff
 80011b8:	ff7fffff 	.word	0xff7fffff
 80011bc:	000007fe 	.word	0x000007fe
 80011c0:	08c0      	lsrs	r0, r0, #3
 80011c2:	0762      	lsls	r2, r4, #29
 80011c4:	4302      	orrs	r2, r0
 80011c6:	08e4      	lsrs	r4, r4, #3
 80011c8:	0013      	movs	r3, r2
 80011ca:	4323      	orrs	r3, r4
 80011cc:	d100      	bne.n	80011d0 <__aeabi_dadd+0x3a4>
 80011ce:	e186      	b.n	80014de <__aeabi_dadd+0x6b2>
 80011d0:	2580      	movs	r5, #128	@ 0x80
 80011d2:	032d      	lsls	r5, r5, #12
 80011d4:	4325      	orrs	r5, r4
 80011d6:	032d      	lsls	r5, r5, #12
 80011d8:	4cc3      	ldr	r4, [pc, #780]	@ (80014e8 <__aeabi_dadd+0x6bc>)
 80011da:	0b2d      	lsrs	r5, r5, #12
 80011dc:	e6be      	b.n	8000f5c <__aeabi_dadd+0x130>
 80011de:	4660      	mov	r0, ip
 80011e0:	4654      	mov	r4, sl
 80011e2:	000e      	movs	r6, r1
 80011e4:	0017      	movs	r7, r2
 80011e6:	08c5      	lsrs	r5, r0, #3
 80011e8:	e7d8      	b.n	800119c <__aeabi_dadd+0x370>
 80011ea:	4cc0      	ldr	r4, [pc, #768]	@ (80014ec <__aeabi_dadd+0x6c0>)
 80011ec:	1aff      	subs	r7, r7, r3
 80011ee:	4014      	ands	r4, r2
 80011f0:	e696      	b.n	8000f20 <__aeabi_dadd+0xf4>
 80011f2:	4abf      	ldr	r2, [pc, #764]	@ (80014f0 <__aeabi_dadd+0x6c4>)
 80011f4:	1c79      	adds	r1, r7, #1
 80011f6:	4211      	tst	r1, r2
 80011f8:	d16b      	bne.n	80012d2 <__aeabi_dadd+0x4a6>
 80011fa:	0022      	movs	r2, r4
 80011fc:	4302      	orrs	r2, r0
 80011fe:	2f00      	cmp	r7, #0
 8001200:	d000      	beq.n	8001204 <__aeabi_dadd+0x3d8>
 8001202:	e0db      	b.n	80013bc <__aeabi_dadd+0x590>
 8001204:	2a00      	cmp	r2, #0
 8001206:	d100      	bne.n	800120a <__aeabi_dadd+0x3de>
 8001208:	e12d      	b.n	8001466 <__aeabi_dadd+0x63a>
 800120a:	4662      	mov	r2, ip
 800120c:	4653      	mov	r3, sl
 800120e:	431a      	orrs	r2, r3
 8001210:	d100      	bne.n	8001214 <__aeabi_dadd+0x3e8>
 8001212:	e0b6      	b.n	8001382 <__aeabi_dadd+0x556>
 8001214:	4663      	mov	r3, ip
 8001216:	18c5      	adds	r5, r0, r3
 8001218:	4285      	cmp	r5, r0
 800121a:	4180      	sbcs	r0, r0
 800121c:	4454      	add	r4, sl
 800121e:	4240      	negs	r0, r0
 8001220:	1824      	adds	r4, r4, r0
 8001222:	0223      	lsls	r3, r4, #8
 8001224:	d502      	bpl.n	800122c <__aeabi_dadd+0x400>
 8001226:	000f      	movs	r7, r1
 8001228:	4bb0      	ldr	r3, [pc, #704]	@ (80014ec <__aeabi_dadd+0x6c0>)
 800122a:	401c      	ands	r4, r3
 800122c:	003a      	movs	r2, r7
 800122e:	0028      	movs	r0, r5
 8001230:	e7d8      	b.n	80011e4 <__aeabi_dadd+0x3b8>
 8001232:	4662      	mov	r2, ip
 8001234:	1a85      	subs	r5, r0, r2
 8001236:	42a8      	cmp	r0, r5
 8001238:	4192      	sbcs	r2, r2
 800123a:	4653      	mov	r3, sl
 800123c:	4252      	negs	r2, r2
 800123e:	4691      	mov	r9, r2
 8001240:	1ae3      	subs	r3, r4, r3
 8001242:	001a      	movs	r2, r3
 8001244:	464b      	mov	r3, r9
 8001246:	1ad2      	subs	r2, r2, r3
 8001248:	0013      	movs	r3, r2
 800124a:	4691      	mov	r9, r2
 800124c:	021a      	lsls	r2, r3, #8
 800124e:	d454      	bmi.n	80012fa <__aeabi_dadd+0x4ce>
 8001250:	464a      	mov	r2, r9
 8001252:	464c      	mov	r4, r9
 8001254:	432a      	orrs	r2, r5
 8001256:	d000      	beq.n	800125a <__aeabi_dadd+0x42e>
 8001258:	e640      	b.n	8000edc <__aeabi_dadd+0xb0>
 800125a:	2600      	movs	r6, #0
 800125c:	2400      	movs	r4, #0
 800125e:	2500      	movs	r5, #0
 8001260:	e67c      	b.n	8000f5c <__aeabi_dadd+0x130>
 8001262:	4da1      	ldr	r5, [pc, #644]	@ (80014e8 <__aeabi_dadd+0x6bc>)
 8001264:	45a9      	cmp	r9, r5
 8001266:	d100      	bne.n	800126a <__aeabi_dadd+0x43e>
 8001268:	e090      	b.n	800138c <__aeabi_dadd+0x560>
 800126a:	2501      	movs	r5, #1
 800126c:	2a38      	cmp	r2, #56	@ 0x38
 800126e:	dd00      	ble.n	8001272 <__aeabi_dadd+0x446>
 8001270:	e6ab      	b.n	8000fca <__aeabi_dadd+0x19e>
 8001272:	2580      	movs	r5, #128	@ 0x80
 8001274:	042d      	lsls	r5, r5, #16
 8001276:	432c      	orrs	r4, r5
 8001278:	e695      	b.n	8000fa6 <__aeabi_dadd+0x17a>
 800127a:	0011      	movs	r1, r2
 800127c:	4655      	mov	r5, sl
 800127e:	3920      	subs	r1, #32
 8001280:	40cd      	lsrs	r5, r1
 8001282:	46a9      	mov	r9, r5
 8001284:	2a20      	cmp	r2, #32
 8001286:	d006      	beq.n	8001296 <__aeabi_dadd+0x46a>
 8001288:	2140      	movs	r1, #64	@ 0x40
 800128a:	4653      	mov	r3, sl
 800128c:	1a8a      	subs	r2, r1, r2
 800128e:	4093      	lsls	r3, r2
 8001290:	4662      	mov	r2, ip
 8001292:	431a      	orrs	r2, r3
 8001294:	4694      	mov	ip, r2
 8001296:	4665      	mov	r5, ip
 8001298:	1e6b      	subs	r3, r5, #1
 800129a:	419d      	sbcs	r5, r3
 800129c:	464b      	mov	r3, r9
 800129e:	431d      	orrs	r5, r3
 80012a0:	e612      	b.n	8000ec8 <__aeabi_dadd+0x9c>
 80012a2:	0021      	movs	r1, r4
 80012a4:	4301      	orrs	r1, r0
 80012a6:	d100      	bne.n	80012aa <__aeabi_dadd+0x47e>
 80012a8:	e0c4      	b.n	8001434 <__aeabi_dadd+0x608>
 80012aa:	1e51      	subs	r1, r2, #1
 80012ac:	2a01      	cmp	r2, #1
 80012ae:	d100      	bne.n	80012b2 <__aeabi_dadd+0x486>
 80012b0:	e0fb      	b.n	80014aa <__aeabi_dadd+0x67e>
 80012b2:	4d8d      	ldr	r5, [pc, #564]	@ (80014e8 <__aeabi_dadd+0x6bc>)
 80012b4:	42aa      	cmp	r2, r5
 80012b6:	d100      	bne.n	80012ba <__aeabi_dadd+0x48e>
 80012b8:	e0b5      	b.n	8001426 <__aeabi_dadd+0x5fa>
 80012ba:	2501      	movs	r5, #1
 80012bc:	2938      	cmp	r1, #56	@ 0x38
 80012be:	dd00      	ble.n	80012c2 <__aeabi_dadd+0x496>
 80012c0:	e741      	b.n	8001146 <__aeabi_dadd+0x31a>
 80012c2:	000a      	movs	r2, r1
 80012c4:	e72f      	b.n	8001126 <__aeabi_dadd+0x2fa>
 80012c6:	4c89      	ldr	r4, [pc, #548]	@ (80014ec <__aeabi_dadd+0x6c0>)
 80012c8:	1aff      	subs	r7, r7, r3
 80012ca:	4014      	ands	r4, r2
 80012cc:	0762      	lsls	r2, r4, #29
 80012ce:	08e4      	lsrs	r4, r4, #3
 80012d0:	e76a      	b.n	80011a8 <__aeabi_dadd+0x37c>
 80012d2:	4a85      	ldr	r2, [pc, #532]	@ (80014e8 <__aeabi_dadd+0x6bc>)
 80012d4:	4291      	cmp	r1, r2
 80012d6:	d100      	bne.n	80012da <__aeabi_dadd+0x4ae>
 80012d8:	e0e3      	b.n	80014a2 <__aeabi_dadd+0x676>
 80012da:	4663      	mov	r3, ip
 80012dc:	18c2      	adds	r2, r0, r3
 80012de:	4282      	cmp	r2, r0
 80012e0:	4180      	sbcs	r0, r0
 80012e2:	0023      	movs	r3, r4
 80012e4:	4240      	negs	r0, r0
 80012e6:	4453      	add	r3, sl
 80012e8:	181b      	adds	r3, r3, r0
 80012ea:	07dd      	lsls	r5, r3, #31
 80012ec:	085c      	lsrs	r4, r3, #1
 80012ee:	2307      	movs	r3, #7
 80012f0:	0852      	lsrs	r2, r2, #1
 80012f2:	4315      	orrs	r5, r2
 80012f4:	000f      	movs	r7, r1
 80012f6:	402b      	ands	r3, r5
 80012f8:	e700      	b.n	80010fc <__aeabi_dadd+0x2d0>
 80012fa:	4663      	mov	r3, ip
 80012fc:	1a1d      	subs	r5, r3, r0
 80012fe:	45ac      	cmp	ip, r5
 8001300:	4192      	sbcs	r2, r2
 8001302:	4653      	mov	r3, sl
 8001304:	4252      	negs	r2, r2
 8001306:	1b1c      	subs	r4, r3, r4
 8001308:	000e      	movs	r6, r1
 800130a:	4688      	mov	r8, r1
 800130c:	1aa4      	subs	r4, r4, r2
 800130e:	e5e5      	b.n	8000edc <__aeabi_dadd+0xb0>
 8001310:	2d00      	cmp	r5, #0
 8001312:	d000      	beq.n	8001316 <__aeabi_dadd+0x4ea>
 8001314:	e091      	b.n	800143a <__aeabi_dadd+0x60e>
 8001316:	2a00      	cmp	r2, #0
 8001318:	d138      	bne.n	800138c <__aeabi_dadd+0x560>
 800131a:	2480      	movs	r4, #128	@ 0x80
 800131c:	2600      	movs	r6, #0
 800131e:	0324      	lsls	r4, r4, #12
 8001320:	e756      	b.n	80011d0 <__aeabi_dadd+0x3a4>
 8001322:	4663      	mov	r3, ip
 8001324:	18c5      	adds	r5, r0, r3
 8001326:	4285      	cmp	r5, r0
 8001328:	4180      	sbcs	r0, r0
 800132a:	4454      	add	r4, sl
 800132c:	4240      	negs	r0, r0
 800132e:	1824      	adds	r4, r4, r0
 8001330:	2701      	movs	r7, #1
 8001332:	0223      	lsls	r3, r4, #8
 8001334:	d400      	bmi.n	8001338 <__aeabi_dadd+0x50c>
 8001336:	e6df      	b.n	80010f8 <__aeabi_dadd+0x2cc>
 8001338:	2702      	movs	r7, #2
 800133a:	e687      	b.n	800104c <__aeabi_dadd+0x220>
 800133c:	4663      	mov	r3, ip
 800133e:	1ac5      	subs	r5, r0, r3
 8001340:	42a8      	cmp	r0, r5
 8001342:	4180      	sbcs	r0, r0
 8001344:	4653      	mov	r3, sl
 8001346:	4240      	negs	r0, r0
 8001348:	1ae4      	subs	r4, r4, r3
 800134a:	2701      	movs	r7, #1
 800134c:	1a24      	subs	r4, r4, r0
 800134e:	e5c0      	b.n	8000ed2 <__aeabi_dadd+0xa6>
 8001350:	0762      	lsls	r2, r4, #29
 8001352:	08c0      	lsrs	r0, r0, #3
 8001354:	4302      	orrs	r2, r0
 8001356:	08e4      	lsrs	r4, r4, #3
 8001358:	e736      	b.n	80011c8 <__aeabi_dadd+0x39c>
 800135a:	0011      	movs	r1, r2
 800135c:	4653      	mov	r3, sl
 800135e:	3920      	subs	r1, #32
 8001360:	40cb      	lsrs	r3, r1
 8001362:	4699      	mov	r9, r3
 8001364:	2a20      	cmp	r2, #32
 8001366:	d006      	beq.n	8001376 <__aeabi_dadd+0x54a>
 8001368:	2140      	movs	r1, #64	@ 0x40
 800136a:	4653      	mov	r3, sl
 800136c:	1a8a      	subs	r2, r1, r2
 800136e:	4093      	lsls	r3, r2
 8001370:	4662      	mov	r2, ip
 8001372:	431a      	orrs	r2, r3
 8001374:	4694      	mov	ip, r2
 8001376:	4665      	mov	r5, ip
 8001378:	1e6b      	subs	r3, r5, #1
 800137a:	419d      	sbcs	r5, r3
 800137c:	464b      	mov	r3, r9
 800137e:	431d      	orrs	r5, r3
 8001380:	e659      	b.n	8001036 <__aeabi_dadd+0x20a>
 8001382:	0762      	lsls	r2, r4, #29
 8001384:	08c0      	lsrs	r0, r0, #3
 8001386:	4302      	orrs	r2, r0
 8001388:	08e4      	lsrs	r4, r4, #3
 800138a:	e70d      	b.n	80011a8 <__aeabi_dadd+0x37c>
 800138c:	4653      	mov	r3, sl
 800138e:	075a      	lsls	r2, r3, #29
 8001390:	4663      	mov	r3, ip
 8001392:	08d8      	lsrs	r0, r3, #3
 8001394:	4653      	mov	r3, sl
 8001396:	000e      	movs	r6, r1
 8001398:	4302      	orrs	r2, r0
 800139a:	08dc      	lsrs	r4, r3, #3
 800139c:	e714      	b.n	80011c8 <__aeabi_dadd+0x39c>
 800139e:	0015      	movs	r5, r2
 80013a0:	0026      	movs	r6, r4
 80013a2:	3d20      	subs	r5, #32
 80013a4:	40ee      	lsrs	r6, r5
 80013a6:	2a20      	cmp	r2, #32
 80013a8:	d003      	beq.n	80013b2 <__aeabi_dadd+0x586>
 80013aa:	2540      	movs	r5, #64	@ 0x40
 80013ac:	1aaa      	subs	r2, r5, r2
 80013ae:	4094      	lsls	r4, r2
 80013b0:	4320      	orrs	r0, r4
 80013b2:	1e42      	subs	r2, r0, #1
 80013b4:	4190      	sbcs	r0, r2
 80013b6:	0005      	movs	r5, r0
 80013b8:	4335      	orrs	r5, r6
 80013ba:	e606      	b.n	8000fca <__aeabi_dadd+0x19e>
 80013bc:	2a00      	cmp	r2, #0
 80013be:	d07c      	beq.n	80014ba <__aeabi_dadd+0x68e>
 80013c0:	4662      	mov	r2, ip
 80013c2:	4653      	mov	r3, sl
 80013c4:	08c0      	lsrs	r0, r0, #3
 80013c6:	431a      	orrs	r2, r3
 80013c8:	d100      	bne.n	80013cc <__aeabi_dadd+0x5a0>
 80013ca:	e6fa      	b.n	80011c2 <__aeabi_dadd+0x396>
 80013cc:	0762      	lsls	r2, r4, #29
 80013ce:	4310      	orrs	r0, r2
 80013d0:	2280      	movs	r2, #128	@ 0x80
 80013d2:	08e4      	lsrs	r4, r4, #3
 80013d4:	0312      	lsls	r2, r2, #12
 80013d6:	4214      	tst	r4, r2
 80013d8:	d008      	beq.n	80013ec <__aeabi_dadd+0x5c0>
 80013da:	08d9      	lsrs	r1, r3, #3
 80013dc:	4211      	tst	r1, r2
 80013de:	d105      	bne.n	80013ec <__aeabi_dadd+0x5c0>
 80013e0:	4663      	mov	r3, ip
 80013e2:	08d8      	lsrs	r0, r3, #3
 80013e4:	4653      	mov	r3, sl
 80013e6:	000c      	movs	r4, r1
 80013e8:	075b      	lsls	r3, r3, #29
 80013ea:	4318      	orrs	r0, r3
 80013ec:	0f42      	lsrs	r2, r0, #29
 80013ee:	00c0      	lsls	r0, r0, #3
 80013f0:	08c0      	lsrs	r0, r0, #3
 80013f2:	0752      	lsls	r2, r2, #29
 80013f4:	4302      	orrs	r2, r0
 80013f6:	e6e7      	b.n	80011c8 <__aeabi_dadd+0x39c>
 80013f8:	2a00      	cmp	r2, #0
 80013fa:	d100      	bne.n	80013fe <__aeabi_dadd+0x5d2>
 80013fc:	e72d      	b.n	800125a <__aeabi_dadd+0x42e>
 80013fe:	4663      	mov	r3, ip
 8001400:	08d8      	lsrs	r0, r3, #3
 8001402:	4653      	mov	r3, sl
 8001404:	075a      	lsls	r2, r3, #29
 8001406:	000e      	movs	r6, r1
 8001408:	4302      	orrs	r2, r0
 800140a:	08dc      	lsrs	r4, r3, #3
 800140c:	e6cc      	b.n	80011a8 <__aeabi_dadd+0x37c>
 800140e:	4663      	mov	r3, ip
 8001410:	1a1d      	subs	r5, r3, r0
 8001412:	45ac      	cmp	ip, r5
 8001414:	4192      	sbcs	r2, r2
 8001416:	4653      	mov	r3, sl
 8001418:	4252      	negs	r2, r2
 800141a:	1b1c      	subs	r4, r3, r4
 800141c:	000e      	movs	r6, r1
 800141e:	4688      	mov	r8, r1
 8001420:	1aa4      	subs	r4, r4, r2
 8001422:	3701      	adds	r7, #1
 8001424:	e555      	b.n	8000ed2 <__aeabi_dadd+0xa6>
 8001426:	4663      	mov	r3, ip
 8001428:	08d9      	lsrs	r1, r3, #3
 800142a:	4653      	mov	r3, sl
 800142c:	075a      	lsls	r2, r3, #29
 800142e:	430a      	orrs	r2, r1
 8001430:	08dc      	lsrs	r4, r3, #3
 8001432:	e6c9      	b.n	80011c8 <__aeabi_dadd+0x39c>
 8001434:	4660      	mov	r0, ip
 8001436:	4654      	mov	r4, sl
 8001438:	e6d4      	b.n	80011e4 <__aeabi_dadd+0x3b8>
 800143a:	08c0      	lsrs	r0, r0, #3
 800143c:	2a00      	cmp	r2, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_dadd+0x616>
 8001440:	e6bf      	b.n	80011c2 <__aeabi_dadd+0x396>
 8001442:	0762      	lsls	r2, r4, #29
 8001444:	4310      	orrs	r0, r2
 8001446:	2280      	movs	r2, #128	@ 0x80
 8001448:	08e4      	lsrs	r4, r4, #3
 800144a:	0312      	lsls	r2, r2, #12
 800144c:	4214      	tst	r4, r2
 800144e:	d0cd      	beq.n	80013ec <__aeabi_dadd+0x5c0>
 8001450:	08dd      	lsrs	r5, r3, #3
 8001452:	4215      	tst	r5, r2
 8001454:	d1ca      	bne.n	80013ec <__aeabi_dadd+0x5c0>
 8001456:	4663      	mov	r3, ip
 8001458:	08d8      	lsrs	r0, r3, #3
 800145a:	4653      	mov	r3, sl
 800145c:	075b      	lsls	r3, r3, #29
 800145e:	000e      	movs	r6, r1
 8001460:	002c      	movs	r4, r5
 8001462:	4318      	orrs	r0, r3
 8001464:	e7c2      	b.n	80013ec <__aeabi_dadd+0x5c0>
 8001466:	4663      	mov	r3, ip
 8001468:	08d9      	lsrs	r1, r3, #3
 800146a:	4653      	mov	r3, sl
 800146c:	075a      	lsls	r2, r3, #29
 800146e:	430a      	orrs	r2, r1
 8001470:	08dc      	lsrs	r4, r3, #3
 8001472:	e699      	b.n	80011a8 <__aeabi_dadd+0x37c>
 8001474:	4663      	mov	r3, ip
 8001476:	08d8      	lsrs	r0, r3, #3
 8001478:	4653      	mov	r3, sl
 800147a:	075a      	lsls	r2, r3, #29
 800147c:	000e      	movs	r6, r1
 800147e:	4302      	orrs	r2, r0
 8001480:	08dc      	lsrs	r4, r3, #3
 8001482:	e6a1      	b.n	80011c8 <__aeabi_dadd+0x39c>
 8001484:	0011      	movs	r1, r2
 8001486:	0027      	movs	r7, r4
 8001488:	3920      	subs	r1, #32
 800148a:	40cf      	lsrs	r7, r1
 800148c:	2a20      	cmp	r2, #32
 800148e:	d003      	beq.n	8001498 <__aeabi_dadd+0x66c>
 8001490:	2140      	movs	r1, #64	@ 0x40
 8001492:	1a8a      	subs	r2, r1, r2
 8001494:	4094      	lsls	r4, r2
 8001496:	4320      	orrs	r0, r4
 8001498:	1e42      	subs	r2, r0, #1
 800149a:	4190      	sbcs	r0, r2
 800149c:	0005      	movs	r5, r0
 800149e:	433d      	orrs	r5, r7
 80014a0:	e651      	b.n	8001146 <__aeabi_dadd+0x31a>
 80014a2:	000c      	movs	r4, r1
 80014a4:	2500      	movs	r5, #0
 80014a6:	2200      	movs	r2, #0
 80014a8:	e558      	b.n	8000f5c <__aeabi_dadd+0x130>
 80014aa:	4460      	add	r0, ip
 80014ac:	4560      	cmp	r0, ip
 80014ae:	4192      	sbcs	r2, r2
 80014b0:	4454      	add	r4, sl
 80014b2:	4252      	negs	r2, r2
 80014b4:	0005      	movs	r5, r0
 80014b6:	18a4      	adds	r4, r4, r2
 80014b8:	e73a      	b.n	8001330 <__aeabi_dadd+0x504>
 80014ba:	4653      	mov	r3, sl
 80014bc:	075a      	lsls	r2, r3, #29
 80014be:	4663      	mov	r3, ip
 80014c0:	08d9      	lsrs	r1, r3, #3
 80014c2:	4653      	mov	r3, sl
 80014c4:	430a      	orrs	r2, r1
 80014c6:	08dc      	lsrs	r4, r3, #3
 80014c8:	e67e      	b.n	80011c8 <__aeabi_dadd+0x39c>
 80014ca:	001a      	movs	r2, r3
 80014cc:	001c      	movs	r4, r3
 80014ce:	432a      	orrs	r2, r5
 80014d0:	d000      	beq.n	80014d4 <__aeabi_dadd+0x6a8>
 80014d2:	e6ab      	b.n	800122c <__aeabi_dadd+0x400>
 80014d4:	e6c1      	b.n	800125a <__aeabi_dadd+0x42e>
 80014d6:	2120      	movs	r1, #32
 80014d8:	2500      	movs	r5, #0
 80014da:	1a09      	subs	r1, r1, r0
 80014dc:	e519      	b.n	8000f12 <__aeabi_dadd+0xe6>
 80014de:	2200      	movs	r2, #0
 80014e0:	2500      	movs	r5, #0
 80014e2:	4c01      	ldr	r4, [pc, #4]	@ (80014e8 <__aeabi_dadd+0x6bc>)
 80014e4:	e53a      	b.n	8000f5c <__aeabi_dadd+0x130>
 80014e6:	46c0      	nop			@ (mov r8, r8)
 80014e8:	000007ff 	.word	0x000007ff
 80014ec:	ff7fffff 	.word	0xff7fffff
 80014f0:	000007fe 	.word	0x000007fe

080014f4 <__aeabi_dmul>:
 80014f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f6:	4657      	mov	r7, sl
 80014f8:	46de      	mov	lr, fp
 80014fa:	464e      	mov	r6, r9
 80014fc:	4645      	mov	r5, r8
 80014fe:	b5e0      	push	{r5, r6, r7, lr}
 8001500:	001f      	movs	r7, r3
 8001502:	030b      	lsls	r3, r1, #12
 8001504:	0b1b      	lsrs	r3, r3, #12
 8001506:	0016      	movs	r6, r2
 8001508:	469a      	mov	sl, r3
 800150a:	0fca      	lsrs	r2, r1, #31
 800150c:	004b      	lsls	r3, r1, #1
 800150e:	0004      	movs	r4, r0
 8001510:	4693      	mov	fp, r2
 8001512:	b087      	sub	sp, #28
 8001514:	0d5b      	lsrs	r3, r3, #21
 8001516:	d100      	bne.n	800151a <__aeabi_dmul+0x26>
 8001518:	e0d5      	b.n	80016c6 <__aeabi_dmul+0x1d2>
 800151a:	4abb      	ldr	r2, [pc, #748]	@ (8001808 <__aeabi_dmul+0x314>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d100      	bne.n	8001522 <__aeabi_dmul+0x2e>
 8001520:	e0f8      	b.n	8001714 <__aeabi_dmul+0x220>
 8001522:	4651      	mov	r1, sl
 8001524:	0f42      	lsrs	r2, r0, #29
 8001526:	00c9      	lsls	r1, r1, #3
 8001528:	430a      	orrs	r2, r1
 800152a:	2180      	movs	r1, #128	@ 0x80
 800152c:	0409      	lsls	r1, r1, #16
 800152e:	4311      	orrs	r1, r2
 8001530:	00c2      	lsls	r2, r0, #3
 8001532:	4691      	mov	r9, r2
 8001534:	4ab5      	ldr	r2, [pc, #724]	@ (800180c <__aeabi_dmul+0x318>)
 8001536:	468a      	mov	sl, r1
 8001538:	189d      	adds	r5, r3, r2
 800153a:	2300      	movs	r3, #0
 800153c:	4698      	mov	r8, r3
 800153e:	9302      	str	r3, [sp, #8]
 8001540:	033c      	lsls	r4, r7, #12
 8001542:	007b      	lsls	r3, r7, #1
 8001544:	0ffa      	lsrs	r2, r7, #31
 8001546:	0030      	movs	r0, r6
 8001548:	0b24      	lsrs	r4, r4, #12
 800154a:	0d5b      	lsrs	r3, r3, #21
 800154c:	9200      	str	r2, [sp, #0]
 800154e:	d100      	bne.n	8001552 <__aeabi_dmul+0x5e>
 8001550:	e096      	b.n	8001680 <__aeabi_dmul+0x18c>
 8001552:	4aad      	ldr	r2, [pc, #692]	@ (8001808 <__aeabi_dmul+0x314>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d031      	beq.n	80015bc <__aeabi_dmul+0xc8>
 8001558:	0f72      	lsrs	r2, r6, #29
 800155a:	00e4      	lsls	r4, r4, #3
 800155c:	4322      	orrs	r2, r4
 800155e:	2480      	movs	r4, #128	@ 0x80
 8001560:	0424      	lsls	r4, r4, #16
 8001562:	4314      	orrs	r4, r2
 8001564:	4aa9      	ldr	r2, [pc, #676]	@ (800180c <__aeabi_dmul+0x318>)
 8001566:	00f0      	lsls	r0, r6, #3
 8001568:	4694      	mov	ip, r2
 800156a:	4463      	add	r3, ip
 800156c:	195b      	adds	r3, r3, r5
 800156e:	1c5a      	adds	r2, r3, #1
 8001570:	9201      	str	r2, [sp, #4]
 8001572:	4642      	mov	r2, r8
 8001574:	2600      	movs	r6, #0
 8001576:	2a0a      	cmp	r2, #10
 8001578:	dc42      	bgt.n	8001600 <__aeabi_dmul+0x10c>
 800157a:	465a      	mov	r2, fp
 800157c:	9900      	ldr	r1, [sp, #0]
 800157e:	404a      	eors	r2, r1
 8001580:	4693      	mov	fp, r2
 8001582:	4642      	mov	r2, r8
 8001584:	2a02      	cmp	r2, #2
 8001586:	dc32      	bgt.n	80015ee <__aeabi_dmul+0xfa>
 8001588:	3a01      	subs	r2, #1
 800158a:	2a01      	cmp	r2, #1
 800158c:	d900      	bls.n	8001590 <__aeabi_dmul+0x9c>
 800158e:	e149      	b.n	8001824 <__aeabi_dmul+0x330>
 8001590:	2e02      	cmp	r6, #2
 8001592:	d100      	bne.n	8001596 <__aeabi_dmul+0xa2>
 8001594:	e0ca      	b.n	800172c <__aeabi_dmul+0x238>
 8001596:	2e01      	cmp	r6, #1
 8001598:	d13d      	bne.n	8001616 <__aeabi_dmul+0x122>
 800159a:	2300      	movs	r3, #0
 800159c:	2400      	movs	r4, #0
 800159e:	2200      	movs	r2, #0
 80015a0:	0010      	movs	r0, r2
 80015a2:	465a      	mov	r2, fp
 80015a4:	051b      	lsls	r3, r3, #20
 80015a6:	4323      	orrs	r3, r4
 80015a8:	07d2      	lsls	r2, r2, #31
 80015aa:	4313      	orrs	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	b007      	add	sp, #28
 80015b0:	bcf0      	pop	{r4, r5, r6, r7}
 80015b2:	46bb      	mov	fp, r7
 80015b4:	46b2      	mov	sl, r6
 80015b6:	46a9      	mov	r9, r5
 80015b8:	46a0      	mov	r8, r4
 80015ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015bc:	4b92      	ldr	r3, [pc, #584]	@ (8001808 <__aeabi_dmul+0x314>)
 80015be:	4326      	orrs	r6, r4
 80015c0:	18eb      	adds	r3, r5, r3
 80015c2:	2e00      	cmp	r6, #0
 80015c4:	d100      	bne.n	80015c8 <__aeabi_dmul+0xd4>
 80015c6:	e0bb      	b.n	8001740 <__aeabi_dmul+0x24c>
 80015c8:	2203      	movs	r2, #3
 80015ca:	4641      	mov	r1, r8
 80015cc:	4311      	orrs	r1, r2
 80015ce:	465a      	mov	r2, fp
 80015d0:	4688      	mov	r8, r1
 80015d2:	9900      	ldr	r1, [sp, #0]
 80015d4:	404a      	eors	r2, r1
 80015d6:	2180      	movs	r1, #128	@ 0x80
 80015d8:	0109      	lsls	r1, r1, #4
 80015da:	468c      	mov	ip, r1
 80015dc:	0029      	movs	r1, r5
 80015de:	4461      	add	r1, ip
 80015e0:	9101      	str	r1, [sp, #4]
 80015e2:	4641      	mov	r1, r8
 80015e4:	290a      	cmp	r1, #10
 80015e6:	dd00      	ble.n	80015ea <__aeabi_dmul+0xf6>
 80015e8:	e233      	b.n	8001a52 <__aeabi_dmul+0x55e>
 80015ea:	4693      	mov	fp, r2
 80015ec:	2603      	movs	r6, #3
 80015ee:	4642      	mov	r2, r8
 80015f0:	2701      	movs	r7, #1
 80015f2:	4097      	lsls	r7, r2
 80015f4:	21a6      	movs	r1, #166	@ 0xa6
 80015f6:	003a      	movs	r2, r7
 80015f8:	00c9      	lsls	r1, r1, #3
 80015fa:	400a      	ands	r2, r1
 80015fc:	420f      	tst	r7, r1
 80015fe:	d031      	beq.n	8001664 <__aeabi_dmul+0x170>
 8001600:	9e02      	ldr	r6, [sp, #8]
 8001602:	2e02      	cmp	r6, #2
 8001604:	d100      	bne.n	8001608 <__aeabi_dmul+0x114>
 8001606:	e235      	b.n	8001a74 <__aeabi_dmul+0x580>
 8001608:	2e03      	cmp	r6, #3
 800160a:	d100      	bne.n	800160e <__aeabi_dmul+0x11a>
 800160c:	e1d2      	b.n	80019b4 <__aeabi_dmul+0x4c0>
 800160e:	4654      	mov	r4, sl
 8001610:	4648      	mov	r0, r9
 8001612:	2e01      	cmp	r6, #1
 8001614:	d0c1      	beq.n	800159a <__aeabi_dmul+0xa6>
 8001616:	9a01      	ldr	r2, [sp, #4]
 8001618:	4b7d      	ldr	r3, [pc, #500]	@ (8001810 <__aeabi_dmul+0x31c>)
 800161a:	4694      	mov	ip, r2
 800161c:	4463      	add	r3, ip
 800161e:	2b00      	cmp	r3, #0
 8001620:	dc00      	bgt.n	8001624 <__aeabi_dmul+0x130>
 8001622:	e0c0      	b.n	80017a6 <__aeabi_dmul+0x2b2>
 8001624:	0742      	lsls	r2, r0, #29
 8001626:	d009      	beq.n	800163c <__aeabi_dmul+0x148>
 8001628:	220f      	movs	r2, #15
 800162a:	4002      	ands	r2, r0
 800162c:	2a04      	cmp	r2, #4
 800162e:	d005      	beq.n	800163c <__aeabi_dmul+0x148>
 8001630:	1d02      	adds	r2, r0, #4
 8001632:	4282      	cmp	r2, r0
 8001634:	4180      	sbcs	r0, r0
 8001636:	4240      	negs	r0, r0
 8001638:	1824      	adds	r4, r4, r0
 800163a:	0010      	movs	r0, r2
 800163c:	01e2      	lsls	r2, r4, #7
 800163e:	d506      	bpl.n	800164e <__aeabi_dmul+0x15a>
 8001640:	4b74      	ldr	r3, [pc, #464]	@ (8001814 <__aeabi_dmul+0x320>)
 8001642:	9a01      	ldr	r2, [sp, #4]
 8001644:	401c      	ands	r4, r3
 8001646:	2380      	movs	r3, #128	@ 0x80
 8001648:	4694      	mov	ip, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	4463      	add	r3, ip
 800164e:	4a72      	ldr	r2, [pc, #456]	@ (8001818 <__aeabi_dmul+0x324>)
 8001650:	4293      	cmp	r3, r2
 8001652:	dc6b      	bgt.n	800172c <__aeabi_dmul+0x238>
 8001654:	0762      	lsls	r2, r4, #29
 8001656:	08c0      	lsrs	r0, r0, #3
 8001658:	0264      	lsls	r4, r4, #9
 800165a:	055b      	lsls	r3, r3, #21
 800165c:	4302      	orrs	r2, r0
 800165e:	0b24      	lsrs	r4, r4, #12
 8001660:	0d5b      	lsrs	r3, r3, #21
 8001662:	e79d      	b.n	80015a0 <__aeabi_dmul+0xac>
 8001664:	2190      	movs	r1, #144	@ 0x90
 8001666:	0089      	lsls	r1, r1, #2
 8001668:	420f      	tst	r7, r1
 800166a:	d163      	bne.n	8001734 <__aeabi_dmul+0x240>
 800166c:	2288      	movs	r2, #136	@ 0x88
 800166e:	423a      	tst	r2, r7
 8001670:	d100      	bne.n	8001674 <__aeabi_dmul+0x180>
 8001672:	e0d7      	b.n	8001824 <__aeabi_dmul+0x330>
 8001674:	9b00      	ldr	r3, [sp, #0]
 8001676:	46a2      	mov	sl, r4
 8001678:	469b      	mov	fp, r3
 800167a:	4681      	mov	r9, r0
 800167c:	9602      	str	r6, [sp, #8]
 800167e:	e7bf      	b.n	8001600 <__aeabi_dmul+0x10c>
 8001680:	0023      	movs	r3, r4
 8001682:	4333      	orrs	r3, r6
 8001684:	d100      	bne.n	8001688 <__aeabi_dmul+0x194>
 8001686:	e07f      	b.n	8001788 <__aeabi_dmul+0x294>
 8001688:	2c00      	cmp	r4, #0
 800168a:	d100      	bne.n	800168e <__aeabi_dmul+0x19a>
 800168c:	e1ad      	b.n	80019ea <__aeabi_dmul+0x4f6>
 800168e:	0020      	movs	r0, r4
 8001690:	f000 fa9c 	bl	8001bcc <__clzsi2>
 8001694:	0002      	movs	r2, r0
 8001696:	0003      	movs	r3, r0
 8001698:	3a0b      	subs	r2, #11
 800169a:	201d      	movs	r0, #29
 800169c:	0019      	movs	r1, r3
 800169e:	1a82      	subs	r2, r0, r2
 80016a0:	0030      	movs	r0, r6
 80016a2:	3908      	subs	r1, #8
 80016a4:	40d0      	lsrs	r0, r2
 80016a6:	408c      	lsls	r4, r1
 80016a8:	4304      	orrs	r4, r0
 80016aa:	0030      	movs	r0, r6
 80016ac:	4088      	lsls	r0, r1
 80016ae:	4a5b      	ldr	r2, [pc, #364]	@ (800181c <__aeabi_dmul+0x328>)
 80016b0:	1aeb      	subs	r3, r5, r3
 80016b2:	4694      	mov	ip, r2
 80016b4:	4463      	add	r3, ip
 80016b6:	1c5a      	adds	r2, r3, #1
 80016b8:	9201      	str	r2, [sp, #4]
 80016ba:	4642      	mov	r2, r8
 80016bc:	2600      	movs	r6, #0
 80016be:	2a0a      	cmp	r2, #10
 80016c0:	dc00      	bgt.n	80016c4 <__aeabi_dmul+0x1d0>
 80016c2:	e75a      	b.n	800157a <__aeabi_dmul+0x86>
 80016c4:	e79c      	b.n	8001600 <__aeabi_dmul+0x10c>
 80016c6:	4653      	mov	r3, sl
 80016c8:	4303      	orrs	r3, r0
 80016ca:	4699      	mov	r9, r3
 80016cc:	d054      	beq.n	8001778 <__aeabi_dmul+0x284>
 80016ce:	4653      	mov	r3, sl
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d100      	bne.n	80016d6 <__aeabi_dmul+0x1e2>
 80016d4:	e177      	b.n	80019c6 <__aeabi_dmul+0x4d2>
 80016d6:	4650      	mov	r0, sl
 80016d8:	f000 fa78 	bl	8001bcc <__clzsi2>
 80016dc:	230b      	movs	r3, #11
 80016de:	425b      	negs	r3, r3
 80016e0:	469c      	mov	ip, r3
 80016e2:	0002      	movs	r2, r0
 80016e4:	4484      	add	ip, r0
 80016e6:	0011      	movs	r1, r2
 80016e8:	4650      	mov	r0, sl
 80016ea:	3908      	subs	r1, #8
 80016ec:	4088      	lsls	r0, r1
 80016ee:	231d      	movs	r3, #29
 80016f0:	4680      	mov	r8, r0
 80016f2:	4660      	mov	r0, ip
 80016f4:	1a1b      	subs	r3, r3, r0
 80016f6:	0020      	movs	r0, r4
 80016f8:	40d8      	lsrs	r0, r3
 80016fa:	0003      	movs	r3, r0
 80016fc:	4640      	mov	r0, r8
 80016fe:	4303      	orrs	r3, r0
 8001700:	469a      	mov	sl, r3
 8001702:	0023      	movs	r3, r4
 8001704:	408b      	lsls	r3, r1
 8001706:	4699      	mov	r9, r3
 8001708:	2300      	movs	r3, #0
 800170a:	4d44      	ldr	r5, [pc, #272]	@ (800181c <__aeabi_dmul+0x328>)
 800170c:	4698      	mov	r8, r3
 800170e:	1aad      	subs	r5, r5, r2
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	e715      	b.n	8001540 <__aeabi_dmul+0x4c>
 8001714:	4652      	mov	r2, sl
 8001716:	4302      	orrs	r2, r0
 8001718:	4691      	mov	r9, r2
 800171a:	d126      	bne.n	800176a <__aeabi_dmul+0x276>
 800171c:	2200      	movs	r2, #0
 800171e:	001d      	movs	r5, r3
 8001720:	2302      	movs	r3, #2
 8001722:	4692      	mov	sl, r2
 8001724:	3208      	adds	r2, #8
 8001726:	4690      	mov	r8, r2
 8001728:	9302      	str	r3, [sp, #8]
 800172a:	e709      	b.n	8001540 <__aeabi_dmul+0x4c>
 800172c:	2400      	movs	r4, #0
 800172e:	2200      	movs	r2, #0
 8001730:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <__aeabi_dmul+0x314>)
 8001732:	e735      	b.n	80015a0 <__aeabi_dmul+0xac>
 8001734:	2300      	movs	r3, #0
 8001736:	2480      	movs	r4, #128	@ 0x80
 8001738:	469b      	mov	fp, r3
 800173a:	0324      	lsls	r4, r4, #12
 800173c:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <__aeabi_dmul+0x314>)
 800173e:	e72f      	b.n	80015a0 <__aeabi_dmul+0xac>
 8001740:	2202      	movs	r2, #2
 8001742:	4641      	mov	r1, r8
 8001744:	4311      	orrs	r1, r2
 8001746:	2280      	movs	r2, #128	@ 0x80
 8001748:	0112      	lsls	r2, r2, #4
 800174a:	4694      	mov	ip, r2
 800174c:	002a      	movs	r2, r5
 800174e:	4462      	add	r2, ip
 8001750:	4688      	mov	r8, r1
 8001752:	9201      	str	r2, [sp, #4]
 8001754:	290a      	cmp	r1, #10
 8001756:	dd00      	ble.n	800175a <__aeabi_dmul+0x266>
 8001758:	e752      	b.n	8001600 <__aeabi_dmul+0x10c>
 800175a:	465a      	mov	r2, fp
 800175c:	2000      	movs	r0, #0
 800175e:	9900      	ldr	r1, [sp, #0]
 8001760:	0004      	movs	r4, r0
 8001762:	404a      	eors	r2, r1
 8001764:	4693      	mov	fp, r2
 8001766:	2602      	movs	r6, #2
 8001768:	e70b      	b.n	8001582 <__aeabi_dmul+0x8e>
 800176a:	220c      	movs	r2, #12
 800176c:	001d      	movs	r5, r3
 800176e:	2303      	movs	r3, #3
 8001770:	4681      	mov	r9, r0
 8001772:	4690      	mov	r8, r2
 8001774:	9302      	str	r3, [sp, #8]
 8001776:	e6e3      	b.n	8001540 <__aeabi_dmul+0x4c>
 8001778:	2300      	movs	r3, #0
 800177a:	469a      	mov	sl, r3
 800177c:	3304      	adds	r3, #4
 800177e:	4698      	mov	r8, r3
 8001780:	3b03      	subs	r3, #3
 8001782:	2500      	movs	r5, #0
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	e6db      	b.n	8001540 <__aeabi_dmul+0x4c>
 8001788:	4642      	mov	r2, r8
 800178a:	3301      	adds	r3, #1
 800178c:	431a      	orrs	r2, r3
 800178e:	002b      	movs	r3, r5
 8001790:	4690      	mov	r8, r2
 8001792:	1c5a      	adds	r2, r3, #1
 8001794:	9201      	str	r2, [sp, #4]
 8001796:	4642      	mov	r2, r8
 8001798:	2400      	movs	r4, #0
 800179a:	2000      	movs	r0, #0
 800179c:	2601      	movs	r6, #1
 800179e:	2a0a      	cmp	r2, #10
 80017a0:	dc00      	bgt.n	80017a4 <__aeabi_dmul+0x2b0>
 80017a2:	e6ea      	b.n	800157a <__aeabi_dmul+0x86>
 80017a4:	e72c      	b.n	8001600 <__aeabi_dmul+0x10c>
 80017a6:	2201      	movs	r2, #1
 80017a8:	1ad2      	subs	r2, r2, r3
 80017aa:	2a38      	cmp	r2, #56	@ 0x38
 80017ac:	dd00      	ble.n	80017b0 <__aeabi_dmul+0x2bc>
 80017ae:	e6f4      	b.n	800159a <__aeabi_dmul+0xa6>
 80017b0:	2a1f      	cmp	r2, #31
 80017b2:	dc00      	bgt.n	80017b6 <__aeabi_dmul+0x2c2>
 80017b4:	e12a      	b.n	8001a0c <__aeabi_dmul+0x518>
 80017b6:	211f      	movs	r1, #31
 80017b8:	4249      	negs	r1, r1
 80017ba:	1acb      	subs	r3, r1, r3
 80017bc:	0021      	movs	r1, r4
 80017be:	40d9      	lsrs	r1, r3
 80017c0:	000b      	movs	r3, r1
 80017c2:	2a20      	cmp	r2, #32
 80017c4:	d005      	beq.n	80017d2 <__aeabi_dmul+0x2de>
 80017c6:	4a16      	ldr	r2, [pc, #88]	@ (8001820 <__aeabi_dmul+0x32c>)
 80017c8:	9d01      	ldr	r5, [sp, #4]
 80017ca:	4694      	mov	ip, r2
 80017cc:	4465      	add	r5, ip
 80017ce:	40ac      	lsls	r4, r5
 80017d0:	4320      	orrs	r0, r4
 80017d2:	1e42      	subs	r2, r0, #1
 80017d4:	4190      	sbcs	r0, r2
 80017d6:	4318      	orrs	r0, r3
 80017d8:	2307      	movs	r3, #7
 80017da:	0019      	movs	r1, r3
 80017dc:	2400      	movs	r4, #0
 80017de:	4001      	ands	r1, r0
 80017e0:	4203      	tst	r3, r0
 80017e2:	d00c      	beq.n	80017fe <__aeabi_dmul+0x30a>
 80017e4:	230f      	movs	r3, #15
 80017e6:	4003      	ands	r3, r0
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d100      	bne.n	80017ee <__aeabi_dmul+0x2fa>
 80017ec:	e140      	b.n	8001a70 <__aeabi_dmul+0x57c>
 80017ee:	1d03      	adds	r3, r0, #4
 80017f0:	4283      	cmp	r3, r0
 80017f2:	41a4      	sbcs	r4, r4
 80017f4:	0018      	movs	r0, r3
 80017f6:	4264      	negs	r4, r4
 80017f8:	0761      	lsls	r1, r4, #29
 80017fa:	0264      	lsls	r4, r4, #9
 80017fc:	0b24      	lsrs	r4, r4, #12
 80017fe:	08c2      	lsrs	r2, r0, #3
 8001800:	2300      	movs	r3, #0
 8001802:	430a      	orrs	r2, r1
 8001804:	e6cc      	b.n	80015a0 <__aeabi_dmul+0xac>
 8001806:	46c0      	nop			@ (mov r8, r8)
 8001808:	000007ff 	.word	0x000007ff
 800180c:	fffffc01 	.word	0xfffffc01
 8001810:	000003ff 	.word	0x000003ff
 8001814:	feffffff 	.word	0xfeffffff
 8001818:	000007fe 	.word	0x000007fe
 800181c:	fffffc0d 	.word	0xfffffc0d
 8001820:	0000043e 	.word	0x0000043e
 8001824:	4649      	mov	r1, r9
 8001826:	464a      	mov	r2, r9
 8001828:	0409      	lsls	r1, r1, #16
 800182a:	0c09      	lsrs	r1, r1, #16
 800182c:	000d      	movs	r5, r1
 800182e:	0c16      	lsrs	r6, r2, #16
 8001830:	0c02      	lsrs	r2, r0, #16
 8001832:	0400      	lsls	r0, r0, #16
 8001834:	0c00      	lsrs	r0, r0, #16
 8001836:	4345      	muls	r5, r0
 8001838:	46ac      	mov	ip, r5
 800183a:	0005      	movs	r5, r0
 800183c:	4375      	muls	r5, r6
 800183e:	46a8      	mov	r8, r5
 8001840:	0015      	movs	r5, r2
 8001842:	000f      	movs	r7, r1
 8001844:	4375      	muls	r5, r6
 8001846:	9200      	str	r2, [sp, #0]
 8001848:	9502      	str	r5, [sp, #8]
 800184a:	002a      	movs	r2, r5
 800184c:	9d00      	ldr	r5, [sp, #0]
 800184e:	436f      	muls	r7, r5
 8001850:	4665      	mov	r5, ip
 8001852:	0c2d      	lsrs	r5, r5, #16
 8001854:	46a9      	mov	r9, r5
 8001856:	4447      	add	r7, r8
 8001858:	444f      	add	r7, r9
 800185a:	45b8      	cmp	r8, r7
 800185c:	d905      	bls.n	800186a <__aeabi_dmul+0x376>
 800185e:	0015      	movs	r5, r2
 8001860:	2280      	movs	r2, #128	@ 0x80
 8001862:	0252      	lsls	r2, r2, #9
 8001864:	4690      	mov	r8, r2
 8001866:	4445      	add	r5, r8
 8001868:	9502      	str	r5, [sp, #8]
 800186a:	0c3d      	lsrs	r5, r7, #16
 800186c:	9503      	str	r5, [sp, #12]
 800186e:	4665      	mov	r5, ip
 8001870:	042d      	lsls	r5, r5, #16
 8001872:	043f      	lsls	r7, r7, #16
 8001874:	0c2d      	lsrs	r5, r5, #16
 8001876:	46ac      	mov	ip, r5
 8001878:	003d      	movs	r5, r7
 800187a:	4465      	add	r5, ip
 800187c:	9504      	str	r5, [sp, #16]
 800187e:	0c25      	lsrs	r5, r4, #16
 8001880:	0424      	lsls	r4, r4, #16
 8001882:	0c24      	lsrs	r4, r4, #16
 8001884:	46ac      	mov	ip, r5
 8001886:	0025      	movs	r5, r4
 8001888:	4375      	muls	r5, r6
 800188a:	46a8      	mov	r8, r5
 800188c:	4665      	mov	r5, ip
 800188e:	000f      	movs	r7, r1
 8001890:	4369      	muls	r1, r5
 8001892:	4441      	add	r1, r8
 8001894:	4689      	mov	r9, r1
 8001896:	4367      	muls	r7, r4
 8001898:	0c39      	lsrs	r1, r7, #16
 800189a:	4449      	add	r1, r9
 800189c:	436e      	muls	r6, r5
 800189e:	4588      	cmp	r8, r1
 80018a0:	d903      	bls.n	80018aa <__aeabi_dmul+0x3b6>
 80018a2:	2280      	movs	r2, #128	@ 0x80
 80018a4:	0252      	lsls	r2, r2, #9
 80018a6:	4690      	mov	r8, r2
 80018a8:	4446      	add	r6, r8
 80018aa:	0c0d      	lsrs	r5, r1, #16
 80018ac:	46a8      	mov	r8, r5
 80018ae:	0035      	movs	r5, r6
 80018b0:	4445      	add	r5, r8
 80018b2:	9505      	str	r5, [sp, #20]
 80018b4:	9d03      	ldr	r5, [sp, #12]
 80018b6:	043f      	lsls	r7, r7, #16
 80018b8:	46a8      	mov	r8, r5
 80018ba:	0c3f      	lsrs	r7, r7, #16
 80018bc:	0409      	lsls	r1, r1, #16
 80018be:	19c9      	adds	r1, r1, r7
 80018c0:	4488      	add	r8, r1
 80018c2:	4645      	mov	r5, r8
 80018c4:	9503      	str	r5, [sp, #12]
 80018c6:	4655      	mov	r5, sl
 80018c8:	042e      	lsls	r6, r5, #16
 80018ca:	0c36      	lsrs	r6, r6, #16
 80018cc:	0c2f      	lsrs	r7, r5, #16
 80018ce:	0035      	movs	r5, r6
 80018d0:	4345      	muls	r5, r0
 80018d2:	4378      	muls	r0, r7
 80018d4:	4681      	mov	r9, r0
 80018d6:	0038      	movs	r0, r7
 80018d8:	46a8      	mov	r8, r5
 80018da:	0c2d      	lsrs	r5, r5, #16
 80018dc:	46aa      	mov	sl, r5
 80018de:	9a00      	ldr	r2, [sp, #0]
 80018e0:	4350      	muls	r0, r2
 80018e2:	4372      	muls	r2, r6
 80018e4:	444a      	add	r2, r9
 80018e6:	4452      	add	r2, sl
 80018e8:	4591      	cmp	r9, r2
 80018ea:	d903      	bls.n	80018f4 <__aeabi_dmul+0x400>
 80018ec:	2580      	movs	r5, #128	@ 0x80
 80018ee:	026d      	lsls	r5, r5, #9
 80018f0:	46a9      	mov	r9, r5
 80018f2:	4448      	add	r0, r9
 80018f4:	0c15      	lsrs	r5, r2, #16
 80018f6:	46a9      	mov	r9, r5
 80018f8:	4645      	mov	r5, r8
 80018fa:	042d      	lsls	r5, r5, #16
 80018fc:	0c2d      	lsrs	r5, r5, #16
 80018fe:	46a8      	mov	r8, r5
 8001900:	4665      	mov	r5, ip
 8001902:	437d      	muls	r5, r7
 8001904:	0412      	lsls	r2, r2, #16
 8001906:	4448      	add	r0, r9
 8001908:	4490      	add	r8, r2
 800190a:	46a9      	mov	r9, r5
 800190c:	0032      	movs	r2, r6
 800190e:	4665      	mov	r5, ip
 8001910:	4362      	muls	r2, r4
 8001912:	436e      	muls	r6, r5
 8001914:	437c      	muls	r4, r7
 8001916:	0c17      	lsrs	r7, r2, #16
 8001918:	1936      	adds	r6, r6, r4
 800191a:	19bf      	adds	r7, r7, r6
 800191c:	42bc      	cmp	r4, r7
 800191e:	d903      	bls.n	8001928 <__aeabi_dmul+0x434>
 8001920:	2480      	movs	r4, #128	@ 0x80
 8001922:	0264      	lsls	r4, r4, #9
 8001924:	46a4      	mov	ip, r4
 8001926:	44e1      	add	r9, ip
 8001928:	9c02      	ldr	r4, [sp, #8]
 800192a:	9e03      	ldr	r6, [sp, #12]
 800192c:	46a4      	mov	ip, r4
 800192e:	9d05      	ldr	r5, [sp, #20]
 8001930:	4466      	add	r6, ip
 8001932:	428e      	cmp	r6, r1
 8001934:	4189      	sbcs	r1, r1
 8001936:	46ac      	mov	ip, r5
 8001938:	0412      	lsls	r2, r2, #16
 800193a:	043c      	lsls	r4, r7, #16
 800193c:	0c12      	lsrs	r2, r2, #16
 800193e:	18a2      	adds	r2, r4, r2
 8001940:	4462      	add	r2, ip
 8001942:	4249      	negs	r1, r1
 8001944:	1854      	adds	r4, r2, r1
 8001946:	4446      	add	r6, r8
 8001948:	46a4      	mov	ip, r4
 800194a:	4546      	cmp	r6, r8
 800194c:	41a4      	sbcs	r4, r4
 800194e:	4682      	mov	sl, r0
 8001950:	4264      	negs	r4, r4
 8001952:	46a0      	mov	r8, r4
 8001954:	42aa      	cmp	r2, r5
 8001956:	4192      	sbcs	r2, r2
 8001958:	458c      	cmp	ip, r1
 800195a:	4189      	sbcs	r1, r1
 800195c:	44e2      	add	sl, ip
 800195e:	44d0      	add	r8, sl
 8001960:	4249      	negs	r1, r1
 8001962:	4252      	negs	r2, r2
 8001964:	430a      	orrs	r2, r1
 8001966:	45a0      	cmp	r8, r4
 8001968:	41a4      	sbcs	r4, r4
 800196a:	4582      	cmp	sl, r0
 800196c:	4189      	sbcs	r1, r1
 800196e:	4264      	negs	r4, r4
 8001970:	4249      	negs	r1, r1
 8001972:	430c      	orrs	r4, r1
 8001974:	4641      	mov	r1, r8
 8001976:	0c3f      	lsrs	r7, r7, #16
 8001978:	19d2      	adds	r2, r2, r7
 800197a:	1912      	adds	r2, r2, r4
 800197c:	0dcc      	lsrs	r4, r1, #23
 800197e:	9904      	ldr	r1, [sp, #16]
 8001980:	0270      	lsls	r0, r6, #9
 8001982:	4308      	orrs	r0, r1
 8001984:	1e41      	subs	r1, r0, #1
 8001986:	4188      	sbcs	r0, r1
 8001988:	4641      	mov	r1, r8
 800198a:	444a      	add	r2, r9
 800198c:	0df6      	lsrs	r6, r6, #23
 800198e:	0252      	lsls	r2, r2, #9
 8001990:	4330      	orrs	r0, r6
 8001992:	0249      	lsls	r1, r1, #9
 8001994:	4314      	orrs	r4, r2
 8001996:	4308      	orrs	r0, r1
 8001998:	01d2      	lsls	r2, r2, #7
 800199a:	d535      	bpl.n	8001a08 <__aeabi_dmul+0x514>
 800199c:	2201      	movs	r2, #1
 800199e:	0843      	lsrs	r3, r0, #1
 80019a0:	4002      	ands	r2, r0
 80019a2:	4313      	orrs	r3, r2
 80019a4:	07e0      	lsls	r0, r4, #31
 80019a6:	4318      	orrs	r0, r3
 80019a8:	0864      	lsrs	r4, r4, #1
 80019aa:	e634      	b.n	8001616 <__aeabi_dmul+0x122>
 80019ac:	9b00      	ldr	r3, [sp, #0]
 80019ae:	46a2      	mov	sl, r4
 80019b0:	469b      	mov	fp, r3
 80019b2:	4681      	mov	r9, r0
 80019b4:	2480      	movs	r4, #128	@ 0x80
 80019b6:	4653      	mov	r3, sl
 80019b8:	0324      	lsls	r4, r4, #12
 80019ba:	431c      	orrs	r4, r3
 80019bc:	0324      	lsls	r4, r4, #12
 80019be:	464a      	mov	r2, r9
 80019c0:	4b2e      	ldr	r3, [pc, #184]	@ (8001a7c <__aeabi_dmul+0x588>)
 80019c2:	0b24      	lsrs	r4, r4, #12
 80019c4:	e5ec      	b.n	80015a0 <__aeabi_dmul+0xac>
 80019c6:	f000 f901 	bl	8001bcc <__clzsi2>
 80019ca:	2315      	movs	r3, #21
 80019cc:	469c      	mov	ip, r3
 80019ce:	4484      	add	ip, r0
 80019d0:	0002      	movs	r2, r0
 80019d2:	4663      	mov	r3, ip
 80019d4:	3220      	adds	r2, #32
 80019d6:	2b1c      	cmp	r3, #28
 80019d8:	dc00      	bgt.n	80019dc <__aeabi_dmul+0x4e8>
 80019da:	e684      	b.n	80016e6 <__aeabi_dmul+0x1f2>
 80019dc:	2300      	movs	r3, #0
 80019de:	4699      	mov	r9, r3
 80019e0:	0023      	movs	r3, r4
 80019e2:	3808      	subs	r0, #8
 80019e4:	4083      	lsls	r3, r0
 80019e6:	469a      	mov	sl, r3
 80019e8:	e68e      	b.n	8001708 <__aeabi_dmul+0x214>
 80019ea:	f000 f8ef 	bl	8001bcc <__clzsi2>
 80019ee:	0002      	movs	r2, r0
 80019f0:	0003      	movs	r3, r0
 80019f2:	3215      	adds	r2, #21
 80019f4:	3320      	adds	r3, #32
 80019f6:	2a1c      	cmp	r2, #28
 80019f8:	dc00      	bgt.n	80019fc <__aeabi_dmul+0x508>
 80019fa:	e64e      	b.n	800169a <__aeabi_dmul+0x1a6>
 80019fc:	0002      	movs	r2, r0
 80019fe:	0034      	movs	r4, r6
 8001a00:	3a08      	subs	r2, #8
 8001a02:	2000      	movs	r0, #0
 8001a04:	4094      	lsls	r4, r2
 8001a06:	e652      	b.n	80016ae <__aeabi_dmul+0x1ba>
 8001a08:	9301      	str	r3, [sp, #4]
 8001a0a:	e604      	b.n	8001616 <__aeabi_dmul+0x122>
 8001a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8001a80 <__aeabi_dmul+0x58c>)
 8001a0e:	0021      	movs	r1, r4
 8001a10:	469c      	mov	ip, r3
 8001a12:	0003      	movs	r3, r0
 8001a14:	9d01      	ldr	r5, [sp, #4]
 8001a16:	40d3      	lsrs	r3, r2
 8001a18:	4465      	add	r5, ip
 8001a1a:	40a9      	lsls	r1, r5
 8001a1c:	4319      	orrs	r1, r3
 8001a1e:	0003      	movs	r3, r0
 8001a20:	40ab      	lsls	r3, r5
 8001a22:	1e58      	subs	r0, r3, #1
 8001a24:	4183      	sbcs	r3, r0
 8001a26:	4319      	orrs	r1, r3
 8001a28:	0008      	movs	r0, r1
 8001a2a:	40d4      	lsrs	r4, r2
 8001a2c:	074b      	lsls	r3, r1, #29
 8001a2e:	d009      	beq.n	8001a44 <__aeabi_dmul+0x550>
 8001a30:	230f      	movs	r3, #15
 8001a32:	400b      	ands	r3, r1
 8001a34:	2b04      	cmp	r3, #4
 8001a36:	d005      	beq.n	8001a44 <__aeabi_dmul+0x550>
 8001a38:	1d0b      	adds	r3, r1, #4
 8001a3a:	428b      	cmp	r3, r1
 8001a3c:	4180      	sbcs	r0, r0
 8001a3e:	4240      	negs	r0, r0
 8001a40:	1824      	adds	r4, r4, r0
 8001a42:	0018      	movs	r0, r3
 8001a44:	0223      	lsls	r3, r4, #8
 8001a46:	d400      	bmi.n	8001a4a <__aeabi_dmul+0x556>
 8001a48:	e6d6      	b.n	80017f8 <__aeabi_dmul+0x304>
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	2400      	movs	r4, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	e5a6      	b.n	80015a0 <__aeabi_dmul+0xac>
 8001a52:	290f      	cmp	r1, #15
 8001a54:	d1aa      	bne.n	80019ac <__aeabi_dmul+0x4b8>
 8001a56:	2380      	movs	r3, #128	@ 0x80
 8001a58:	4652      	mov	r2, sl
 8001a5a:	031b      	lsls	r3, r3, #12
 8001a5c:	421a      	tst	r2, r3
 8001a5e:	d0a9      	beq.n	80019b4 <__aeabi_dmul+0x4c0>
 8001a60:	421c      	tst	r4, r3
 8001a62:	d1a7      	bne.n	80019b4 <__aeabi_dmul+0x4c0>
 8001a64:	431c      	orrs	r4, r3
 8001a66:	9b00      	ldr	r3, [sp, #0]
 8001a68:	0002      	movs	r2, r0
 8001a6a:	469b      	mov	fp, r3
 8001a6c:	4b03      	ldr	r3, [pc, #12]	@ (8001a7c <__aeabi_dmul+0x588>)
 8001a6e:	e597      	b.n	80015a0 <__aeabi_dmul+0xac>
 8001a70:	2400      	movs	r4, #0
 8001a72:	e6c1      	b.n	80017f8 <__aeabi_dmul+0x304>
 8001a74:	2400      	movs	r4, #0
 8001a76:	4b01      	ldr	r3, [pc, #4]	@ (8001a7c <__aeabi_dmul+0x588>)
 8001a78:	0022      	movs	r2, r4
 8001a7a:	e591      	b.n	80015a0 <__aeabi_dmul+0xac>
 8001a7c:	000007ff 	.word	0x000007ff
 8001a80:	0000041e 	.word	0x0000041e

08001a84 <__aeabi_d2iz>:
 8001a84:	000b      	movs	r3, r1
 8001a86:	0002      	movs	r2, r0
 8001a88:	b570      	push	{r4, r5, r6, lr}
 8001a8a:	4d16      	ldr	r5, [pc, #88]	@ (8001ae4 <__aeabi_d2iz+0x60>)
 8001a8c:	030c      	lsls	r4, r1, #12
 8001a8e:	b082      	sub	sp, #8
 8001a90:	0049      	lsls	r1, r1, #1
 8001a92:	2000      	movs	r0, #0
 8001a94:	9200      	str	r2, [sp, #0]
 8001a96:	9301      	str	r3, [sp, #4]
 8001a98:	0b24      	lsrs	r4, r4, #12
 8001a9a:	0d49      	lsrs	r1, r1, #21
 8001a9c:	0fde      	lsrs	r6, r3, #31
 8001a9e:	42a9      	cmp	r1, r5
 8001aa0:	dd04      	ble.n	8001aac <__aeabi_d2iz+0x28>
 8001aa2:	4811      	ldr	r0, [pc, #68]	@ (8001ae8 <__aeabi_d2iz+0x64>)
 8001aa4:	4281      	cmp	r1, r0
 8001aa6:	dd03      	ble.n	8001ab0 <__aeabi_d2iz+0x2c>
 8001aa8:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <__aeabi_d2iz+0x68>)
 8001aaa:	18f0      	adds	r0, r6, r3
 8001aac:	b002      	add	sp, #8
 8001aae:	bd70      	pop	{r4, r5, r6, pc}
 8001ab0:	2080      	movs	r0, #128	@ 0x80
 8001ab2:	0340      	lsls	r0, r0, #13
 8001ab4:	4320      	orrs	r0, r4
 8001ab6:	4c0e      	ldr	r4, [pc, #56]	@ (8001af0 <__aeabi_d2iz+0x6c>)
 8001ab8:	1a64      	subs	r4, r4, r1
 8001aba:	2c1f      	cmp	r4, #31
 8001abc:	dd08      	ble.n	8001ad0 <__aeabi_d2iz+0x4c>
 8001abe:	4b0d      	ldr	r3, [pc, #52]	@ (8001af4 <__aeabi_d2iz+0x70>)
 8001ac0:	1a5b      	subs	r3, r3, r1
 8001ac2:	40d8      	lsrs	r0, r3
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	4258      	negs	r0, r3
 8001ac8:	2e00      	cmp	r6, #0
 8001aca:	d1ef      	bne.n	8001aac <__aeabi_d2iz+0x28>
 8001acc:	0018      	movs	r0, r3
 8001ace:	e7ed      	b.n	8001aac <__aeabi_d2iz+0x28>
 8001ad0:	4b09      	ldr	r3, [pc, #36]	@ (8001af8 <__aeabi_d2iz+0x74>)
 8001ad2:	9a00      	ldr	r2, [sp, #0]
 8001ad4:	469c      	mov	ip, r3
 8001ad6:	0003      	movs	r3, r0
 8001ad8:	4461      	add	r1, ip
 8001ada:	408b      	lsls	r3, r1
 8001adc:	40e2      	lsrs	r2, r4
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	e7f1      	b.n	8001ac6 <__aeabi_d2iz+0x42>
 8001ae2:	46c0      	nop			@ (mov r8, r8)
 8001ae4:	000003fe 	.word	0x000003fe
 8001ae8:	0000041d 	.word	0x0000041d
 8001aec:	7fffffff 	.word	0x7fffffff
 8001af0:	00000433 	.word	0x00000433
 8001af4:	00000413 	.word	0x00000413
 8001af8:	fffffbed 	.word	0xfffffbed

08001afc <__aeabi_i2d>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	2800      	cmp	r0, #0
 8001b00:	d016      	beq.n	8001b30 <__aeabi_i2d+0x34>
 8001b02:	17c3      	asrs	r3, r0, #31
 8001b04:	18c5      	adds	r5, r0, r3
 8001b06:	405d      	eors	r5, r3
 8001b08:	0fc4      	lsrs	r4, r0, #31
 8001b0a:	0028      	movs	r0, r5
 8001b0c:	f000 f85e 	bl	8001bcc <__clzsi2>
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <__aeabi_i2d+0x58>)
 8001b12:	1a1b      	subs	r3, r3, r0
 8001b14:	055b      	lsls	r3, r3, #21
 8001b16:	0d5b      	lsrs	r3, r3, #21
 8001b18:	280a      	cmp	r0, #10
 8001b1a:	dc14      	bgt.n	8001b46 <__aeabi_i2d+0x4a>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	002e      	movs	r6, r5
 8001b20:	3215      	adds	r2, #21
 8001b22:	4096      	lsls	r6, r2
 8001b24:	220b      	movs	r2, #11
 8001b26:	1a12      	subs	r2, r2, r0
 8001b28:	40d5      	lsrs	r5, r2
 8001b2a:	032d      	lsls	r5, r5, #12
 8001b2c:	0b2d      	lsrs	r5, r5, #12
 8001b2e:	e003      	b.n	8001b38 <__aeabi_i2d+0x3c>
 8001b30:	2400      	movs	r4, #0
 8001b32:	2300      	movs	r3, #0
 8001b34:	2500      	movs	r5, #0
 8001b36:	2600      	movs	r6, #0
 8001b38:	051b      	lsls	r3, r3, #20
 8001b3a:	432b      	orrs	r3, r5
 8001b3c:	07e4      	lsls	r4, r4, #31
 8001b3e:	4323      	orrs	r3, r4
 8001b40:	0030      	movs	r0, r6
 8001b42:	0019      	movs	r1, r3
 8001b44:	bd70      	pop	{r4, r5, r6, pc}
 8001b46:	380b      	subs	r0, #11
 8001b48:	4085      	lsls	r5, r0
 8001b4a:	032d      	lsls	r5, r5, #12
 8001b4c:	2600      	movs	r6, #0
 8001b4e:	0b2d      	lsrs	r5, r5, #12
 8001b50:	e7f2      	b.n	8001b38 <__aeabi_i2d+0x3c>
 8001b52:	46c0      	nop			@ (mov r8, r8)
 8001b54:	0000041e 	.word	0x0000041e

08001b58 <__aeabi_cfrcmple>:
 8001b58:	4684      	mov	ip, r0
 8001b5a:	0008      	movs	r0, r1
 8001b5c:	4661      	mov	r1, ip
 8001b5e:	e7ff      	b.n	8001b60 <__aeabi_cfcmpeq>

08001b60 <__aeabi_cfcmpeq>:
 8001b60:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001b62:	f000 f8c9 	bl	8001cf8 <__lesf2>
 8001b66:	2800      	cmp	r0, #0
 8001b68:	d401      	bmi.n	8001b6e <__aeabi_cfcmpeq+0xe>
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	42c8      	cmn	r0, r1
 8001b6e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08001b70 <__aeabi_fcmpeq>:
 8001b70:	b510      	push	{r4, lr}
 8001b72:	f000 f849 	bl	8001c08 <__eqsf2>
 8001b76:	4240      	negs	r0, r0
 8001b78:	3001      	adds	r0, #1
 8001b7a:	bd10      	pop	{r4, pc}

08001b7c <__aeabi_fcmplt>:
 8001b7c:	b510      	push	{r4, lr}
 8001b7e:	f000 f8bb 	bl	8001cf8 <__lesf2>
 8001b82:	2800      	cmp	r0, #0
 8001b84:	db01      	blt.n	8001b8a <__aeabi_fcmplt+0xe>
 8001b86:	2000      	movs	r0, #0
 8001b88:	bd10      	pop	{r4, pc}
 8001b8a:	2001      	movs	r0, #1
 8001b8c:	bd10      	pop	{r4, pc}
 8001b8e:	46c0      	nop			@ (mov r8, r8)

08001b90 <__aeabi_fcmple>:
 8001b90:	b510      	push	{r4, lr}
 8001b92:	f000 f8b1 	bl	8001cf8 <__lesf2>
 8001b96:	2800      	cmp	r0, #0
 8001b98:	dd01      	ble.n	8001b9e <__aeabi_fcmple+0xe>
 8001b9a:	2000      	movs	r0, #0
 8001b9c:	bd10      	pop	{r4, pc}
 8001b9e:	2001      	movs	r0, #1
 8001ba0:	bd10      	pop	{r4, pc}
 8001ba2:	46c0      	nop			@ (mov r8, r8)

08001ba4 <__aeabi_fcmpgt>:
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	f000 f857 	bl	8001c58 <__gesf2>
 8001baa:	2800      	cmp	r0, #0
 8001bac:	dc01      	bgt.n	8001bb2 <__aeabi_fcmpgt+0xe>
 8001bae:	2000      	movs	r0, #0
 8001bb0:	bd10      	pop	{r4, pc}
 8001bb2:	2001      	movs	r0, #1
 8001bb4:	bd10      	pop	{r4, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)

08001bb8 <__aeabi_fcmpge>:
 8001bb8:	b510      	push	{r4, lr}
 8001bba:	f000 f84d 	bl	8001c58 <__gesf2>
 8001bbe:	2800      	cmp	r0, #0
 8001bc0:	da01      	bge.n	8001bc6 <__aeabi_fcmpge+0xe>
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	bd10      	pop	{r4, pc}
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	bd10      	pop	{r4, pc}
 8001bca:	46c0      	nop			@ (mov r8, r8)

08001bcc <__clzsi2>:
 8001bcc:	211c      	movs	r1, #28
 8001bce:	2301      	movs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	4298      	cmp	r0, r3
 8001bd4:	d301      	bcc.n	8001bda <__clzsi2+0xe>
 8001bd6:	0c00      	lsrs	r0, r0, #16
 8001bd8:	3910      	subs	r1, #16
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	4298      	cmp	r0, r3
 8001bde:	d301      	bcc.n	8001be4 <__clzsi2+0x18>
 8001be0:	0a00      	lsrs	r0, r0, #8
 8001be2:	3908      	subs	r1, #8
 8001be4:	091b      	lsrs	r3, r3, #4
 8001be6:	4298      	cmp	r0, r3
 8001be8:	d301      	bcc.n	8001bee <__clzsi2+0x22>
 8001bea:	0900      	lsrs	r0, r0, #4
 8001bec:	3904      	subs	r1, #4
 8001bee:	a202      	add	r2, pc, #8	@ (adr r2, 8001bf8 <__clzsi2+0x2c>)
 8001bf0:	5c10      	ldrb	r0, [r2, r0]
 8001bf2:	1840      	adds	r0, r0, r1
 8001bf4:	4770      	bx	lr
 8001bf6:	46c0      	nop			@ (mov r8, r8)
 8001bf8:	02020304 	.word	0x02020304
 8001bfc:	01010101 	.word	0x01010101
	...

08001c08 <__eqsf2>:
 8001c08:	b570      	push	{r4, r5, r6, lr}
 8001c0a:	0042      	lsls	r2, r0, #1
 8001c0c:	024e      	lsls	r6, r1, #9
 8001c0e:	004c      	lsls	r4, r1, #1
 8001c10:	0245      	lsls	r5, r0, #9
 8001c12:	0a6d      	lsrs	r5, r5, #9
 8001c14:	0e12      	lsrs	r2, r2, #24
 8001c16:	0fc3      	lsrs	r3, r0, #31
 8001c18:	0a76      	lsrs	r6, r6, #9
 8001c1a:	0e24      	lsrs	r4, r4, #24
 8001c1c:	0fc9      	lsrs	r1, r1, #31
 8001c1e:	2aff      	cmp	r2, #255	@ 0xff
 8001c20:	d010      	beq.n	8001c44 <__eqsf2+0x3c>
 8001c22:	2cff      	cmp	r4, #255	@ 0xff
 8001c24:	d00c      	beq.n	8001c40 <__eqsf2+0x38>
 8001c26:	2001      	movs	r0, #1
 8001c28:	42a2      	cmp	r2, r4
 8001c2a:	d10a      	bne.n	8001c42 <__eqsf2+0x3a>
 8001c2c:	42b5      	cmp	r5, r6
 8001c2e:	d108      	bne.n	8001c42 <__eqsf2+0x3a>
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d00f      	beq.n	8001c54 <__eqsf2+0x4c>
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	d104      	bne.n	8001c42 <__eqsf2+0x3a>
 8001c38:	0028      	movs	r0, r5
 8001c3a:	1e43      	subs	r3, r0, #1
 8001c3c:	4198      	sbcs	r0, r3
 8001c3e:	e000      	b.n	8001c42 <__eqsf2+0x3a>
 8001c40:	2001      	movs	r0, #1
 8001c42:	bd70      	pop	{r4, r5, r6, pc}
 8001c44:	2001      	movs	r0, #1
 8001c46:	2cff      	cmp	r4, #255	@ 0xff
 8001c48:	d1fb      	bne.n	8001c42 <__eqsf2+0x3a>
 8001c4a:	4335      	orrs	r5, r6
 8001c4c:	d1f9      	bne.n	8001c42 <__eqsf2+0x3a>
 8001c4e:	404b      	eors	r3, r1
 8001c50:	0018      	movs	r0, r3
 8001c52:	e7f6      	b.n	8001c42 <__eqsf2+0x3a>
 8001c54:	2000      	movs	r0, #0
 8001c56:	e7f4      	b.n	8001c42 <__eqsf2+0x3a>

08001c58 <__gesf2>:
 8001c58:	b530      	push	{r4, r5, lr}
 8001c5a:	0042      	lsls	r2, r0, #1
 8001c5c:	0244      	lsls	r4, r0, #9
 8001c5e:	024d      	lsls	r5, r1, #9
 8001c60:	0fc3      	lsrs	r3, r0, #31
 8001c62:	0048      	lsls	r0, r1, #1
 8001c64:	0a64      	lsrs	r4, r4, #9
 8001c66:	0e12      	lsrs	r2, r2, #24
 8001c68:	0a6d      	lsrs	r5, r5, #9
 8001c6a:	0e00      	lsrs	r0, r0, #24
 8001c6c:	0fc9      	lsrs	r1, r1, #31
 8001c6e:	2aff      	cmp	r2, #255	@ 0xff
 8001c70:	d019      	beq.n	8001ca6 <__gesf2+0x4e>
 8001c72:	28ff      	cmp	r0, #255	@ 0xff
 8001c74:	d00b      	beq.n	8001c8e <__gesf2+0x36>
 8001c76:	2a00      	cmp	r2, #0
 8001c78:	d11e      	bne.n	8001cb8 <__gesf2+0x60>
 8001c7a:	2800      	cmp	r0, #0
 8001c7c:	d10b      	bne.n	8001c96 <__gesf2+0x3e>
 8001c7e:	2d00      	cmp	r5, #0
 8001c80:	d027      	beq.n	8001cd2 <__gesf2+0x7a>
 8001c82:	2c00      	cmp	r4, #0
 8001c84:	d134      	bne.n	8001cf0 <__gesf2+0x98>
 8001c86:	2900      	cmp	r1, #0
 8001c88:	d02f      	beq.n	8001cea <__gesf2+0x92>
 8001c8a:	0008      	movs	r0, r1
 8001c8c:	bd30      	pop	{r4, r5, pc}
 8001c8e:	2d00      	cmp	r5, #0
 8001c90:	d128      	bne.n	8001ce4 <__gesf2+0x8c>
 8001c92:	2a00      	cmp	r2, #0
 8001c94:	d101      	bne.n	8001c9a <__gesf2+0x42>
 8001c96:	2c00      	cmp	r4, #0
 8001c98:	d0f5      	beq.n	8001c86 <__gesf2+0x2e>
 8001c9a:	428b      	cmp	r3, r1
 8001c9c:	d107      	bne.n	8001cae <__gesf2+0x56>
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d023      	beq.n	8001cea <__gesf2+0x92>
 8001ca2:	0018      	movs	r0, r3
 8001ca4:	e7f2      	b.n	8001c8c <__gesf2+0x34>
 8001ca6:	2c00      	cmp	r4, #0
 8001ca8:	d11c      	bne.n	8001ce4 <__gesf2+0x8c>
 8001caa:	28ff      	cmp	r0, #255	@ 0xff
 8001cac:	d014      	beq.n	8001cd8 <__gesf2+0x80>
 8001cae:	1e58      	subs	r0, r3, #1
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	4018      	ands	r0, r3
 8001cb4:	3801      	subs	r0, #1
 8001cb6:	e7e9      	b.n	8001c8c <__gesf2+0x34>
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d0f8      	beq.n	8001cae <__gesf2+0x56>
 8001cbc:	428b      	cmp	r3, r1
 8001cbe:	d1f6      	bne.n	8001cae <__gesf2+0x56>
 8001cc0:	4282      	cmp	r2, r0
 8001cc2:	dcf4      	bgt.n	8001cae <__gesf2+0x56>
 8001cc4:	dbeb      	blt.n	8001c9e <__gesf2+0x46>
 8001cc6:	42ac      	cmp	r4, r5
 8001cc8:	d8f1      	bhi.n	8001cae <__gesf2+0x56>
 8001cca:	2000      	movs	r0, #0
 8001ccc:	42ac      	cmp	r4, r5
 8001cce:	d2dd      	bcs.n	8001c8c <__gesf2+0x34>
 8001cd0:	e7e5      	b.n	8001c9e <__gesf2+0x46>
 8001cd2:	2c00      	cmp	r4, #0
 8001cd4:	d0da      	beq.n	8001c8c <__gesf2+0x34>
 8001cd6:	e7ea      	b.n	8001cae <__gesf2+0x56>
 8001cd8:	2d00      	cmp	r5, #0
 8001cda:	d103      	bne.n	8001ce4 <__gesf2+0x8c>
 8001cdc:	428b      	cmp	r3, r1
 8001cde:	d1e6      	bne.n	8001cae <__gesf2+0x56>
 8001ce0:	2000      	movs	r0, #0
 8001ce2:	e7d3      	b.n	8001c8c <__gesf2+0x34>
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	4240      	negs	r0, r0
 8001ce8:	e7d0      	b.n	8001c8c <__gesf2+0x34>
 8001cea:	2001      	movs	r0, #1
 8001cec:	4240      	negs	r0, r0
 8001cee:	e7cd      	b.n	8001c8c <__gesf2+0x34>
 8001cf0:	428b      	cmp	r3, r1
 8001cf2:	d0e8      	beq.n	8001cc6 <__gesf2+0x6e>
 8001cf4:	e7db      	b.n	8001cae <__gesf2+0x56>
 8001cf6:	46c0      	nop			@ (mov r8, r8)

08001cf8 <__lesf2>:
 8001cf8:	b530      	push	{r4, r5, lr}
 8001cfa:	0042      	lsls	r2, r0, #1
 8001cfc:	0244      	lsls	r4, r0, #9
 8001cfe:	024d      	lsls	r5, r1, #9
 8001d00:	0fc3      	lsrs	r3, r0, #31
 8001d02:	0048      	lsls	r0, r1, #1
 8001d04:	0a64      	lsrs	r4, r4, #9
 8001d06:	0e12      	lsrs	r2, r2, #24
 8001d08:	0a6d      	lsrs	r5, r5, #9
 8001d0a:	0e00      	lsrs	r0, r0, #24
 8001d0c:	0fc9      	lsrs	r1, r1, #31
 8001d0e:	2aff      	cmp	r2, #255	@ 0xff
 8001d10:	d01a      	beq.n	8001d48 <__lesf2+0x50>
 8001d12:	28ff      	cmp	r0, #255	@ 0xff
 8001d14:	d00e      	beq.n	8001d34 <__lesf2+0x3c>
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d11e      	bne.n	8001d58 <__lesf2+0x60>
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	d10e      	bne.n	8001d3c <__lesf2+0x44>
 8001d1e:	2d00      	cmp	r5, #0
 8001d20:	d02a      	beq.n	8001d78 <__lesf2+0x80>
 8001d22:	2c00      	cmp	r4, #0
 8001d24:	d00c      	beq.n	8001d40 <__lesf2+0x48>
 8001d26:	428b      	cmp	r3, r1
 8001d28:	d01d      	beq.n	8001d66 <__lesf2+0x6e>
 8001d2a:	1e58      	subs	r0, r3, #1
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	4018      	ands	r0, r3
 8001d30:	3801      	subs	r0, #1
 8001d32:	e010      	b.n	8001d56 <__lesf2+0x5e>
 8001d34:	2d00      	cmp	r5, #0
 8001d36:	d10d      	bne.n	8001d54 <__lesf2+0x5c>
 8001d38:	2a00      	cmp	r2, #0
 8001d3a:	d120      	bne.n	8001d7e <__lesf2+0x86>
 8001d3c:	2c00      	cmp	r4, #0
 8001d3e:	d11e      	bne.n	8001d7e <__lesf2+0x86>
 8001d40:	2900      	cmp	r1, #0
 8001d42:	d023      	beq.n	8001d8c <__lesf2+0x94>
 8001d44:	0008      	movs	r0, r1
 8001d46:	e006      	b.n	8001d56 <__lesf2+0x5e>
 8001d48:	2c00      	cmp	r4, #0
 8001d4a:	d103      	bne.n	8001d54 <__lesf2+0x5c>
 8001d4c:	28ff      	cmp	r0, #255	@ 0xff
 8001d4e:	d1ec      	bne.n	8001d2a <__lesf2+0x32>
 8001d50:	2d00      	cmp	r5, #0
 8001d52:	d017      	beq.n	8001d84 <__lesf2+0x8c>
 8001d54:	2002      	movs	r0, #2
 8001d56:	bd30      	pop	{r4, r5, pc}
 8001d58:	2800      	cmp	r0, #0
 8001d5a:	d0e6      	beq.n	8001d2a <__lesf2+0x32>
 8001d5c:	428b      	cmp	r3, r1
 8001d5e:	d1e4      	bne.n	8001d2a <__lesf2+0x32>
 8001d60:	4282      	cmp	r2, r0
 8001d62:	dce2      	bgt.n	8001d2a <__lesf2+0x32>
 8001d64:	db04      	blt.n	8001d70 <__lesf2+0x78>
 8001d66:	42ac      	cmp	r4, r5
 8001d68:	d8df      	bhi.n	8001d2a <__lesf2+0x32>
 8001d6a:	2000      	movs	r0, #0
 8001d6c:	42ac      	cmp	r4, r5
 8001d6e:	d2f2      	bcs.n	8001d56 <__lesf2+0x5e>
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00b      	beq.n	8001d8c <__lesf2+0x94>
 8001d74:	0018      	movs	r0, r3
 8001d76:	e7ee      	b.n	8001d56 <__lesf2+0x5e>
 8001d78:	2c00      	cmp	r4, #0
 8001d7a:	d0ec      	beq.n	8001d56 <__lesf2+0x5e>
 8001d7c:	e7d5      	b.n	8001d2a <__lesf2+0x32>
 8001d7e:	428b      	cmp	r3, r1
 8001d80:	d1d3      	bne.n	8001d2a <__lesf2+0x32>
 8001d82:	e7f5      	b.n	8001d70 <__lesf2+0x78>
 8001d84:	2000      	movs	r0, #0
 8001d86:	428b      	cmp	r3, r1
 8001d88:	d0e5      	beq.n	8001d56 <__lesf2+0x5e>
 8001d8a:	e7ce      	b.n	8001d2a <__lesf2+0x32>
 8001d8c:	2001      	movs	r0, #1
 8001d8e:	4240      	negs	r0, r0
 8001d90:	e7e1      	b.n	8001d56 <__lesf2+0x5e>
 8001d92:	46c0      	nop			@ (mov r8, r8)

08001d94 <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d94:	480c      	ldr	r0, [pc, #48]	@ (8001dc8 <MX_USART2_UART_Init+0x34>)
 8001d96:	4b0d      	ldr	r3, [pc, #52]	@ (8001dcc <MX_USART2_UART_Init+0x38>)
{
 8001d98:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001d9a:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001d9c:	23e1      	movs	r3, #225	@ 0xe1
 8001d9e:	025b      	lsls	r3, r3, #9
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da0:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001da2:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da4:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001da6:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001da8:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001daa:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001dac:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dae:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001db0:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001db2:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001db4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001db6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001db8:	f002 f950 	bl	800405c <HAL_UART_Init>
 8001dbc:	2800      	cmp	r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_USART2_UART_Init+0x30>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dc2:	e7fe      	b.n	8001dc2 <MX_USART2_UART_Init+0x2e>
}
 8001dc4:	bd10      	pop	{r4, pc}
 8001dc6:	46c0      	nop			@ (mov r8, r8)
 8001dc8:	200000a4 	.word	0x200000a4
 8001dcc:	40004400 	.word	0x40004400

08001dd0 <SystemClock_Config>:
{
 8001dd0:	b500      	push	{lr}
 8001dd2:	b08d      	sub	sp, #52	@ 0x34
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001dd4:	2218      	movs	r2, #24
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	a806      	add	r0, sp, #24
 8001dda:	f002 f97b 	bl	80040d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dde:	2214      	movs	r2, #20
 8001de0:	2100      	movs	r1, #0
 8001de2:	4668      	mov	r0, sp
 8001de4:	f002 f976 	bl	80040d4 <memset>
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001de8:	2107      	movs	r1, #7
 8001dea:	4a14      	ldr	r2, [pc, #80]	@ (8001e3c <SystemClock_Config+0x6c>)
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dec:	a805      	add	r0, sp, #20
  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8001dee:	6813      	ldr	r3, [r2, #0]
 8001df0:	438b      	bics	r3, r1
 8001df2:	3906      	subs	r1, #6
 8001df4:	430b      	orrs	r3, r1
 8001df6:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	33fe      	adds	r3, #254	@ 0xfe
 8001dfe:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e04:	3340      	adds	r3, #64	@ 0x40
 8001e06:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e08:	f001 f852 	bl	8002eb0 <HAL_RCC_OscConfig>
 8001e0c:	2800      	cmp	r0, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0x44>
 8001e10:	b672      	cpsid	i
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <SystemClock_Config+0x42>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e14:	2207      	movs	r2, #7
 8001e16:	2300      	movs	r3, #0
 8001e18:	9200      	str	r2, [sp, #0]
 8001e1a:	9301      	str	r3, [sp, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8001e20:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e22:	2101      	movs	r1, #1
 8001e24:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e26:	9202      	str	r2, [sp, #8]
 8001e28:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001e2a:	f001 f9b7 	bl	800319c <HAL_RCC_ClockConfig>
 8001e2e:	2800      	cmp	r0, #0
 8001e30:	d001      	beq.n	8001e36 <SystemClock_Config+0x66>
 8001e32:	b672      	cpsid	i
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <SystemClock_Config+0x64>
}
 8001e36:	b00d      	add	sp, #52	@ 0x34
 8001e38:	bd00      	pop	{pc}
 8001e3a:	46c0      	nop			@ (mov r8, r8)
 8001e3c:	40022000 	.word	0x40022000

08001e40 <main>:
{
 8001e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e42:	46c6      	mov	lr, r8
 8001e44:	b500      	push	{lr}
 8001e46:	b08a      	sub	sp, #40	@ 0x28
  HAL_Init();
 8001e48:	f000 fbb4 	bl	80025b4 <HAL_Init>
  SystemClock_Config();
 8001e4c:	f7ff ffc0 	bl	8001dd0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	220c      	movs	r2, #12
 8001e52:	2100      	movs	r1, #0
 8001e54:	a806      	add	r0, sp, #24
 8001e56:	f002 f93d 	bl	80040d4 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	2304      	movs	r3, #4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5c:	2501      	movs	r5, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	4c63      	ldr	r4, [pc, #396]	@ (8001fec <main+0x1ac>)
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 8001e60:	4863      	ldr	r0, [pc, #396]	@ (8001ff0 <main+0x1b0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e62:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 8001e64:	a904      	add	r1, sp, #16
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e66:	431a      	orrs	r2, r3
 8001e68:	6362      	str	r2, [r4, #52]	@ 0x34
 8001e6a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
  htim16.Instance = TIM16;
 8001e6c:	4f61      	ldr	r7, [pc, #388]	@ (8001ff4 <main+0x1b4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e6e:	4013      	ands	r3, r2
 8001e70:	9301      	str	r3, [sp, #4]
 8001e72:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e74:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e76:	432b      	orrs	r3, r5
 8001e78:	6363      	str	r3, [r4, #52]	@ 0x34
 8001e7a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001e7c:	402b      	ands	r3, r5
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e82:	2302      	movs	r3, #2
 8001e84:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001e86:	431a      	orrs	r2, r3
 8001e88:	6362      	str	r2, [r4, #52]	@ 0x34
 8001e8a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001e8c:	4013      	ands	r3, r2
  GPIO_InitStruct.Pin = INPUT_Pin;
 8001e8e:	2280      	movs	r2, #128	@ 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e90:	9303      	str	r3, [sp, #12]
 8001e92:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Pin = INPUT_Pin;
 8001e94:	4b58      	ldr	r3, [pc, #352]	@ (8001ff8 <main+0x1b8>)
 8001e96:	0212      	lsls	r2, r2, #8
 8001e98:	9204      	str	r2, [sp, #16]
 8001e9a:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(INPUT_GPIO_Port, &GPIO_InitStruct);
 8001e9c:	f000 fe46 	bl	8002b2c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MODE_Pin;
 8001ea0:	2280      	movs	r2, #128	@ 0x80
 8001ea2:	4b55      	ldr	r3, [pc, #340]	@ (8001ff8 <main+0x1b8>)
 8001ea4:	0052      	lsls	r2, r2, #1
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001ea6:	4855      	ldr	r0, [pc, #340]	@ (8001ffc <main+0x1bc>)
 8001ea8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = MODE_Pin;
 8001eaa:	9204      	str	r2, [sp, #16]
 8001eac:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001eae:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8001eb0:	f000 fe3c 	bl	8002b2c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	2007      	movs	r0, #7
 8001eba:	f000 fbbb 	bl	8002634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8001ebe:	2007      	movs	r0, #7
 8001ec0:	f000 fbe2 	bl	8002688 <HAL_NVIC_EnableIRQ>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ec6:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ec8:	432b      	orrs	r3, r5
 8001eca:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001ecc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ece:	2100      	movs	r1, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed0:	402b      	ands	r3, r5
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ed2:	2009      	movs	r0, #9
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ed4:	9304      	str	r3, [sp, #16]
 8001ed6:	9b04      	ldr	r3, [sp, #16]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001ed8:	f000 fbac 	bl	8002634 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001edc:	2009      	movs	r0, #9
 8001ede:	f000 fbd3 	bl	8002688 <HAL_NVIC_EnableIRQ>
  MX_USART2_UART_Init();
 8001ee2:	f7ff ff57 	bl	8001d94 <MX_USART2_UART_Init>
  htim16.Init.Prescaler = 1-1;
 8001ee6:	2300      	movs	r3, #0
  htim16.Instance = TIM16;
 8001ee8:	4c45      	ldr	r4, [pc, #276]	@ (8002000 <main+0x1c0>)
  htim16.Init.Period = 48000-1;
 8001eea:	4a46      	ldr	r2, [pc, #280]	@ (8002004 <main+0x1c4>)
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001eec:	0020      	movs	r0, r4
  htim16.Instance = TIM16;
 8001eee:	6027      	str	r7, [r4, #0]
  htim16.Init.Prescaler = 1-1;
 8001ef0:	6063      	str	r3, [r4, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ef2:	60a3      	str	r3, [r4, #8]
  htim16.Init.Period = 48000-1;
 8001ef4:	60e2      	str	r2, [r4, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ef6:	6123      	str	r3, [r4, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ef8:	6163      	str	r3, [r4, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001efc:	f001 fbb0 	bl	8003660 <HAL_TIM_Base_Init>
 8001f00:	1e06      	subs	r6, r0, #0
 8001f02:	d001      	beq.n	8001f08 <main+0xc8>
 8001f04:	b672      	cpsid	i
  while (1)
 8001f06:	e7fe      	b.n	8001f06 <main+0xc6>
  HAL_Delay(10); //for sake of safety
 8001f08:	200a      	movs	r0, #10
 8001f0a:	f000 fb71 	bl	80025f0 <HAL_Delay>
  if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 0) // single mode
 8001f0e:	2180      	movs	r1, #128	@ 0x80
 8001f10:	483a      	ldr	r0, [pc, #232]	@ (8001ffc <main+0x1bc>)
 8001f12:	0049      	lsls	r1, r1, #1
 8001f14:	f000 ffac 	bl	8002e70 <HAL_GPIO_ReadPin>
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	d133      	bne.n	8001f84 <main+0x144>
	  MAX_TIMER_OVERRUNS = (uint16_t)((TIMER_TIME_SINGLE / 1000.0f) / (((TIM16->PSC + 1.0f) * (TIM16->ARR + 1.0f)) / 48000000.0f));
 8001f1c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f20:	4698      	mov	r8, r3
 8001f22:	f7fe ff41 	bl	8000da8 <__aeabi_ui2f>
 8001f26:	21fe      	movs	r1, #254	@ 0xfe
 8001f28:	0589      	lsls	r1, r1, #22
 8001f2a:	f7fe f991 	bl	8000250 <__aeabi_fadd>
 8001f2e:	1c06      	adds	r6, r0, #0
 8001f30:	4640      	mov	r0, r8
 8001f32:	f7fe ff39 	bl	8000da8 <__aeabi_ui2f>
 8001f36:	21fe      	movs	r1, #254	@ 0xfe
 8001f38:	0589      	lsls	r1, r1, #22
 8001f3a:	f7fe f989 	bl	8000250 <__aeabi_fadd>
 8001f3e:	1c01      	adds	r1, r0, #0
 8001f40:	1c30      	adds	r0, r6, #0
 8001f42:	f7fe fc2f 	bl	80007a4 <__aeabi_fmul>
 8001f46:	4930      	ldr	r1, [pc, #192]	@ (8002008 <main+0x1c8>)
 8001f48:	f7fe fb0c 	bl	8000564 <__aeabi_fdiv>
 8001f4c:	1c01      	adds	r1, r0, #0
 8001f4e:	482f      	ldr	r0, [pc, #188]	@ (800200c <main+0x1cc>)
 8001f50:	f7fe fb08 	bl	8000564 <__aeabi_fdiv>
 8001f54:	f7fe f964 	bl	8000220 <__aeabi_f2uiz>
 8001f58:	4b2d      	ldr	r3, [pc, #180]	@ (8002010 <main+0x1d0>)
 8001f5a:	b280      	uxth	r0, r0
	  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
 8001f5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
	  MAX_TIMER_OVERRUNS = (uint16_t)((TIMER_TIME_SINGLE / 1000.0f) / (((TIM16->PSC + 1.0f) * (TIM16->ARR + 1.0f)) / 48000000.0f));
 8001f5e:	8018      	strh	r0, [r3, #0]
	  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
 8001f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f62:	3201      	adds	r2, #1
 8001f64:	3301      	adds	r3, #1
 8001f66:	4353      	muls	r3, r2
 8001f68:	4358      	muls	r0, r3
	  workingMode = SINGLE;
 8001f6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002014 <main+0x1d4>)
	  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
 8001f6c:	492a      	ldr	r1, [pc, #168]	@ (8002018 <main+0x1d8>)
	  workingMode = SINGLE;
 8001f6e:	701d      	strb	r5, [r3, #0]
	  singleWorkingState = STARTED;
 8001f70:	4b2a      	ldr	r3, [pc, #168]	@ (800201c <main+0x1dc>)
	  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
 8001f72:	6008      	str	r0, [r1, #0]
	  singleWorkingState = STARTED;
 8001f74:	701d      	strb	r5, [r3, #0]
  HAL_Delay(10); //for sake of safety
 8001f76:	200a      	movs	r0, #10
 8001f78:	f000 fb3a 	bl	80025f0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim16);
 8001f7c:	0020      	movs	r0, r4
 8001f7e:	f001 fa15 	bl	80033ac <HAL_TIM_Base_Start_IT>
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <main+0x142>
  else if(HAL_GPIO_ReadPin(MODE_GPIO_Port, MODE_Pin) == 1) // auto mode
 8001f84:	2180      	movs	r1, #128	@ 0x80
 8001f86:	481d      	ldr	r0, [pc, #116]	@ (8001ffc <main+0x1bc>)
 8001f88:	0049      	lsls	r1, r1, #1
 8001f8a:	f000 ff71 	bl	8002e70 <HAL_GPIO_ReadPin>
 8001f8e:	2801      	cmp	r0, #1
 8001f90:	d1f1      	bne.n	8001f76 <main+0x136>
	  MAX_TIMER_OVERRUNS = (uint16_t)((MAX_TIMER_IDLE / 1000.0f) / (((TIM16->PSC + 1.0f) * (TIM16->ARR + 1.0f)) / 48000000.0f));
 8001f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8001f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f96:	4698      	mov	r8, r3
 8001f98:	f7fe ff06 	bl	8000da8 <__aeabi_ui2f>
 8001f9c:	21fe      	movs	r1, #254	@ 0xfe
 8001f9e:	0589      	lsls	r1, r1, #22
 8001fa0:	f7fe f956 	bl	8000250 <__aeabi_fadd>
 8001fa4:	1c05      	adds	r5, r0, #0
 8001fa6:	4640      	mov	r0, r8
 8001fa8:	f7fe fefe 	bl	8000da8 <__aeabi_ui2f>
 8001fac:	21fe      	movs	r1, #254	@ 0xfe
 8001fae:	0589      	lsls	r1, r1, #22
 8001fb0:	f7fe f94e 	bl	8000250 <__aeabi_fadd>
 8001fb4:	1c01      	adds	r1, r0, #0
 8001fb6:	1c28      	adds	r0, r5, #0
 8001fb8:	f7fe fbf4 	bl	80007a4 <__aeabi_fmul>
 8001fbc:	4912      	ldr	r1, [pc, #72]	@ (8002008 <main+0x1c8>)
 8001fbe:	f7fe fad1 	bl	8000564 <__aeabi_fdiv>
 8001fc2:	1c01      	adds	r1, r0, #0
 8001fc4:	4816      	ldr	r0, [pc, #88]	@ (8002020 <main+0x1e0>)
 8001fc6:	f7fe facd 	bl	8000564 <__aeabi_fdiv>
 8001fca:	f7fe f929 	bl	8000220 <__aeabi_f2uiz>
 8001fce:	4b10      	ldr	r3, [pc, #64]	@ (8002010 <main+0x1d0>)
 8001fd0:	b280      	uxth	r0, r0
  	  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
 8001fd2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
	  MAX_TIMER_OVERRUNS = (uint16_t)((MAX_TIMER_IDLE / 1000.0f) / (((TIM16->PSC + 1.0f) * (TIM16->ARR + 1.0f)) / 48000000.0f));
 8001fd4:	8018      	strh	r0, [r3, #0]
  	  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
 8001fd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001fd8:	3201      	adds	r2, #1
 8001fda:	3301      	adds	r3, #1
 8001fdc:	4353      	muls	r3, r2
 8001fde:	4358      	muls	r0, r3
 8001fe0:	490d      	ldr	r1, [pc, #52]	@ (8002018 <main+0x1d8>)
  	  workingMode = AUTO;
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8002014 <main+0x1d4>)
  	  counter = MAX_TIMER_OVERRUNS * (TIM16->PSC+1) * (TIM16->ARR+1);
 8001fe4:	6008      	str	r0, [r1, #0]
  	  workingMode = AUTO;
 8001fe6:	701e      	strb	r6, [r3, #0]
 8001fe8:	e7c5      	b.n	8001f76 <main+0x136>
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	50000800 	.word	0x50000800
 8001ff4:	40014400 	.word	0x40014400
 8001ff8:	10310000 	.word	0x10310000
 8001ffc:	50000400 	.word	0x50000400
 8002000:	20000138 	.word	0x20000138
 8002004:	0000bb7f 	.word	0x0000bb7f
 8002008:	4c371b00 	.word	0x4c371b00
 800200c:	3dcccccd 	.word	0x3dcccccd
 8002010:	20000044 	.word	0x20000044
 8002014:	20000034 	.word	0x20000034
 8002018:	20000040 	.word	0x20000040
 800201c:	20000033 	.word	0x20000033
 8002020:	3efae148 	.word	0x3efae148

08002024 <SEND_VIA_UART>:
{
 8002024:	b570      	push	{r4, r5, r6, lr}
    uart_buffer[0] = ((VOLTAGE / 100) % 10) + '0';
 8002026:	4b15      	ldr	r3, [pc, #84]	@ (800207c <SEND_VIA_UART+0x58>)
 8002028:	2164      	movs	r1, #100	@ 0x64
 800202a:	781d      	ldrb	r5, [r3, #0]
 800202c:	4c14      	ldr	r4, [pc, #80]	@ (8002080 <SEND_VIA_UART+0x5c>)
 800202e:	0028      	movs	r0, r5
 8002030:	f7fe f86a 	bl	8000108 <__udivsi3>
    uart_buffer[1] = '.';
 8002034:	232e      	movs	r3, #46	@ 0x2e
    uart_buffer[0] = ((VOLTAGE / 100) % 10) + '0';
 8002036:	3030      	adds	r0, #48	@ 0x30
    uart_buffer[1] = '.';
 8002038:	7063      	strb	r3, [r4, #1]
    uart_buffer[2] = ((VOLTAGE / 10) % 10) + '0';
 800203a:	210a      	movs	r1, #10
    uart_buffer[0] = ((VOLTAGE / 100) % 10) + '0';
 800203c:	7020      	strb	r0, [r4, #0]
    uart_buffer[2] = ((VOLTAGE / 10) % 10) + '0';
 800203e:	0028      	movs	r0, r5
 8002040:	f7fe f862 	bl	8000108 <__udivsi3>
 8002044:	210a      	movs	r1, #10
 8002046:	b2c0      	uxtb	r0, r0
 8002048:	f7fe f8e4 	bl	8000214 <__aeabi_uidivmod>
 800204c:	3130      	adds	r1, #48	@ 0x30
 800204e:	70a1      	strb	r1, [r4, #2]
    uart_buffer[3] = (VOLTAGE % 10) + '0';
 8002050:	0028      	movs	r0, r5
 8002052:	210a      	movs	r1, #10
 8002054:	f7fe f8de 	bl	8000214 <__aeabi_uidivmod>
    uart_buffer[4] = 'v';
 8002058:	4b0a      	ldr	r3, [pc, #40]	@ (8002084 <SEND_VIA_UART+0x60>)
	if (huart2.gState == HAL_UART_STATE_READY)
 800205a:	480b      	ldr	r0, [pc, #44]	@ (8002088 <SEND_VIA_UART+0x64>)
    uart_buffer[4] = 'v';
 800205c:	80a3      	strh	r3, [r4, #4]
    uart_buffer[6] = '\n';
 800205e:	230a      	movs	r3, #10
 8002060:	71a3      	strb	r3, [r4, #6]
	if (huart2.gState == HAL_UART_STATE_READY)
 8002062:	337e      	adds	r3, #126	@ 0x7e
 8002064:	58c3      	ldr	r3, [r0, r3]
    uart_buffer[3] = (VOLTAGE % 10) + '0';
 8002066:	3130      	adds	r1, #48	@ 0x30
 8002068:	70e1      	strb	r1, [r4, #3]
	if (huart2.gState == HAL_UART_STATE_READY)
 800206a:	2b20      	cmp	r3, #32
 800206c:	d000      	beq.n	8002070 <SEND_VIA_UART+0x4c>
}
 800206e:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_Transmit_DMA(&huart2, (uint8_t*)uart_buffer, 7);
 8002070:	2207      	movs	r2, #7
 8002072:	0021      	movs	r1, r4
 8002074:	f001 fb7a 	bl	800376c <HAL_UART_Transmit_DMA>
}
 8002078:	e7f9      	b.n	800206e <SEND_VIA_UART+0x4a>
 800207a:	46c0      	nop			@ (mov r8, r8)
 800207c:	20000000 	.word	0x20000000
 8002080:	2000002c 	.word	0x2000002c
 8002084:	00000d76 	.word	0x00000d76
 8002088:	200000a4 	.word	0x200000a4

0800208c <HAL_TIM_PeriodElapsedCallback>:
{
 800208c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(htim->Instance == TIM16) //TIMER OVERFLOW
 800208e:	6802      	ldr	r2, [r0, #0]
 8002090:	4b2e      	ldr	r3, [pc, #184]	@ (800214c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8002092:	429a      	cmp	r2, r3
 8002094:	d000      	beq.n	8002098 <HAL_TIM_PeriodElapsedCallback+0xc>
}
 8002096:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		timer_OVC = timer_OVC + (workingMode == AUTO || singleWorkingState == STARTED);
 8002098:	4b2d      	ldr	r3, [pc, #180]	@ (8002150 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 800209a:	781c      	ldrb	r4, [r3, #0]
 800209c:	2301      	movs	r3, #1
 800209e:	2c00      	cmp	r4, #0
 80020a0:	d149      	bne.n	8002136 <HAL_TIM_PeriodElapsedCallback+0xaa>
 80020a2:	4d2c      	ldr	r5, [pc, #176]	@ (8002154 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80020a4:	882a      	ldrh	r2, [r5, #0]
 80020a6:	189b      	adds	r3, r3, r2
		if(timer_OVC > MAX_TIMER_OVERRUNS) //every MAX_TIMER_IDLE run this
 80020a8:	4a2b      	ldr	r2, [pc, #172]	@ (8002158 <HAL_TIM_PeriodElapsedCallback+0xcc>)
		timer_OVC = timer_OVC + (workingMode == AUTO || singleWorkingState == STARTED);
 80020aa:	b29b      	uxth	r3, r3
		if(timer_OVC > MAX_TIMER_OVERRUNS) //every MAX_TIMER_IDLE run this
 80020ac:	8812      	ldrh	r2, [r2, #0]
		timer_OVC = timer_OVC + (workingMode == AUTO || singleWorkingState == STARTED);
 80020ae:	802b      	strh	r3, [r5, #0]
		if(timer_OVC > MAX_TIMER_OVERRUNS) //every MAX_TIMER_IDLE run this
 80020b0:	429a      	cmp	r2, r3
 80020b2:	d2f0      	bcs.n	8002096 <HAL_TIM_PeriodElapsedCallback+0xa>
			RAW_VOLTAGE=(uint32_t)(10000.0f*counter_high/counter); //raw but not voltage!
 80020b4:	4e29      	ldr	r6, [pc, #164]	@ (800215c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80020b6:	6830      	ldr	r0, [r6, #0]
 80020b8:	f7fe fe76 	bl	8000da8 <__aeabi_ui2f>
 80020bc:	4928      	ldr	r1, [pc, #160]	@ (8002160 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80020be:	f7fe fb71 	bl	80007a4 <__aeabi_fmul>
 80020c2:	4b28      	ldr	r3, [pc, #160]	@ (8002164 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 80020c4:	1c07      	adds	r7, r0, #0
 80020c6:	6818      	ldr	r0, [r3, #0]
 80020c8:	f7fe fe6e 	bl	8000da8 <__aeabi_ui2f>
 80020cc:	1c01      	adds	r1, r0, #0
 80020ce:	1c38      	adds	r0, r7, #0
 80020d0:	f7fe fa48 	bl	8000564 <__aeabi_fdiv>
 80020d4:	f7fe f8a4 	bl	8000220 <__aeabi_f2uiz>
 80020d8:	4b23      	ldr	r3, [pc, #140]	@ (8002168 <HAL_TIM_PeriodElapsedCallback+0xdc>)
			time0=0;
 80020da:	2100      	movs	r1, #0
			RAW_VOLTAGE=(uint32_t)(10000.0f*counter_high/counter); //raw but not voltage!
 80020dc:	8018      	strh	r0, [r3, #0]
			counter_high=0;
 80020de:	2300      	movs	r3, #0
			time0=0;
 80020e0:	4a22      	ldr	r2, [pc, #136]	@ (800216c <HAL_TIM_PeriodElapsedCallback+0xe0>)
			counter_high=0;
 80020e2:	6033      	str	r3, [r6, #0]
			time0=0;
 80020e4:	8013      	strh	r3, [r2, #0]
			ovc0 = 0;
 80020e6:	4a22      	ldr	r2, [pc, #136]	@ (8002170 <HAL_TIM_PeriodElapsedCallback+0xe4>)
			timer_OVC=0;
 80020e8:	802b      	strh	r3, [r5, #0]
			ovc0 = 0;
 80020ea:	8013      	strh	r3, [r2, #0]
			state = IDLE;
 80020ec:	4b21      	ldr	r3, [pc, #132]	@ (8002174 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80020ee:	7019      	strb	r1, [r3, #0]
			if(singleWorkingState == STARTED && workingMode == SINGLE)
 80020f0:	4b21      	ldr	r3, [pc, #132]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80020f2:	781a      	ldrb	r2, [r3, #0]
 80020f4:	2a01      	cmp	r2, #1
 80020f6:	d025      	beq.n	8002144 <HAL_TIM_PeriodElapsedCallback+0xb8>
	int16_t v = MULTIPLIER*RAW_VOLTAGE+OFFSET;
 80020f8:	0400      	lsls	r0, r0, #16
 80020fa:	0c00      	lsrs	r0, r0, #16
 80020fc:	f7ff fcfe 	bl	8001afc <__aeabi_i2d>
 8002100:	4a1e      	ldr	r2, [pc, #120]	@ (800217c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 8002102:	4b1f      	ldr	r3, [pc, #124]	@ (8002180 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8002104:	f7ff f9f6 	bl	80014f4 <__aeabi_dmul>
 8002108:	4a1e      	ldr	r2, [pc, #120]	@ (8002184 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 800210a:	4b1f      	ldr	r3, [pc, #124]	@ (8002188 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 800210c:	f7fe fe8e 	bl	8000e2c <__aeabi_dadd>
 8002110:	f7ff fcb8 	bl	8001a84 <__aeabi_d2iz>
	VOLTAGE = (v)*(v <= 255 && v >= 0) + (255)*(v > 255) + (0)*(v<0);
 8002114:	21ff      	movs	r1, #255	@ 0xff
 8002116:	2300      	movs	r3, #0
	int16_t v = MULTIPLIER*RAW_VOLTAGE+OFFSET;
 8002118:	b202      	sxth	r2, r0
	VOLTAGE = (v)*(v <= 255 && v >= 0) + (255)*(v > 255) + (0)*(v<0);
 800211a:	b280      	uxth	r0, r0
 800211c:	4281      	cmp	r1, r0
 800211e:	415b      	adcs	r3, r3
 8002120:	4c1a      	ldr	r4, [pc, #104]	@ (800218c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8002122:	2101      	movs	r1, #1
 8002124:	4353      	muls	r3, r2
 8002126:	2aff      	cmp	r2, #255	@ 0xff
 8002128:	dc00      	bgt.n	800212c <HAL_TIM_PeriodElapsedCallback+0xa0>
 800212a:	2100      	movs	r1, #0
 800212c:	1a5b      	subs	r3, r3, r1
 800212e:	7023      	strb	r3, [r4, #0]
	SEND_VIA_UART(); //send info about readings via uart
 8002130:	f7ff ff78 	bl	8002024 <SEND_VIA_UART>
}
 8002134:	e7af      	b.n	8002096 <HAL_TIM_PeriodElapsedCallback+0xa>
		timer_OVC = timer_OVC + (workingMode == AUTO || singleWorkingState == STARTED);
 8002136:	4b10      	ldr	r3, [pc, #64]	@ (8002178 <HAL_TIM_PeriodElapsedCallback+0xec>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b01      	subs	r3, #1
 800213c:	425a      	negs	r2, r3
 800213e:	4153      	adcs	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	e7ae      	b.n	80020a2 <HAL_TIM_PeriodElapsedCallback+0x16>
			if(singleWorkingState == STARTED && workingMode == SINGLE)
 8002144:	2c01      	cmp	r4, #1
 8002146:	d1d7      	bne.n	80020f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
				singleWorkingState = IDLE;
 8002148:	7019      	strb	r1, [r3, #0]
 800214a:	e7d5      	b.n	80020f8 <HAL_TIM_PeriodElapsedCallback+0x6c>
 800214c:	40014400 	.word	0x40014400
 8002150:	20000034 	.word	0x20000034
 8002154:	20000046 	.word	0x20000046
 8002158:	20000044 	.word	0x20000044
 800215c:	2000003c 	.word	0x2000003c
 8002160:	461c4000 	.word	0x461c4000
 8002164:	20000040 	.word	0x20000040
 8002168:	20000002 	.word	0x20000002
 800216c:	20000038 	.word	0x20000038
 8002170:	20000036 	.word	0x20000036
 8002174:	20000035 	.word	0x20000035
 8002178:	20000033 	.word	0x20000033
 800217c:	a9691a76 	.word	0xa9691a76
 8002180:	3fa11dbc 	.word	0x3fa11dbc
 8002184:	6a7ef9db 	.word	0x6a7ef9db
 8002188:	400374bc 	.word	0x400374bc
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_UART_TxCpltCallback>:
    if(huart->Instance == USART2)
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_UART_TxCpltCallback+0x44>)
 8002192:	6802      	ldr	r2, [r0, #0]
{
 8002194:	b570      	push	{r4, r5, r6, lr}
    if(huart->Instance == USART2)
 8002196:	429a      	cmp	r2, r3
 8002198:	d000      	beq.n	800219c <HAL_UART_TxCpltCallback+0xc>
}
 800219a:	bd70      	pop	{r4, r5, r6, pc}
		if(singleWorkingState == SINGLE) //go into deep sleep after uart if mode is single
 800219c:	4a0e      	ldr	r2, [pc, #56]	@ (80021d8 <HAL_UART_TxCpltCallback+0x48>)
 800219e:	7813      	ldrb	r3, [r2, #0]
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d1fa      	bne.n	800219a <HAL_UART_TxCpltCallback+0xa>
			singleWorkingState = IDLE;
 80021a4:	2100      	movs	r1, #0
 80021a6:	7011      	strb	r1, [r2, #0]
	__HAL_DMA_DISABLE(&hdma_usart2_tx);
 80021a8:	4a0c      	ldr	r2, [pc, #48]	@ (80021dc <HAL_UART_TxCpltCallback+0x4c>)
	__HAL_RCC_USART2_CLK_DISABLE();
 80021aa:	4c0d      	ldr	r4, [pc, #52]	@ (80021e0 <HAL_UART_TxCpltCallback+0x50>)
	__HAL_DMA_DISABLE(&hdma_usart2_tx);
 80021ac:	6811      	ldr	r1, [r2, #0]
	HAL_UART_DeInit(&huart2);
 80021ae:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <HAL_UART_TxCpltCallback+0x54>)
	__HAL_DMA_DISABLE(&hdma_usart2_tx);
 80021b0:	680a      	ldr	r2, [r1, #0]
	__HAL_RCC_USART2_CLK_DISABLE();
 80021b2:	4d0d      	ldr	r5, [pc, #52]	@ (80021e8 <HAL_UART_TxCpltCallback+0x58>)
	__HAL_DMA_DISABLE(&hdma_usart2_tx);
 80021b4:	439a      	bics	r2, r3
 80021b6:	600a      	str	r2, [r1, #0]
	HAL_UART_DeInit(&huart2);
 80021b8:	f001 faba 	bl	8003730 <HAL_UART_DeInit>
	__HAL_RCC_USART2_CLK_DISABLE();
 80021bc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
	HAL_TIM_Base_Stop_IT(&htim16);
 80021be:	480b      	ldr	r0, [pc, #44]	@ (80021ec <HAL_UART_TxCpltCallback+0x5c>)
	__HAL_RCC_USART2_CLK_DISABLE();
 80021c0:	402b      	ands	r3, r5
 80021c2:	63e3      	str	r3, [r4, #60]	@ 0x3c
	HAL_TIM_Base_Stop_IT(&htim16);
 80021c4:	f001 f920 	bl	8003408 <HAL_TIM_Base_Stop_IT>
	__HAL_RCC_TIM16_CLK_DISABLE();
 80021c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021ca:	402b      	ands	r3, r5
 80021cc:	6423      	str	r3, [r4, #64]	@ 0x40
	HAL_SuspendTick();
 80021ce:	f000 fa21 	bl	8002614 <HAL_SuspendTick>
}
 80021d2:	e7e2      	b.n	800219a <HAL_UART_TxCpltCallback+0xa>
 80021d4:	40004400 	.word	0x40004400
 80021d8:	20000033 	.word	0x20000033
 80021dc:	20000048 	.word	0x20000048
 80021e0:	40021000 	.word	0x40021000
 80021e4:	200000a4 	.word	0x200000a4
 80021e8:	fffdffff 	.word	0xfffdffff
 80021ec:	20000138 	.word	0x20000138

080021f0 <EXIT_DEEP_SLEEP>:
{
 80021f0:	b570      	push	{r4, r5, r6, lr}
	singleWorkingState = STARTED;
 80021f2:	2601      	movs	r6, #1
	__HAL_RCC_TIM16_CLK_ENABLE();
 80021f4:	2580      	movs	r5, #128	@ 0x80
	singleWorkingState = STARTED;
 80021f6:	4b11      	ldr	r3, [pc, #68]	@ (800223c <EXIT_DEEP_SLEEP+0x4c>)
	__HAL_RCC_TIM16_CLK_ENABLE();
 80021f8:	4c11      	ldr	r4, [pc, #68]	@ (8002240 <EXIT_DEEP_SLEEP+0x50>)
	singleWorkingState = STARTED;
 80021fa:	701e      	strb	r6, [r3, #0]
	__HAL_RCC_TIM16_CLK_ENABLE();
 80021fc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80021fe:	02ad      	lsls	r5, r5, #10
 8002200:	432b      	orrs	r3, r5
 8002202:	6423      	str	r3, [r4, #64]	@ 0x40
 8002204:	6c23      	ldr	r3, [r4, #64]	@ 0x40
{
 8002206:	b082      	sub	sp, #8
	__HAL_RCC_TIM16_CLK_ENABLE();
 8002208:	402b      	ands	r3, r5
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	9b00      	ldr	r3, [sp, #0]
	SystemClock_Config();
 800220e:	f7ff fddf 	bl	8001dd0 <SystemClock_Config>
	HAL_ResumeTick();
 8002212:	f000 fa07 	bl	8002624 <HAL_ResumeTick>
	HAL_TIM_Base_Start_IT(&htim16);
 8002216:	480b      	ldr	r0, [pc, #44]	@ (8002244 <EXIT_DEEP_SLEEP+0x54>)
 8002218:	f001 f8c8 	bl	80033ac <HAL_TIM_Base_Start_IT>
	__HAL_RCC_USART2_CLK_ENABLE();
 800221c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800221e:	432b      	orrs	r3, r5
 8002220:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8002222:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002224:	402b      	ands	r3, r5
 8002226:	9301      	str	r3, [sp, #4]
 8002228:	9b01      	ldr	r3, [sp, #4]
	MX_USART2_UART_Init();
 800222a:	f7ff fdb3 	bl	8001d94 <MX_USART2_UART_Init>
	__HAL_DMA_ENABLE(&hdma_usart2_tx);
 800222e:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <EXIT_DEEP_SLEEP+0x58>)
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	6813      	ldr	r3, [r2, #0]
 8002234:	4333      	orrs	r3, r6
 8002236:	6013      	str	r3, [r2, #0]
}
 8002238:	b002      	add	sp, #8
 800223a:	bd70      	pop	{r4, r5, r6, pc}
 800223c:	20000033 	.word	0x20000033
 8002240:	40021000 	.word	0x40021000
 8002244:	20000138 	.word	0x20000138
 8002248:	20000048 	.word	0x20000048

0800224c <HAL_GPIO_EXTI_Rising_Callback>:
	if(GPIO_Pin == INPUT_Pin && state == IDLE && (workingMode == AUTO || singleWorkingState == STARTED))
 800224c:	2380      	movs	r3, #128	@ 0x80
{
 800224e:	b510      	push	{r4, lr}
	if(GPIO_Pin == INPUT_Pin && state == IDLE && (workingMode == AUTO || singleWorkingState == STARTED))
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	4298      	cmp	r0, r3
 8002254:	d00c      	beq.n	8002270 <HAL_GPIO_EXTI_Rising_Callback+0x24>
	if(GPIO_Pin == MODE_Pin && singleWorkingState == IDLE && workingMode == SINGLE)
 8002256:	2380      	movs	r3, #128	@ 0x80
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	4298      	cmp	r0, r3
 800225c:	d107      	bne.n	800226e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 800225e:	4b11      	ldr	r3, [pc, #68]	@ (80022a4 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 8002266:	4b10      	ldr	r3, [pc, #64]	@ (80022a8 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d017      	beq.n	800229e <HAL_GPIO_EXTI_Rising_Callback+0x52>
}
 800226e:	bd10      	pop	{r4, pc}
	if(GPIO_Pin == INPUT_Pin && state == IDLE && (workingMode == AUTO || singleWorkingState == STARTED))
 8002270:	4b0e      	ldr	r3, [pc, #56]	@ (80022ac <HAL_GPIO_EXTI_Rising_Callback+0x60>)
 8002272:	781a      	ldrb	r2, [r3, #0]
 8002274:	2a00      	cmp	r2, #0
 8002276:	d1fa      	bne.n	800226e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 8002278:	4a0b      	ldr	r2, [pc, #44]	@ (80022a8 <HAL_GPIO_EXTI_Rising_Callback+0x5c>)
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	2a00      	cmp	r2, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_EXTI_Rising_Callback+0x3c>
 8002280:	4a08      	ldr	r2, [pc, #32]	@ (80022a4 <HAL_GPIO_EXTI_Rising_Callback+0x58>)
 8002282:	7812      	ldrb	r2, [r2, #0]
 8002284:	2a01      	cmp	r2, #1
 8002286:	d1f2      	bne.n	800226e <HAL_GPIO_EXTI_Rising_Callback+0x22>
		time0 = TIM16->CNT;
 8002288:	4a09      	ldr	r2, [pc, #36]	@ (80022b0 <HAL_GPIO_EXTI_Rising_Callback+0x64>)
 800228a:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 800228c:	4a09      	ldr	r2, [pc, #36]	@ (80022b4 <HAL_GPIO_EXTI_Rising_Callback+0x68>)
 800228e:	8011      	strh	r1, [r2, #0]
		ovc0 = timer_OVC;
 8002290:	4909      	ldr	r1, [pc, #36]	@ (80022b8 <HAL_GPIO_EXTI_Rising_Callback+0x6c>)
 8002292:	4a0a      	ldr	r2, [pc, #40]	@ (80022bc <HAL_GPIO_EXTI_Rising_Callback+0x70>)
 8002294:	8809      	ldrh	r1, [r1, #0]
 8002296:	8011      	strh	r1, [r2, #0]
		state = STARTED;
 8002298:	2201      	movs	r2, #1
 800229a:	701a      	strb	r2, [r3, #0]
	if(GPIO_Pin == MODE_Pin && singleWorkingState == IDLE && workingMode == SINGLE)
 800229c:	e7e7      	b.n	800226e <HAL_GPIO_EXTI_Rising_Callback+0x22>
		EXIT_DEEP_SLEEP();
 800229e:	f7ff ffa7 	bl	80021f0 <EXIT_DEEP_SLEEP>
}
 80022a2:	e7e4      	b.n	800226e <HAL_GPIO_EXTI_Rising_Callback+0x22>
 80022a4:	20000033 	.word	0x20000033
 80022a8:	20000034 	.word	0x20000034
 80022ac:	20000035 	.word	0x20000035
 80022b0:	40014400 	.word	0x40014400
 80022b4:	20000038 	.word	0x20000038
 80022b8:	20000046 	.word	0x20000046
 80022bc:	20000036 	.word	0x20000036

080022c0 <HAL_GPIO_EXTI_Falling_Callback>:
	if(GPIO_Pin == INPUT_Pin && state == STARTED && (workingMode == AUTO || singleWorkingState == STARTED))
 80022c0:	2380      	movs	r3, #128	@ 0x80
{
 80022c2:	b570      	push	{r4, r5, r6, lr}
	if(GPIO_Pin == INPUT_Pin && state == STARTED && (workingMode == AUTO || singleWorkingState == STARTED))
 80022c4:	021b      	lsls	r3, r3, #8
 80022c6:	4298      	cmp	r0, r3
 80022c8:	d00c      	beq.n	80022e4 <HAL_GPIO_EXTI_Falling_Callback+0x24>
	if(GPIO_Pin == MODE_Pin && singleWorkingState == IDLE && workingMode == SINGLE)
 80022ca:	2380      	movs	r3, #128	@ 0x80
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4298      	cmp	r0, r3
 80022d0:	d107      	bne.n	80022e2 <HAL_GPIO_EXTI_Falling_Callback+0x22>
 80022d2:	4b16      	ldr	r3, [pc, #88]	@ (800232c <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d103      	bne.n	80022e2 <HAL_GPIO_EXTI_Falling_Callback+0x22>
 80022da:	4b15      	ldr	r3, [pc, #84]	@ (8002330 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d020      	beq.n	8002324 <HAL_GPIO_EXTI_Falling_Callback+0x64>
}
 80022e2:	bd70      	pop	{r4, r5, r6, pc}
	if(GPIO_Pin == INPUT_Pin && state == STARTED && (workingMode == AUTO || singleWorkingState == STARTED))
 80022e4:	4b13      	ldr	r3, [pc, #76]	@ (8002334 <HAL_GPIO_EXTI_Falling_Callback+0x74>)
 80022e6:	781a      	ldrb	r2, [r3, #0]
 80022e8:	2a01      	cmp	r2, #1
 80022ea:	d1fa      	bne.n	80022e2 <HAL_GPIO_EXTI_Falling_Callback+0x22>
 80022ec:	4a10      	ldr	r2, [pc, #64]	@ (8002330 <HAL_GPIO_EXTI_Falling_Callback+0x70>)
 80022ee:	7812      	ldrb	r2, [r2, #0]
 80022f0:	2a00      	cmp	r2, #0
 80022f2:	d003      	beq.n	80022fc <HAL_GPIO_EXTI_Falling_Callback+0x3c>
 80022f4:	4a0d      	ldr	r2, [pc, #52]	@ (800232c <HAL_GPIO_EXTI_Falling_Callback+0x6c>)
 80022f6:	7812      	ldrb	r2, [r2, #0]
 80022f8:	2a01      	cmp	r2, #1
 80022fa:	d1f2      	bne.n	80022e2 <HAL_GPIO_EXTI_Falling_Callback+0x22>
		counter_high = counter_high + (TIM16->CNT - time0) + (timer_OVC - ovc0)*TIM16->ARR;
 80022fc:	490e      	ldr	r1, [pc, #56]	@ (8002338 <HAL_GPIO_EXTI_Falling_Callback+0x78>)
 80022fe:	4c0f      	ldr	r4, [pc, #60]	@ (800233c <HAL_GPIO_EXTI_Falling_Callback+0x7c>)
 8002300:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8002302:	6820      	ldr	r0, [r4, #0]
 8002304:	4d0e      	ldr	r5, [pc, #56]	@ (8002340 <HAL_GPIO_EXTI_Falling_Callback+0x80>)
 8002306:	1812      	adds	r2, r2, r0
 8002308:	480e      	ldr	r0, [pc, #56]	@ (8002344 <HAL_GPIO_EXTI_Falling_Callback+0x84>)
 800230a:	882d      	ldrh	r5, [r5, #0]
 800230c:	8800      	ldrh	r0, [r0, #0]
 800230e:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
 8002310:	1a12      	subs	r2, r2, r0
 8002312:	480d      	ldr	r0, [pc, #52]	@ (8002348 <HAL_GPIO_EXTI_Falling_Callback+0x88>)
 8002314:	8800      	ldrh	r0, [r0, #0]
 8002316:	1b40      	subs	r0, r0, r5
 8002318:	4341      	muls	r1, r0
 800231a:	1852      	adds	r2, r2, r1
 800231c:	6022      	str	r2, [r4, #0]
		state = IDLE;
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
	if(GPIO_Pin == MODE_Pin && singleWorkingState == IDLE && workingMode == SINGLE)
 8002322:	e7de      	b.n	80022e2 <HAL_GPIO_EXTI_Falling_Callback+0x22>
		EXIT_DEEP_SLEEP();
 8002324:	f7ff ff64 	bl	80021f0 <EXIT_DEEP_SLEEP>
}
 8002328:	e7db      	b.n	80022e2 <HAL_GPIO_EXTI_Falling_Callback+0x22>
 800232a:	46c0      	nop			@ (mov r8, r8)
 800232c:	20000033 	.word	0x20000033
 8002330:	20000034 	.word	0x20000034
 8002334:	20000035 	.word	0x20000035
 8002338:	40014400 	.word	0x40014400
 800233c:	2000003c 	.word	0x2000003c
 8002340:	20000036 	.word	0x20000036
 8002344:	20000038 	.word	0x20000038
 8002348:	20000046 	.word	0x20000046

0800234c <Error_Handler>:
 800234c:	b672      	cpsid	i
  while (1)
 800234e:	e7fe      	b.n	800234e <Error_Handler+0x2>

08002350 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002350:	2201      	movs	r2, #1
 8002352:	4b0a      	ldr	r3, [pc, #40]	@ (800237c <HAL_MspInit+0x2c>)
{
 8002354:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002358:	4311      	orrs	r1, r2
 800235a:	6419      	str	r1, [r3, #64]	@ 0x40
 800235c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800235e:	400a      	ands	r2, r1
  __HAL_RCC_PWR_CLK_ENABLE();
 8002360:	2180      	movs	r1, #128	@ 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	9200      	str	r2, [sp, #0]
 8002364:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002368:	0549      	lsls	r1, r1, #21
 800236a:	430a      	orrs	r2, r1
 800236c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	400b      	ands	r3, r1
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002376:	b002      	add	sp, #8
 8002378:	4770      	bx	lr
 800237a:	46c0      	nop			@ (mov r8, r8)
 800237c:	40021000 	.word	0x40021000

08002380 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002380:	b500      	push	{lr}
  if(htim_base->Instance==TIM16)
 8002382:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <HAL_TIM_Base_MspInit+0x38>)
 8002384:	6802      	ldr	r2, [r0, #0]
{
 8002386:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM16)
 8002388:	429a      	cmp	r2, r3
 800238a:	d001      	beq.n	8002390 <HAL_TIM_Base_MspInit+0x10>

  /* USER CODE END TIM16_MspInit 1 */

  }

}
 800238c:	b003      	add	sp, #12
 800238e:	bd00      	pop	{pc}
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002390:	2180      	movs	r1, #128	@ 0x80
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_TIM_Base_MspInit+0x3c>)
 8002394:	0289      	lsls	r1, r1, #10
 8002396:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8002398:	2015      	movs	r0, #21
    __HAL_RCC_TIM16_CLK_ENABLE();
 800239a:	430a      	orrs	r2, r1
 800239c:	641a      	str	r2, [r3, #64]	@ 0x40
 800239e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023a0:	2200      	movs	r2, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023a2:	400b      	ands	r3, r1
 80023a4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023a6:	2100      	movs	r1, #0
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023a8:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 80023aa:	f000 f943 	bl	8002634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 80023ae:	2015      	movs	r0, #21
 80023b0:	f000 f96a 	bl	8002688 <HAL_NVIC_EnableIRQ>
}
 80023b4:	e7ea      	b.n	800238c <HAL_TIM_Base_MspInit+0xc>
 80023b6:	46c0      	nop			@ (mov r8, r8)
 80023b8:	40014400 	.word	0x40014400
 80023bc:	40021000 	.word	0x40021000

080023c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023c0:	b530      	push	{r4, r5, lr}
 80023c2:	0004      	movs	r4, r0
 80023c4:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c6:	2214      	movs	r2, #20
 80023c8:	2100      	movs	r1, #0
 80023ca:	a802      	add	r0, sp, #8
 80023cc:	f001 fe82 	bl	80040d4 <memset>
  if(huart->Instance==USART2)
 80023d0:	4b22      	ldr	r3, [pc, #136]	@ (800245c <HAL_UART_MspInit+0x9c>)
 80023d2:	6822      	ldr	r2, [r4, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d001      	beq.n	80023dc <HAL_UART_MspInit+0x1c>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80023d8:	b009      	add	sp, #36	@ 0x24
 80023da:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80023dc:	2180      	movs	r1, #128	@ 0x80
 80023de:	4b20      	ldr	r3, [pc, #128]	@ (8002460 <HAL_UART_MspInit+0xa0>)
 80023e0:	0289      	lsls	r1, r1, #10
 80023e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80023e4:	2024      	movs	r0, #36	@ 0x24
    __HAL_RCC_USART2_CLK_ENABLE();
 80023e6:	430a      	orrs	r2, r1
 80023e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80023ea:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023ec:	400a      	ands	r2, r1
 80023ee:	9200      	str	r2, [sp, #0]
 80023f0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023f2:	2201      	movs	r2, #1
 80023f4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80023f6:	4311      	orrs	r1, r2
 80023f8:	6359      	str	r1, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80023fa:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5;
 80023fe:	9002      	str	r0, [sp, #8]
 8002400:	9103      	str	r1, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002404:	4013      	ands	r3, r2
 8002406:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002408:	05c0      	lsls	r0, r0, #23
 800240a:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800240c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800240e:	9206      	str	r2, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002410:	f000 fb8c 	bl	8002b2c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8002414:	4d13      	ldr	r5, [pc, #76]	@ (8002464 <HAL_UART_MspInit+0xa4>)
 8002416:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_UART_MspInit+0xa8>)
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002418:	2280      	movs	r2, #128	@ 0x80
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800241a:	602b      	str	r3, [r5, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800241c:	2335      	movs	r3, #53	@ 0x35
 800241e:	606b      	str	r3, [r5, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002420:	3b25      	subs	r3, #37	@ 0x25
 8002422:	60ab      	str	r3, [r5, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002424:	2300      	movs	r3, #0
 8002426:	60eb      	str	r3, [r5, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002428:	616b      	str	r3, [r5, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800242a:	61ab      	str	r3, [r5, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800242c:	61eb      	str	r3, [r5, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800242e:	23c0      	movs	r3, #192	@ 0xc0
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002430:	0028      	movs	r0, r5
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002432:	019b      	lsls	r3, r3, #6
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002434:	612a      	str	r2, [r5, #16]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002436:	622b      	str	r3, [r5, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002438:	f000 f97c 	bl	8002734 <HAL_DMA_Init>
 800243c:	2800      	cmp	r0, #0
 800243e:	d10a      	bne.n	8002456 <HAL_UART_MspInit+0x96>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	201c      	movs	r0, #28
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002446:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8002448:	62ac      	str	r4, [r5, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800244a:	f000 f8f3 	bl	8002634 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800244e:	201c      	movs	r0, #28
 8002450:	f000 f91a 	bl	8002688 <HAL_NVIC_EnableIRQ>
}
 8002454:	e7c0      	b.n	80023d8 <HAL_UART_MspInit+0x18>
      Error_Handler();
 8002456:	f7ff ff79 	bl	800234c <Error_Handler>
 800245a:	e7f1      	b.n	8002440 <HAL_UART_MspInit+0x80>
 800245c:	40004400 	.word	0x40004400
 8002460:	40021000 	.word	0x40021000
 8002464:	20000048 	.word	0x20000048
 8002468:	40020008 	.word	0x40020008

0800246c <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 800246c:	4b0b      	ldr	r3, [pc, #44]	@ (800249c <HAL_UART_MspDeInit+0x30>)
 800246e:	6802      	ldr	r2, [r0, #0]
{
 8002470:	b510      	push	{r4, lr}
 8002472:	0004      	movs	r4, r0
  if(huart->Instance==USART2)
 8002474:	429a      	cmp	r2, r3
 8002476:	d000      	beq.n	800247a <HAL_UART_MspDeInit+0xe>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8002478:	bd10      	pop	{r4, pc}
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_5);
 800247a:	20a0      	movs	r0, #160	@ 0xa0
    __HAL_RCC_USART2_CLK_DISABLE();
 800247c:	4a08      	ldr	r2, [pc, #32]	@ (80024a0 <HAL_UART_MspDeInit+0x34>)
 800247e:	4909      	ldr	r1, [pc, #36]	@ (80024a4 <HAL_UART_MspDeInit+0x38>)
 8002480:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_5);
 8002482:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_USART2_CLK_DISABLE();
 8002484:	400b      	ands	r3, r1
 8002486:	63d3      	str	r3, [r2, #60]	@ 0x3c
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_5);
 8002488:	2124      	movs	r1, #36	@ 0x24
 800248a:	f000 fc5d 	bl	8002d48 <HAL_GPIO_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800248e:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8002490:	f000 f9ca 	bl	8002828 <HAL_DMA_DeInit>
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002494:	201c      	movs	r0, #28
 8002496:	f000 f903 	bl	80026a0 <HAL_NVIC_DisableIRQ>
}
 800249a:	e7ed      	b.n	8002478 <HAL_UART_MspDeInit+0xc>
 800249c:	40004400 	.word	0x40004400
 80024a0:	40021000 	.word	0x40021000
 80024a4:	fffdffff 	.word	0xfffdffff

080024a8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a8:	e7fe      	b.n	80024a8 <NMI_Handler>
 80024aa:	46c0      	nop			@ (mov r8, r8)

080024ac <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024ac:	e7fe      	b.n	80024ac <HardFault_Handler>
 80024ae:	46c0      	nop			@ (mov r8, r8)

080024b0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80024b0:	4770      	bx	lr
 80024b2:	46c0      	nop			@ (mov r8, r8)

080024b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 80024b4:	4770      	bx	lr
 80024b6:	46c0      	nop			@ (mov r8, r8)

080024b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024ba:	f000 f887 	bl	80025cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024be:	bd10      	pop	{r4, pc}

080024c0 <EXTI4_15_IRQHandler>:
void EXTI4_15_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 80024c0:	2080      	movs	r0, #128	@ 0x80
{
 80024c2:	b510      	push	{r4, lr}
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 80024c4:	0040      	lsls	r0, r0, #1
 80024c6:	f000 fcd9 	bl	8002e7c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(INPUT_Pin);
 80024ca:	2080      	movs	r0, #128	@ 0x80
 80024cc:	0200      	lsls	r0, r0, #8
 80024ce:	f000 fcd5 	bl	8002e7c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80024d2:	bd10      	pop	{r4, pc}

080024d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80024d6:	4802      	ldr	r0, [pc, #8]	@ (80024e0 <DMA1_Channel1_IRQHandler+0xc>)
 80024d8:	f000 facc 	bl	8002a74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024dc:	bd10      	pop	{r4, pc}
 80024de:	46c0      	nop			@ (mov r8, r8)
 80024e0:	20000048 	.word	0x20000048

080024e4 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 80024e4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80024e6:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <TIM16_IRQHandler+0xc>)
 80024e8:	f000 ffb0 	bl	800344c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 80024ec:	bd10      	pop	{r4, pc}
 80024ee:	46c0      	nop			@ (mov r8, r8)
 80024f0:	20000138 	.word	0x20000138

080024f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 80024f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80024f6:	4802      	ldr	r0, [pc, #8]	@ (8002500 <USART2_IRQHandler+0xc>)
 80024f8:	f001 fa0e 	bl	8003918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80024fc:	bd10      	pop	{r4, pc}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	200000a4 	.word	0x200000a4

08002504 <SystemInit>:
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002504:	2280      	movs	r2, #128	@ 0x80
 8002506:	4b02      	ldr	r3, [pc, #8]	@ (8002510 <SystemInit+0xc>)
 8002508:	0512      	lsls	r2, r2, #20
 800250a:	609a      	str	r2, [r3, #8]
#endif
}
 800250c:	4770      	bx	lr
 800250e:	46c0      	nop			@ (mov r8, r8)
 8002510:	e000ed00 	.word	0xe000ed00

08002514 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002514:	480d      	ldr	r0, [pc, #52]	@ (800254c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002516:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002518:	f7ff fff4 	bl	8002504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800251c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800251e:	e003      	b.n	8002528 <LoopCopyDataInit>

08002520 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8002522:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002524:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002526:	3104      	adds	r1, #4

08002528 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002528:	480a      	ldr	r0, [pc, #40]	@ (8002554 <LoopForever+0xa>)
  ldr r3, =_edata
 800252a:	4b0b      	ldr	r3, [pc, #44]	@ (8002558 <LoopForever+0xe>)
  adds r2, r0, r1
 800252c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800252e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002530:	d3f6      	bcc.n	8002520 <CopyDataInit>
  ldr r2, =_sbss
 8002532:	4a0a      	ldr	r2, [pc, #40]	@ (800255c <LoopForever+0x12>)
  b LoopFillZerobss
 8002534:	e002      	b.n	800253c <LoopFillZerobss>

08002536 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002536:	2300      	movs	r3, #0
  str  r3, [r2]
 8002538:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800253a:	3204      	adds	r2, #4

0800253c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 800253c:	4b08      	ldr	r3, [pc, #32]	@ (8002560 <LoopForever+0x16>)
  cmp r2, r3
 800253e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002540:	d3f9      	bcc.n	8002536 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8002542:	f001 fdcf 	bl	80040e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002546:	f7ff fc7b 	bl	8001e40 <main>

0800254a <LoopForever>:

LoopForever:
    b LoopForever
 800254a:	e7fe      	b.n	800254a <LoopForever>
  ldr   r0, =_estack
 800254c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8002550:	08004244 	.word	0x08004244
  ldr r0, =_sdata
 8002554:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002558:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 800255c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8002560:	20000188 	.word	0x20000188

08002564 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002564:	e7fe      	b.n	8002564 <ADC1_IRQHandler>
	...

08002568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002568:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if ((uint32_t)uwTickFreq != 0UL)
 800256a:	4b0f      	ldr	r3, [pc, #60]	@ (80025a8 <HAL_InitTick+0x40>)
{
 800256c:	0004      	movs	r4, r0
  if ((uint32_t)uwTickFreq != 0UL)
 800256e:	7819      	ldrb	r1, [r3, #0]
 8002570:	2900      	cmp	r1, #0
 8002572:	d101      	bne.n	8002578 <HAL_InitTick+0x10>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8002574:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8002576:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8002578:	20fa      	movs	r0, #250	@ 0xfa
 800257a:	0080      	lsls	r0, r0, #2
 800257c:	f7fd fdc4 	bl	8000108 <__udivsi3>
 8002580:	4d0a      	ldr	r5, [pc, #40]	@ (80025ac <HAL_InitTick+0x44>)
 8002582:	0001      	movs	r1, r0
 8002584:	6828      	ldr	r0, [r5, #0]
 8002586:	f7fd fdbf 	bl	8000108 <__udivsi3>
 800258a:	f000 f899 	bl	80026c0 <HAL_SYSTICK_Config>
 800258e:	2800      	cmp	r0, #0
 8002590:	d1f0      	bne.n	8002574 <HAL_InitTick+0xc>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002592:	2c03      	cmp	r4, #3
 8002594:	d8ee      	bhi.n	8002574 <HAL_InitTick+0xc>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002596:	3801      	subs	r0, #1
 8002598:	2200      	movs	r2, #0
 800259a:	0021      	movs	r1, r4
 800259c:	f000 f84a 	bl	8002634 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025a0:	4b03      	ldr	r3, [pc, #12]	@ (80025b0 <HAL_InitTick+0x48>)
 80025a2:	2000      	movs	r0, #0
 80025a4:	601c      	str	r4, [r3, #0]
  return status;
 80025a6:	e7e6      	b.n	8002576 <HAL_InitTick+0xe>
 80025a8:	20000008 	.word	0x20000008
 80025ac:	20000004 	.word	0x20000004
 80025b0:	2000000c 	.word	0x2000000c

080025b4 <HAL_Init>:
{
 80025b4:	b510      	push	{r4, lr}
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025b6:	2003      	movs	r0, #3
 80025b8:	f7ff ffd6 	bl	8002568 <HAL_InitTick>
 80025bc:	1e04      	subs	r4, r0, #0
 80025be:	d002      	beq.n	80025c6 <HAL_Init+0x12>
    status = HAL_ERROR;
 80025c0:	2401      	movs	r4, #1
}
 80025c2:	0020      	movs	r0, r4
 80025c4:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 80025c6:	f7ff fec3 	bl	8002350 <HAL_MspInit>
 80025ca:	e7fa      	b.n	80025c2 <HAL_Init+0xe>

080025cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80025cc:	4a03      	ldr	r2, [pc, #12]	@ (80025dc <HAL_IncTick+0x10>)
 80025ce:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <HAL_IncTick+0x14>)
 80025d0:	6811      	ldr	r1, [r2, #0]
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	185b      	adds	r3, r3, r1
 80025d6:	6013      	str	r3, [r2, #0]
}
 80025d8:	4770      	bx	lr
 80025da:	46c0      	nop			@ (mov r8, r8)
 80025dc:	20000184 	.word	0x20000184
 80025e0:	20000008 	.word	0x20000008

080025e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80025e4:	4b01      	ldr	r3, [pc, #4]	@ (80025ec <HAL_GetTick+0x8>)
 80025e6:	6818      	ldr	r0, [r3, #0]
}
 80025e8:	4770      	bx	lr
 80025ea:	46c0      	nop			@ (mov r8, r8)
 80025ec:	20000184 	.word	0x20000184

080025f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f0:	b570      	push	{r4, r5, r6, lr}
 80025f2:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80025f4:	f7ff fff6 	bl	80025e4 <HAL_GetTick>
 80025f8:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025fa:	1c63      	adds	r3, r4, #1
 80025fc:	d002      	beq.n	8002604 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80025fe:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <HAL_Delay+0x20>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	18e4      	adds	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002604:	f7ff ffee 	bl	80025e4 <HAL_GetTick>
 8002608:	1b40      	subs	r0, r0, r5
 800260a:	42a0      	cmp	r0, r4
 800260c:	d3fa      	bcc.n	8002604 <HAL_Delay+0x14>
  {
  }
}
 800260e:	bd70      	pop	{r4, r5, r6, pc}
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002614:	2102      	movs	r1, #2
 8002616:	4a02      	ldr	r2, [pc, #8]	@ (8002620 <HAL_SuspendTick+0xc>)
 8002618:	6813      	ldr	r3, [r2, #0]
 800261a:	438b      	bics	r3, r1
 800261c:	6013      	str	r3, [r2, #0]
}
 800261e:	4770      	bx	lr
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8002624:	2102      	movs	r1, #2
 8002626:	4a02      	ldr	r2, [pc, #8]	@ (8002630 <HAL_ResumeTick+0xc>)
 8002628:	6813      	ldr	r3, [r2, #0]
 800262a:	430b      	orrs	r3, r1
 800262c:	6013      	str	r3, [r2, #0]
}
 800262e:	4770      	bx	lr
 8002630:	e000e010 	.word	0xe000e010

08002634 <HAL_NVIC_SetPriority>:
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002634:	22ff      	movs	r2, #255	@ 0xff
 8002636:	2303      	movs	r3, #3
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b510      	push	{r4, lr}
 800263a:	0014      	movs	r4, r2
 800263c:	4003      	ands	r3, r0
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	409c      	lsls	r4, r3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002642:	0189      	lsls	r1, r1, #6
 8002644:	400a      	ands	r2, r1
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002646:	43e4      	mvns	r4, r4
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002648:	409a      	lsls	r2, r3
  if ((int32_t)(IRQn) >= 0)
 800264a:	2800      	cmp	r0, #0
 800264c:	db0b      	blt.n	8002666 <HAL_NVIC_SetPriority+0x32>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800264e:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <HAL_NVIC_SetPriority+0x4c>)
 8002650:	21c0      	movs	r1, #192	@ 0xc0
 8002652:	469c      	mov	ip, r3
 8002654:	0880      	lsrs	r0, r0, #2
 8002656:	0080      	lsls	r0, r0, #2
 8002658:	4460      	add	r0, ip
 800265a:	0089      	lsls	r1, r1, #2
 800265c:	5843      	ldr	r3, [r0, r1]
 800265e:	4023      	ands	r3, r4
 8002660:	4313      	orrs	r3, r2
 8002662:	5043      	str	r3, [r0, r1]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 8002664:	bd10      	pop	{r4, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002666:	230f      	movs	r3, #15
 8002668:	4906      	ldr	r1, [pc, #24]	@ (8002684 <HAL_NVIC_SetPriority+0x50>)
 800266a:	4003      	ands	r3, r0
 800266c:	468c      	mov	ip, r1
 800266e:	3b08      	subs	r3, #8
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	4463      	add	r3, ip
 8002676:	69d9      	ldr	r1, [r3, #28]
 8002678:	400c      	ands	r4, r1
 800267a:	4314      	orrs	r4, r2
 800267c:	61dc      	str	r4, [r3, #28]
 800267e:	e7f1      	b.n	8002664 <HAL_NVIC_SetPriority+0x30>
 8002680:	e000e100 	.word	0xe000e100
 8002684:	e000ed00 	.word	0xe000ed00

08002688 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002688:	2800      	cmp	r0, #0
 800268a:	db05      	blt.n	8002698 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800268c:	221f      	movs	r2, #31
 800268e:	2301      	movs	r3, #1
 8002690:	4002      	ands	r2, r0
 8002692:	4093      	lsls	r3, r2
 8002694:	4a01      	ldr	r2, [pc, #4]	@ (800269c <HAL_NVIC_EnableIRQ+0x14>)
 8002696:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002698:	4770      	bx	lr
 800269a:	46c0      	nop			@ (mov r8, r8)
 800269c:	e000e100 	.word	0xe000e100

080026a0 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80026a0:	2800      	cmp	r0, #0
 80026a2:	db0a      	blt.n	80026ba <HAL_NVIC_DisableIRQ+0x1a>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026a4:	221f      	movs	r2, #31
 80026a6:	2301      	movs	r3, #1
 80026a8:	4002      	ands	r2, r0
 80026aa:	4093      	lsls	r3, r2
 80026ac:	2280      	movs	r2, #128	@ 0x80
 80026ae:	4903      	ldr	r1, [pc, #12]	@ (80026bc <HAL_NVIC_DisableIRQ+0x1c>)
 80026b0:	508b      	str	r3, [r1, r2]
  __ASM volatile ("dsb 0xF":::"memory");
 80026b2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80026b6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80026ba:	4770      	bx	lr
 80026bc:	e000e100 	.word	0xe000e100

080026c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c0:	2280      	movs	r2, #128	@ 0x80
 80026c2:	1e43      	subs	r3, r0, #1
 80026c4:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 80026c6:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d20e      	bcs.n	80026ea <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026cc:	21c0      	movs	r1, #192	@ 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026ce:	4a07      	ldr	r2, [pc, #28]	@ (80026ec <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d0:	4807      	ldr	r0, [pc, #28]	@ (80026f0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026d2:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80026d4:	6a03      	ldr	r3, [r0, #32]
 80026d6:	0609      	lsls	r1, r1, #24
 80026d8:	021b      	lsls	r3, r3, #8
 80026da:	0a1b      	lsrs	r3, r3, #8
 80026dc:	430b      	orrs	r3, r1
 80026de:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e0:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026e2:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026e4:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026e6:	3307      	adds	r3, #7
 80026e8:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80026ea:	4770      	bx	lr
 80026ec:	e000e010 	.word	0xe000e010
 80026f0:	e000ed00 	.word	0xe000ed00

080026f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80026f6:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80026f8:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80026fa:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80026fc:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80026fe:	2c00      	cmp	r4, #0
 8002700:	d002      	beq.n	8002708 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002702:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 8002704:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 8002706:	6065      	str	r5, [r4, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002708:	241c      	movs	r4, #28
 800270a:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800270c:	4e08      	ldr	r6, [pc, #32]	@ (8002730 <DMA_SetConfig+0x3c>)
 800270e:	4025      	ands	r5, r4
 8002710:	3c1b      	subs	r4, #27
 8002712:	40ac      	lsls	r4, r5
 8002714:	6877      	ldr	r7, [r6, #4]
 8002716:	433c      	orrs	r4, r7
 8002718:	6074      	str	r4, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800271a:	6804      	ldr	r4, [r0, #0]
 800271c:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800271e:	6883      	ldr	r3, [r0, #8]
 8002720:	2b10      	cmp	r3, #16
 8002722:	d002      	beq.n	800272a <DMA_SetConfig+0x36>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8002724:	60a1      	str	r1, [r4, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002726:	60e2      	str	r2, [r4, #12]
  }
}
 8002728:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 800272a:	60a2      	str	r2, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 800272c:	60e1      	str	r1, [r4, #12]
 800272e:	e7fb      	b.n	8002728 <DMA_SetConfig+0x34>
 8002730:	40020000 	.word	0x40020000

08002734 <HAL_DMA_Init>:
{
 8002734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002736:	46ce      	mov	lr, r9
 8002738:	4647      	mov	r7, r8
 800273a:	0004      	movs	r4, r0
 800273c:	b580      	push	{r7, lr}
  if (hdma == NULL)
 800273e:	2800      	cmp	r0, #0
 8002740:	d063      	beq.n	800280a <HAL_DMA_Init+0xd6>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002742:	6805      	ldr	r5, [r0, #0]
 8002744:	4b32      	ldr	r3, [pc, #200]	@ (8002810 <HAL_DMA_Init+0xdc>)
 8002746:	2114      	movs	r1, #20
 8002748:	18e8      	adds	r0, r5, r3
 800274a:	f7fd fcdd 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 800274e:	0083      	lsls	r3, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002750:	6423      	str	r3, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002752:	2202      	movs	r2, #2
 8002754:	2325      	movs	r3, #37	@ 0x25
 8002756:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002758:	682b      	ldr	r3, [r5, #0]
 800275a:	4a2e      	ldr	r2, [pc, #184]	@ (8002814 <HAL_DMA_Init+0xe0>)
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800275c:	68a6      	ldr	r6, [r4, #8]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800275e:	4013      	ands	r3, r2
 8002760:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002762:	68e3      	ldr	r3, [r4, #12]
 8002764:	6921      	ldr	r1, [r4, #16]
 8002766:	4333      	orrs	r3, r6
 8002768:	430b      	orrs	r3, r1
 800276a:	6961      	ldr	r1, [r4, #20]
 800276c:	682a      	ldr	r2, [r5, #0]
 800276e:	430b      	orrs	r3, r1
 8002770:	69a1      	ldr	r1, [r4, #24]
 8002772:	430b      	orrs	r3, r1
 8002774:	69e1      	ldr	r1, [r4, #28]
 8002776:	430b      	orrs	r3, r1
 8002778:	6a21      	ldr	r1, [r4, #32]
 800277a:	430b      	orrs	r3, r1
 800277c:	4313      	orrs	r3, r2
 800277e:	602b      	str	r3, [r5, #0]
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002780:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_DMA_Init+0xe4>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002782:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002784:	469c      	mov	ip, r3
                                                             ((hdma->ChannelIndex >> 2U) * \
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002786:	4b25      	ldr	r3, [pc, #148]	@ (800281c <HAL_DMA_Init+0xe8>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002788:	4460      	add	r0, ip
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800278a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800278c:	4698      	mov	r8, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800278e:	23ff      	movs	r3, #255	@ 0xff
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002790:	0087      	lsls	r7, r0, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002792:	0018      	movs	r0, r3
 8002794:	4028      	ands	r0, r5
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002796:	6467      	str	r7, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002798:	3808      	subs	r0, #8
 800279a:	4699      	mov	r9, r3
 800279c:	f7fd fcb4 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80027a0:	231c      	movs	r3, #28
 80027a2:	2201      	movs	r2, #1
 80027a4:	4003      	ands	r3, r0
 80027a6:	0010      	movs	r0, r2
 80027a8:	4098      	lsls	r0, r3
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027aa:	2380      	movs	r3, #128	@ 0x80
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80027ac:	64e0      	str	r0, [r4, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80027ae:	01db      	lsls	r3, r3, #7
 80027b0:	429e      	cmp	r6, r3
 80027b2:	d020      	beq.n	80027f6 <HAL_DMA_Init+0xc2>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027b4:	464b      	mov	r3, r9
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027b6:	4645      	mov	r5, r8
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027b8:	6861      	ldr	r1, [r4, #4]
 80027ba:	400b      	ands	r3, r1
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027bc:	3901      	subs	r1, #1
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027be:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027c0:	6068      	str	r0, [r5, #4]
  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80027c2:	2903      	cmp	r1, #3
 80027c4:	d81c      	bhi.n	8002800 <HAL_DMA_Init+0xcc>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80027c6:	4916      	ldr	r1, [pc, #88]	@ (8002820 <HAL_DMA_Init+0xec>)
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80027c8:	4816      	ldr	r0, [pc, #88]	@ (8002824 <HAL_DMA_Init+0xf0>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80027ca:	1859      	adds	r1, r3, r1

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80027cc:	3b01      	subs	r3, #1
 80027ce:	409a      	lsls	r2, r3
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027d0:	2300      	movs	r3, #0
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80027d2:	0089      	lsls	r1, r1, #2
 80027d4:	6521      	str	r1, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80027d6:	6560      	str	r0, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80027d8:	65a2      	str	r2, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80027da:	600b      	str	r3, [r1, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027dc:	6042      	str	r2, [r0, #4]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027de:	2300      	movs	r3, #0
  hdma->State  = HAL_DMA_STATE_READY;
 80027e0:	2225      	movs	r2, #37	@ 0x25
 80027e2:	2101      	movs	r1, #1
  return HAL_OK;
 80027e4:	2000      	movs	r0, #0
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e6:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State  = HAL_DMA_STATE_READY;
 80027e8:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80027ea:	3a01      	subs	r2, #1
 80027ec:	54a3      	strb	r3, [r4, r2]
}
 80027ee:	bcc0      	pop	{r6, r7}
 80027f0:	46b9      	mov	r9, r7
 80027f2:	46b0      	mov	r8, r6
 80027f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80027f6:	2300      	movs	r3, #0
 80027f8:	6063      	str	r3, [r4, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80027fa:	603b      	str	r3, [r7, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80027fc:	4643      	mov	r3, r8
 80027fe:	6058      	str	r0, [r3, #4]
    hdma->DMAmuxRequestGen = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002804:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002806:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002808:	e7e9      	b.n	80027de <HAL_DMA_Init+0xaa>
    return HAL_ERROR;
 800280a:	2001      	movs	r0, #1
 800280c:	e7ef      	b.n	80027ee <HAL_DMA_Init+0xba>
 800280e:	46c0      	nop			@ (mov r8, r8)
 8002810:	bffdfff8 	.word	0xbffdfff8
 8002814:	ffff800f 	.word	0xffff800f
 8002818:	10008200 	.word	0x10008200
 800281c:	40020880 	.word	0x40020880
 8002820:	1000823f 	.word	0x1000823f
 8002824:	40020940 	.word	0x40020940

08002828 <HAL_DMA_DeInit>:
{
 8002828:	b5f0      	push	{r4, r5, r6, r7, lr}
 800282a:	46d6      	mov	lr, sl
 800282c:	464f      	mov	r7, r9
 800282e:	4646      	mov	r6, r8
 8002830:	0004      	movs	r4, r0
 8002832:	b5c0      	push	{r6, r7, lr}
  if (NULL == hdma)
 8002834:	2800      	cmp	r0, #0
 8002836:	d04f      	beq.n	80028d8 <HAL_DMA_DeInit+0xb0>
  __HAL_DMA_DISABLE(hdma);
 8002838:	2701      	movs	r7, #1
 800283a:	6806      	ldr	r6, [r0, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800283c:	2114      	movs	r1, #20
  __HAL_DMA_DISABLE(hdma);
 800283e:	6833      	ldr	r3, [r6, #0]
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002840:	251c      	movs	r5, #28
  __HAL_DMA_DISABLE(hdma);
 8002842:	43bb      	bics	r3, r7
 8002844:	6033      	str	r3, [r6, #0]
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002846:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <HAL_DMA_DeInit+0xb4>)
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002848:	46a8      	mov	r8, r5
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 800284a:	18f0      	adds	r0, r6, r3
 800284c:	f7fd fc5c 	bl	8000108 <__udivsi3>
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002850:	0083      	lsls	r3, r0, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002852:	6423      	str	r3, [r4, #64]	@ 0x40
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002854:	402b      	ands	r3, r5
 8002856:	003d      	movs	r5, r7
 8002858:	409d      	lsls	r5, r3
  hdma->Instance->CCR  = 0U;
 800285a:	2200      	movs	r2, #0
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800285c:	002b      	movs	r3, r5
  hdma->Instance->CCR  = 0U;
 800285e:	6032      	str	r2, [r6, #0]
 8002860:	4691      	mov	r9, r2
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002862:	4a1f      	ldr	r2, [pc, #124]	@ (80028e0 <HAL_DMA_DeInit+0xb8>)
 8002864:	6851      	ldr	r1, [r2, #4]
 8002866:	430b      	orrs	r3, r1
 8002868:	6053      	str	r3, [r2, #4]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800286a:	4b1e      	ldr	r3, [pc, #120]	@ (80028e4 <HAL_DMA_DeInit+0xbc>)
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800286c:	2114      	movs	r1, #20
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800286e:	18c5      	adds	r5, r0, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002870:	20ff      	movs	r0, #255	@ 0xff
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002872:	4b1d      	ldr	r3, [pc, #116]	@ (80028e8 <HAL_DMA_DeInit+0xc0>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002874:	00ad      	lsls	r5, r5, #2
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002876:	4030      	ands	r0, r6
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002878:	64a3      	str	r3, [r4, #72]	@ 0x48
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800287a:	6465      	str	r5, [r4, #68]	@ 0x44
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800287c:	3808      	subs	r0, #8
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800287e:	469a      	mov	sl, r3
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002880:	f7fd fc42 	bl	8000108 <__udivsi3>
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8002884:	4643      	mov	r3, r8
 8002886:	4018      	ands	r0, r3
 8002888:	003b      	movs	r3, r7
  hdma->DMAmuxChannel->CCR = 0U;
 800288a:	464a      	mov	r2, r9
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800288c:	4083      	lsls	r3, r0
 800288e:	64e3      	str	r3, [r4, #76]	@ 0x4c
  hdma->DMAmuxChannel->CCR = 0U;
 8002890:	602a      	str	r2, [r5, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002892:	4652      	mov	r2, sl
 8002894:	6053      	str	r3, [r2, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002896:	6863      	ldr	r3, [r4, #4]
 8002898:	1e5a      	subs	r2, r3, #1
 800289a:	2a03      	cmp	r2, #3
 800289c:	d912      	bls.n	80028c4 <HAL_DMA_DeInit+0x9c>
  hdma->XferCpltCallback = NULL;
 800289e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_RESET;
 80028a0:	2225      	movs	r2, #37	@ 0x25
  return HAL_OK;
 80028a2:	2000      	movs	r0, #0
  hdma->XferCpltCallback = NULL;
 80028a4:	62e3      	str	r3, [r4, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80028a6:	6323      	str	r3, [r4, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80028a8:	6363      	str	r3, [r4, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80028aa:	63a3      	str	r3, [r4, #56]	@ 0x38
  hdma->DMAmuxRequestGen = 0U;
 80028ac:	6523      	str	r3, [r4, #80]	@ 0x50
  hdma->DMAmuxRequestGenStatus = 0U;
 80028ae:	6563      	str	r3, [r4, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80028b0:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80028b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80028b4:	54a3      	strb	r3, [r4, r2]
  __HAL_UNLOCK(hdma);
 80028b6:	3a01      	subs	r2, #1
 80028b8:	54a3      	strb	r3, [r4, r2]
}
 80028ba:	bce0      	pop	{r5, r6, r7}
 80028bc:	46ba      	mov	sl, r7
 80028be:	46b1      	mov	r9, r6
 80028c0:	46a8      	mov	r8, r5
 80028c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80028c4:	4909      	ldr	r1, [pc, #36]	@ (80028ec <HAL_DMA_DeInit+0xc4>)
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80028c6:	4097      	lsls	r7, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80028c8:	468c      	mov	ip, r1
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028ca:	464a      	mov	r2, r9
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80028cc:	4463      	add	r3, ip
 80028ce:	009b      	lsls	r3, r3, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80028d0:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028d2:	4b07      	ldr	r3, [pc, #28]	@ (80028f0 <HAL_DMA_DeInit+0xc8>)
 80028d4:	605f      	str	r7, [r3, #4]
 80028d6:	e7e2      	b.n	800289e <HAL_DMA_DeInit+0x76>
    return HAL_ERROR;
 80028d8:	2001      	movs	r0, #1
 80028da:	e7ee      	b.n	80028ba <HAL_DMA_DeInit+0x92>
 80028dc:	bffdfff8 	.word	0xbffdfff8
 80028e0:	40020000 	.word	0x40020000
 80028e4:	10008200 	.word	0x10008200
 80028e8:	40020880 	.word	0x40020880
 80028ec:	1000823f 	.word	0x1000823f
 80028f0:	40020940 	.word	0x40020940

080028f4 <HAL_DMA_Start_IT>:
{
 80028f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028f6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80028f8:	2024      	movs	r0, #36	@ 0x24
 80028fa:	5c25      	ldrb	r5, [r4, r0]
 80028fc:	2d01      	cmp	r5, #1
 80028fe:	d033      	beq.n	8002968 <HAL_DMA_Start_IT+0x74>
 8002900:	2501      	movs	r5, #1
  if (HAL_DMA_STATE_READY == hdma->State)
 8002902:	2625      	movs	r6, #37	@ 0x25
  __HAL_LOCK(hdma);
 8002904:	5425      	strb	r5, [r4, r0]
  if (HAL_DMA_STATE_READY == hdma->State)
 8002906:	5da5      	ldrb	r5, [r4, r6]
    status = HAL_BUSY;
 8002908:	3822      	subs	r0, #34	@ 0x22
  if (HAL_DMA_STATE_READY == hdma->State)
 800290a:	b2ef      	uxtb	r7, r5
 800290c:	2d01      	cmp	r5, #1
 800290e:	d003      	beq.n	8002918 <HAL_DMA_Start_IT+0x24>
  __HAL_UNLOCK(hdma);
 8002910:	2324      	movs	r3, #36	@ 0x24
 8002912:	2200      	movs	r2, #0
 8002914:	54e2      	strb	r2, [r4, r3]
}
 8002916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 8002918:	55a0      	strb	r0, [r4, r6]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800291a:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 800291c:	6825      	ldr	r5, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800291e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002920:	6828      	ldr	r0, [r5, #0]
 8002922:	43b8      	bics	r0, r7
 8002924:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002926:	0020      	movs	r0, r4
 8002928:	f7ff fee4 	bl	80026f4 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 800292c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800292e:	2b00      	cmp	r3, #0
 8002930:	d01c      	beq.n	800296c <HAL_DMA_Start_IT+0x78>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002932:	220e      	movs	r2, #14
 8002934:	682b      	ldr	r3, [r5, #0]
 8002936:	4313      	orrs	r3, r2
 8002938:	602b      	str	r3, [r5, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800293a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800293c:	6813      	ldr	r3, [r2, #0]
 800293e:	03db      	lsls	r3, r3, #15
 8002940:	d504      	bpl.n	800294c <HAL_DMA_Start_IT+0x58>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002942:	2380      	movs	r3, #128	@ 0x80
 8002944:	6811      	ldr	r1, [r2, #0]
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	430b      	orrs	r3, r1
 800294a:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 800294c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800294e:	2b00      	cmp	r3, #0
 8002950:	d004      	beq.n	800295c <HAL_DMA_Start_IT+0x68>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002952:	2280      	movs	r2, #128	@ 0x80
 8002954:	6819      	ldr	r1, [r3, #0]
 8002956:	0052      	lsls	r2, r2, #1
 8002958:	430a      	orrs	r2, r1
 800295a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 800295c:	2201      	movs	r2, #1
 800295e:	682b      	ldr	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002960:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8002962:	4313      	orrs	r3, r2
 8002964:	602b      	str	r3, [r5, #0]
 8002966:	e7d3      	b.n	8002910 <HAL_DMA_Start_IT+0x1c>
  __HAL_LOCK(hdma);
 8002968:	2002      	movs	r0, #2
 800296a:	e7d4      	b.n	8002916 <HAL_DMA_Start_IT+0x22>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800296c:	2204      	movs	r2, #4
 800296e:	682b      	ldr	r3, [r5, #0]
 8002970:	4393      	bics	r3, r2
 8002972:	602b      	str	r3, [r5, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002974:	682b      	ldr	r3, [r5, #0]
 8002976:	3206      	adds	r2, #6
 8002978:	4313      	orrs	r3, r2
 800297a:	602b      	str	r3, [r5, #0]
 800297c:	e7dd      	b.n	800293a <HAL_DMA_Start_IT+0x46>
 800297e:	46c0      	nop			@ (mov r8, r8)

08002980 <HAL_DMA_Abort>:
{
 8002980:	b570      	push	{r4, r5, r6, lr}
  if (NULL == hdma)
 8002982:	2800      	cmp	r0, #0
 8002984:	d032      	beq.n	80029ec <HAL_DMA_Abort+0x6c>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002986:	2325      	movs	r3, #37	@ 0x25
 8002988:	5cc3      	ldrb	r3, [r0, r3]
 800298a:	2b02      	cmp	r3, #2
 800298c:	d129      	bne.n	80029e2 <HAL_DMA_Abort+0x62>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800298e:	210e      	movs	r1, #14
 8002990:	6802      	ldr	r2, [r0, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002992:	4c17      	ldr	r4, [pc, #92]	@ (80029f0 <HAL_DMA_Abort+0x70>)
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002994:	6813      	ldr	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002996:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002998:	438b      	bics	r3, r1
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800299a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800299c:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800299e:	680b      	ldr	r3, [r1, #0]
 80029a0:	4023      	ands	r3, r4
 80029a2:	600b      	str	r3, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80029a4:	2301      	movs	r3, #1
 80029a6:	6811      	ldr	r1, [r2, #0]
 80029a8:	4399      	bics	r1, r3
 80029aa:	6011      	str	r1, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 80029ac:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80029ae:	4911      	ldr	r1, [pc, #68]	@ (80029f4 <HAL_DMA_Abort+0x74>)
 80029b0:	4032      	ands	r2, r6
 80029b2:	4093      	lsls	r3, r2
 80029b4:	684d      	ldr	r5, [r1, #4]
 80029b6:	432b      	orrs	r3, r5
 80029b8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029ba:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80029bc:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80029be:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80029c0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_DMA_Abort+0x52>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	4022      	ands	r2, r4
 80029ca:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029cc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80029ce:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80029d0:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80029d2:	2325      	movs	r3, #37	@ 0x25
 80029d4:	2201      	movs	r2, #1
 80029d6:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80029d8:	2200      	movs	r2, #0
 80029da:	3b01      	subs	r3, #1
 80029dc:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 80029de:	2000      	movs	r0, #0
}
 80029e0:	bd70      	pop	{r4, r5, r6, pc}
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e2:	2304      	movs	r3, #4
    __HAL_UNLOCK(hdma);
 80029e4:	2200      	movs	r2, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029e6:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80029e8:	3320      	adds	r3, #32
 80029ea:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80029ec:	2001      	movs	r0, #1
 80029ee:	e7f7      	b.n	80029e0 <HAL_DMA_Abort+0x60>
 80029f0:	fffffeff 	.word	0xfffffeff
 80029f4:	40020000 	.word	0x40020000

080029f8 <HAL_DMA_Abort_IT>:
  __HAL_LOCK(hdma);
 80029f8:	2224      	movs	r2, #36	@ 0x24
 80029fa:	2301      	movs	r3, #1
{
 80029fc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80029fe:	5483      	strb	r3, [r0, r2]
  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002a00:	3201      	adds	r2, #1
 8002a02:	5c82      	ldrb	r2, [r0, r2]
 8002a04:	2a02      	cmp	r2, #2
 8002a06:	d003      	beq.n	8002a10 <HAL_DMA_Abort_IT+0x18>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a08:	3303      	adds	r3, #3
 8002a0a:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 8002a0c:	2001      	movs	r0, #1
}
 8002a0e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a10:	240e      	movs	r4, #14
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002a12:	261c      	movs	r6, #28
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a14:	6802      	ldr	r2, [r0, #0]
 8002a16:	6811      	ldr	r1, [r2, #0]
 8002a18:	43a1      	bics	r1, r4
 8002a1a:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8002a1c:	6811      	ldr	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a1e:	4c13      	ldr	r4, [pc, #76]	@ (8002a6c <HAL_DMA_Abort_IT+0x74>)
    __HAL_DMA_DISABLE(hdma);
 8002a20:	4399      	bics	r1, r3
 8002a22:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a24:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002a26:	680a      	ldr	r2, [r1, #0]
 8002a28:	4022      	ands	r2, r4
 8002a2a:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002a2c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002a2e:	4910      	ldr	r1, [pc, #64]	@ (8002a70 <HAL_DMA_Abort_IT+0x78>)
 8002a30:	4032      	ands	r2, r6
 8002a32:	4093      	lsls	r3, r2
 8002a34:	684d      	ldr	r5, [r1, #4]
 8002a36:	432b      	orrs	r3, r5
 8002a38:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a3a:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002a3c:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002a3e:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002a40:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d005      	beq.n	8002a52 <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4022      	ands	r2, r4
 8002a4a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002a4e:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002a50:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002a52:	2325      	movs	r3, #37	@ 0x25
 8002a54:	2201      	movs	r2, #1
 8002a56:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002a58:	2200      	movs	r2, #0
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8002a5e:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d000      	beq.n	8002a66 <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8002a64:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8002a66:	2000      	movs	r0, #0
 8002a68:	e7d1      	b.n	8002a0e <HAL_DMA_Abort_IT+0x16>
 8002a6a:	46c0      	nop			@ (mov r8, r8)
 8002a6c:	fffffeff 	.word	0xfffffeff
 8002a70:	40020000 	.word	0x40020000

08002a74 <HAL_DMA_IRQHandler>:
{
 8002a74:	b570      	push	{r4, r5, r6, lr}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a76:	211c      	movs	r1, #28
 8002a78:	2404      	movs	r4, #4
  uint32_t flag_it = DMA1->ISR;
 8002a7a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b28 <HAL_DMA_IRQHandler+0xb4>)
  uint32_t source_it = hdma->Instance->CCR;
 8002a7c:	6806      	ldr	r6, [r0, #0]
  uint32_t flag_it = DMA1->ISR;
 8002a7e:	681a      	ldr	r2, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a80:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  uint32_t source_it = hdma->Instance->CCR;
 8002a82:	6835      	ldr	r5, [r6, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a84:	400b      	ands	r3, r1
 8002a86:	0021      	movs	r1, r4
 8002a88:	4099      	lsls	r1, r3
 8002a8a:	420a      	tst	r2, r1
 8002a8c:	d010      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x3c>
 8002a8e:	422c      	tst	r4, r5
 8002a90:	d00e      	beq.n	8002ab0 <HAL_DMA_IRQHandler+0x3c>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a92:	6833      	ldr	r3, [r6, #0]
 8002a94:	069b      	lsls	r3, r3, #26
 8002a96:	d402      	bmi.n	8002a9e <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a98:	6833      	ldr	r3, [r6, #0]
 8002a9a:	43a3      	bics	r3, r4
 8002a9c:	6033      	str	r3, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002a9e:	4b22      	ldr	r3, [pc, #136]	@ (8002b28 <HAL_DMA_IRQHandler+0xb4>)
 8002aa0:	685a      	ldr	r2, [r3, #4]
 8002aa2:	4311      	orrs	r1, r2
 8002aa4:	6059      	str	r1, [r3, #4]
    if (hdma->XferHalfCpltCallback != NULL)
 8002aa6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d000      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002aac:	4798      	blx	r3
}
 8002aae:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002ab0:	2402      	movs	r4, #2
 8002ab2:	0021      	movs	r1, r4
 8002ab4:	4099      	lsls	r1, r3
 8002ab6:	420a      	tst	r2, r1
 8002ab8:	d017      	beq.n	8002aea <HAL_DMA_IRQHandler+0x76>
 8002aba:	422c      	tst	r4, r5
 8002abc:	d015      	beq.n	8002aea <HAL_DMA_IRQHandler+0x76>
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002abe:	6833      	ldr	r3, [r6, #0]
 8002ac0:	069b      	lsls	r3, r3, #26
 8002ac2:	d406      	bmi.n	8002ad2 <HAL_DMA_IRQHandler+0x5e>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002ac4:	220a      	movs	r2, #10
 8002ac6:	6833      	ldr	r3, [r6, #0]
 8002ac8:	4393      	bics	r3, r2
 8002aca:	6033      	str	r3, [r6, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002acc:	2325      	movs	r3, #37	@ 0x25
 8002ace:	3a09      	subs	r2, #9
 8002ad0:	54c2      	strb	r2, [r0, r3]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002ad2:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <HAL_DMA_IRQHandler+0xb4>)
 8002ad4:	685a      	ldr	r2, [r3, #4]
 8002ad6:	4311      	orrs	r1, r2
 8002ad8:	6059      	str	r1, [r3, #4]
    __HAL_UNLOCK(hdma);
 8002ada:	2200      	movs	r2, #0
 8002adc:	2324      	movs	r3, #36	@ 0x24
 8002ade:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferCpltCallback != NULL)
 8002ae0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d0e3      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002ae6:	4798      	blx	r3
  return;
 8002ae8:	e7e1      	b.n	8002aae <HAL_DMA_IRQHandler+0x3a>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002aea:	2108      	movs	r1, #8
 8002aec:	000c      	movs	r4, r1
 8002aee:	409c      	lsls	r4, r3
 8002af0:	4222      	tst	r2, r4
 8002af2:	d0dc      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3a>
 8002af4:	4229      	tst	r1, r5
 8002af6:	d0da      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002af8:	6832      	ldr	r2, [r6, #0]
 8002afa:	3106      	adds	r1, #6
 8002afc:	438a      	bics	r2, r1
 8002afe:	6032      	str	r2, [r6, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002b00:	2201      	movs	r2, #1
 8002b02:	0015      	movs	r5, r2
 8002b04:	409d      	lsls	r5, r3
 8002b06:	002b      	movs	r3, r5
 8002b08:	4907      	ldr	r1, [pc, #28]	@ (8002b28 <HAL_DMA_IRQHandler+0xb4>)
 8002b0a:	684c      	ldr	r4, [r1, #4]
 8002b0c:	4323      	orrs	r3, r4
 8002b0e:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002b10:	2325      	movs	r3, #37	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b12:	63c2      	str	r2, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002b14:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002b16:	2200      	movs	r2, #0
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 8002b1c:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d0c5      	beq.n	8002aae <HAL_DMA_IRQHandler+0x3a>
      hdma->XferErrorCallback(hdma);
 8002b22:	4798      	blx	r3
  return;
 8002b24:	e7c3      	b.n	8002aae <HAL_DMA_IRQHandler+0x3a>
 8002b26:	46c0      	nop			@ (mov r8, r8)
 8002b28:	40020000 	.word	0x40020000

08002b2c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8002b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2e:	4645      	mov	r5, r8
 8002b30:	46de      	mov	lr, fp
 8002b32:	4657      	mov	r7, sl
 8002b34:	464e      	mov	r6, r9
 8002b36:	b5e0      	push	{r5, r6, r7, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b38:	680d      	ldr	r5, [r1, #0]
  uint32_t position = 0U;
 8002b3a:	2300      	movs	r3, #0
{
 8002b3c:	b083      	sub	sp, #12
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002b3e:	2d00      	cmp	r5, #0
 8002b40:	d100      	bne.n	8002b44 <HAL_GPIO_Init+0x18>
 8002b42:	e082      	b.n	8002c4a <HAL_GPIO_Init+0x11e>
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
        EXTI->EXTICR[position >> 2U] = tmp;

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8002b44:	4688      	mov	r8, r1
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8002b46:	2401      	movs	r4, #1
 8002b48:	002a      	movs	r2, r5
 8002b4a:	409c      	lsls	r4, r3
 8002b4c:	4022      	ands	r2, r4
 8002b4e:	4694      	mov	ip, r2
    if (iocurrent != 0U)
 8002b50:	4225      	tst	r5, r4
 8002b52:	d075      	beq.n	8002c40 <HAL_GPIO_Init+0x114>
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b54:	4642      	mov	r2, r8
 8002b56:	6852      	ldr	r2, [r2, #4]
 8002b58:	2610      	movs	r6, #16
 8002b5a:	0011      	movs	r1, r2
 8002b5c:	43b1      	bics	r1, r6
 8002b5e:	4689      	mov	r9, r1
 8002b60:	2902      	cmp	r1, #2
 8002b62:	d100      	bne.n	8002b66 <HAL_GPIO_Init+0x3a>
 8002b64:	e078      	b.n	8002c58 <HAL_GPIO_Init+0x12c>
      tmp = GPIOx->MODER;
 8002b66:	6801      	ldr	r1, [r0, #0]
 8002b68:	005e      	lsls	r6, r3, #1
 8002b6a:	468b      	mov	fp, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002b6c:	2103      	movs	r1, #3
 8002b6e:	40b1      	lsls	r1, r6
 8002b70:	468a      	mov	sl, r1
 8002b72:	43c9      	mvns	r1, r1
 8002b74:	465f      	mov	r7, fp
 8002b76:	9101      	str	r1, [sp, #4]
 8002b78:	4651      	mov	r1, sl
 8002b7a:	438f      	bics	r7, r1
 8002b7c:	46bb      	mov	fp, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002b7e:	2703      	movs	r7, #3
 8002b80:	4017      	ands	r7, r2
 8002b82:	40b7      	lsls	r7, r6
 8002b84:	46ba      	mov	sl, r7
 8002b86:	465f      	mov	r7, fp
 8002b88:	4651      	mov	r1, sl
 8002b8a:	430f      	orrs	r7, r1
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	4249      	negs	r1, r1
 8002b90:	468a      	mov	sl, r1
 8002b92:	44d1      	add	r9, sl
 8002b94:	4649      	mov	r1, r9
      GPIOx->MODER = tmp;
 8002b96:	6007      	str	r7, [r0, #0]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b98:	2901      	cmp	r1, #1
 8002b9a:	d800      	bhi.n	8002b9e <HAL_GPIO_Init+0x72>
 8002b9c:	e088      	b.n	8002cb0 <HAL_GPIO_Init+0x184>
      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8002b9e:	2a03      	cmp	r2, #3
 8002ba0:	d04e      	beq.n	8002c40 <HAL_GPIO_Init+0x114>
        tmp = GPIOx->PUPDR;
 8002ba2:	68c4      	ldr	r4, [r0, #12]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002ba4:	9901      	ldr	r1, [sp, #4]
 8002ba6:	400c      	ands	r4, r1
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8002ba8:	4641      	mov	r1, r8
 8002baa:	6889      	ldr	r1, [r1, #8]
 8002bac:	40b1      	lsls	r1, r6
 8002bae:	4321      	orrs	r1, r4
        GPIOx->PUPDR = tmp;
 8002bb0:	60c1      	str	r1, [r0, #12]
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002bb2:	2180      	movs	r1, #128	@ 0x80
 8002bb4:	0549      	lsls	r1, r1, #21
 8002bb6:	420a      	tst	r2, r1
 8002bb8:	d042      	beq.n	8002c40 <HAL_GPIO_Init+0x114>
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bba:	2603      	movs	r6, #3
 8002bbc:	270f      	movs	r7, #15
 8002bbe:	4c5d      	ldr	r4, [pc, #372]	@ (8002d34 <HAL_GPIO_Init+0x208>)
 8002bc0:	401e      	ands	r6, r3
 8002bc2:	46a1      	mov	r9, r4
 8002bc4:	00f6      	lsls	r6, r6, #3
 8002bc6:	40b7      	lsls	r7, r6
        tmp = EXTI->EXTICR[position >> 2U];
 8002bc8:	0899      	lsrs	r1, r3, #2
 8002bca:	0089      	lsls	r1, r1, #2
 8002bcc:	4449      	add	r1, r9
 8002bce:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bd0:	43bc      	bics	r4, r7
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002bd2:	27a0      	movs	r7, #160	@ 0xa0
 8002bd4:	05ff      	lsls	r7, r7, #23
 8002bd6:	42b8      	cmp	r0, r7
 8002bd8:	d012      	beq.n	8002c00 <HAL_GPIO_Init+0xd4>
 8002bda:	4f57      	ldr	r7, [pc, #348]	@ (8002d38 <HAL_GPIO_Init+0x20c>)
 8002bdc:	42b8      	cmp	r0, r7
 8002bde:	d100      	bne.n	8002be2 <HAL_GPIO_Init+0xb6>
 8002be0:	e09c      	b.n	8002d1c <HAL_GPIO_Init+0x1f0>
 8002be2:	4f56      	ldr	r7, [pc, #344]	@ (8002d3c <HAL_GPIO_Init+0x210>)
 8002be4:	42b8      	cmp	r0, r7
 8002be6:	d100      	bne.n	8002bea <HAL_GPIO_Init+0xbe>
 8002be8:	e09c      	b.n	8002d24 <HAL_GPIO_Init+0x1f8>
 8002bea:	4f55      	ldr	r7, [pc, #340]	@ (8002d40 <HAL_GPIO_Init+0x214>)
 8002bec:	42b8      	cmp	r0, r7
 8002bee:	d100      	bne.n	8002bf2 <HAL_GPIO_Init+0xc6>
 8002bf0:	e090      	b.n	8002d14 <HAL_GPIO_Init+0x1e8>
 8002bf2:	4f54      	ldr	r7, [pc, #336]	@ (8002d44 <HAL_GPIO_Init+0x218>)
 8002bf4:	42b8      	cmp	r0, r7
 8002bf6:	d100      	bne.n	8002bfa <HAL_GPIO_Init+0xce>
 8002bf8:	e098      	b.n	8002d2c <HAL_GPIO_Init+0x200>
 8002bfa:	2706      	movs	r7, #6
 8002bfc:	40b7      	lsls	r7, r6
 8002bfe:	433c      	orrs	r4, r7
        EXTI->EXTICR[position >> 2U] = tmp;
 8002c00:	660c      	str	r4, [r1, #96]	@ 0x60
        tmp = EXTI->IMR1;
 8002c02:	2180      	movs	r1, #128	@ 0x80
 8002c04:	4c4b      	ldr	r4, [pc, #300]	@ (8002d34 <HAL_GPIO_Init+0x208>)
 8002c06:	5861      	ldr	r1, [r4, r1]
        tmp &= ~((uint32_t)iocurrent);
 8002c08:	4664      	mov	r4, ip
 8002c0a:	43e4      	mvns	r4, r4
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c0c:	03d6      	lsls	r6, r2, #15
 8002c0e:	d465      	bmi.n	8002cdc <HAL_GPIO_Init+0x1b0>
        {
          tmp |= iocurrent;
        }
        EXTI->IMR1 = tmp;
 8002c10:	2680      	movs	r6, #128	@ 0x80
 8002c12:	4f48      	ldr	r7, [pc, #288]	@ (8002d34 <HAL_GPIO_Init+0x208>)
        tmp &= ~((uint32_t)iocurrent);
 8002c14:	4021      	ands	r1, r4
        EXTI->IMR1 = tmp;
 8002c16:	51b9      	str	r1, [r7, r6]

        tmp = EXTI->EMR1;
 8002c18:	2184      	movs	r1, #132	@ 0x84
 8002c1a:	5879      	ldr	r1, [r7, r1]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c1c:	0396      	lsls	r6, r2, #14
 8002c1e:	d466      	bmi.n	8002cee <HAL_GPIO_Init+0x1c2>
        {
          tmp |= iocurrent;
        }
        EXTI->EMR1 = tmp;
 8002c20:	2684      	movs	r6, #132	@ 0x84
 8002c22:	4f44      	ldr	r7, [pc, #272]	@ (8002d34 <HAL_GPIO_Init+0x208>)
        tmp &= ~((uint32_t)iocurrent);
 8002c24:	4021      	ands	r1, r4
        EXTI->EMR1 = tmp;
 8002c26:	51b9      	str	r1, [r7, r6]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8002c28:	6839      	ldr	r1, [r7, #0]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c2a:	02d6      	lsls	r6, r2, #11
 8002c2c:	d467      	bmi.n	8002cfe <HAL_GPIO_Init+0x1d2>
        {
          tmp |= iocurrent;
        }
        EXTI->RTSR1 = tmp;
 8002c2e:	4e41      	ldr	r6, [pc, #260]	@ (8002d34 <HAL_GPIO_Init+0x208>)
        tmp &= ~((uint32_t)iocurrent);
 8002c30:	4021      	ands	r1, r4
        EXTI->RTSR1 = tmp;
 8002c32:	6031      	str	r1, [r6, #0]

        tmp = EXTI->FTSR1;
 8002c34:	6871      	ldr	r1, [r6, #4]
        tmp &= ~((uint32_t)iocurrent);
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c36:	0292      	lsls	r2, r2, #10
 8002c38:	d468      	bmi.n	8002d0c <HAL_GPIO_Init+0x1e0>
        tmp &= ~((uint32_t)iocurrent);
 8002c3a:	4021      	ands	r1, r4
        {
          tmp |= iocurrent;
        }
        EXTI->FTSR1 = tmp;
 8002c3c:	4a3d      	ldr	r2, [pc, #244]	@ (8002d34 <HAL_GPIO_Init+0x208>)
 8002c3e:	6051      	str	r1, [r2, #4]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c40:	002a      	movs	r2, r5
      }
    }

    position++;
 8002c42:	3301      	adds	r3, #1
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8002c44:	40da      	lsrs	r2, r3
 8002c46:	d000      	beq.n	8002c4a <HAL_GPIO_Init+0x11e>
 8002c48:	e77d      	b.n	8002b46 <HAL_GPIO_Init+0x1a>
  }
}
 8002c4a:	b003      	add	sp, #12
 8002c4c:	bcf0      	pop	{r4, r5, r6, r7}
 8002c4e:	46bb      	mov	fp, r7
 8002c50:	46b2      	mov	sl, r6
 8002c52:	46a9      	mov	r9, r5
 8002c54:	46a0      	mov	r8, r4
 8002c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tmp = GPIOx->AFR[position >> 3U];
 8002c58:	08de      	lsrs	r6, r3, #3
 8002c5a:	00b6      	lsls	r6, r6, #2
 8002c5c:	1986      	adds	r6, r0, r6
 8002c5e:	6a31      	ldr	r1, [r6, #32]
 8002c60:	4689      	mov	r9, r1
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002c62:	2107      	movs	r1, #7
 8002c64:	4019      	ands	r1, r3
 8002c66:	0089      	lsls	r1, r1, #2
 8002c68:	468a      	mov	sl, r1
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	4657      	mov	r7, sl
 8002c6e:	40b9      	lsls	r1, r7
 8002c70:	464f      	mov	r7, r9
 8002c72:	438f      	bics	r7, r1
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c74:	4641      	mov	r1, r8
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002c76:	46b9      	mov	r9, r7
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8002c78:	270f      	movs	r7, #15
 8002c7a:	6909      	ldr	r1, [r1, #16]
 8002c7c:	4039      	ands	r1, r7
 8002c7e:	4657      	mov	r7, sl
 8002c80:	40b9      	lsls	r1, r7
 8002c82:	464f      	mov	r7, r9
 8002c84:	4339      	orrs	r1, r7
        GPIOx->AFR[position >> 3U] = tmp;
 8002c86:	6231      	str	r1, [r6, #32]
      tmp = GPIOx->MODER;
 8002c88:	6801      	ldr	r1, [r0, #0]
 8002c8a:	005e      	lsls	r6, r3, #1
 8002c8c:	468a      	mov	sl, r1
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002c8e:	2103      	movs	r1, #3
 8002c90:	40b1      	lsls	r1, r6
 8002c92:	4689      	mov	r9, r1
 8002c94:	43c9      	mvns	r1, r1
 8002c96:	4657      	mov	r7, sl
 8002c98:	9101      	str	r1, [sp, #4]
 8002c9a:	4649      	mov	r1, r9
 8002c9c:	438f      	bics	r7, r1
 8002c9e:	46ba      	mov	sl, r7
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8002ca0:	2703      	movs	r7, #3
 8002ca2:	4017      	ands	r7, r2
 8002ca4:	40b7      	lsls	r7, r6
 8002ca6:	46b9      	mov	r9, r7
 8002ca8:	4657      	mov	r7, sl
 8002caa:	4649      	mov	r1, r9
 8002cac:	430f      	orrs	r7, r1
      GPIOx->MODER = tmp;
 8002cae:	6007      	str	r7, [r0, #0]
        tmp = GPIOx->OSPEEDR;
 8002cb0:	6887      	ldr	r7, [r0, #8]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002cb2:	9901      	ldr	r1, [sp, #4]
 8002cb4:	400f      	ands	r7, r1
 8002cb6:	46ba      	mov	sl, r7
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002cb8:	4647      	mov	r7, r8
 8002cba:	68ff      	ldr	r7, [r7, #12]
 8002cbc:	40b7      	lsls	r7, r6
 8002cbe:	46b9      	mov	r9, r7
 8002cc0:	4657      	mov	r7, sl
 8002cc2:	4649      	mov	r1, r9
 8002cc4:	430f      	orrs	r7, r1
        GPIOx->OSPEEDR = tmp;
 8002cc6:	6087      	str	r7, [r0, #8]
        tmp = GPIOx->OTYPER;
 8002cc8:	6841      	ldr	r1, [r0, #4]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cca:	000f      	movs	r7, r1
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002ccc:	2101      	movs	r1, #1
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cce:	43a7      	bics	r7, r4
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002cd0:	0914      	lsrs	r4, r2, #4
 8002cd2:	400c      	ands	r4, r1
 8002cd4:	409c      	lsls	r4, r3
 8002cd6:	433c      	orrs	r4, r7
        GPIOx->OTYPER = tmp;
 8002cd8:	6044      	str	r4, [r0, #4]
 8002cda:	e760      	b.n	8002b9e <HAL_GPIO_Init+0x72>
          tmp |= iocurrent;
 8002cdc:	4666      	mov	r6, ip
 8002cde:	4331      	orrs	r1, r6
        EXTI->IMR1 = tmp;
 8002ce0:	2680      	movs	r6, #128	@ 0x80
 8002ce2:	4f14      	ldr	r7, [pc, #80]	@ (8002d34 <HAL_GPIO_Init+0x208>)
 8002ce4:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->EMR1;
 8002ce6:	2184      	movs	r1, #132	@ 0x84
 8002ce8:	5879      	ldr	r1, [r7, r1]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002cea:	0396      	lsls	r6, r2, #14
 8002cec:	d598      	bpl.n	8002c20 <HAL_GPIO_Init+0xf4>
          tmp |= iocurrent;
 8002cee:	4666      	mov	r6, ip
 8002cf0:	4331      	orrs	r1, r6
        EXTI->EMR1 = tmp;
 8002cf2:	2684      	movs	r6, #132	@ 0x84
 8002cf4:	4f0f      	ldr	r7, [pc, #60]	@ (8002d34 <HAL_GPIO_Init+0x208>)
 8002cf6:	51b9      	str	r1, [r7, r6]
        tmp = EXTI->RTSR1;
 8002cf8:	6839      	ldr	r1, [r7, #0]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002cfa:	02d6      	lsls	r6, r2, #11
 8002cfc:	d597      	bpl.n	8002c2e <HAL_GPIO_Init+0x102>
          tmp |= iocurrent;
 8002cfe:	4666      	mov	r6, ip
 8002d00:	4331      	orrs	r1, r6
        EXTI->RTSR1 = tmp;
 8002d02:	4e0c      	ldr	r6, [pc, #48]	@ (8002d34 <HAL_GPIO_Init+0x208>)
 8002d04:	6031      	str	r1, [r6, #0]
        tmp = EXTI->FTSR1;
 8002d06:	6871      	ldr	r1, [r6, #4]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d08:	0292      	lsls	r2, r2, #10
 8002d0a:	d596      	bpl.n	8002c3a <HAL_GPIO_Init+0x10e>
          tmp |= iocurrent;
 8002d0c:	4662      	mov	r2, ip
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	0011      	movs	r1, r2
 8002d12:	e793      	b.n	8002c3c <HAL_GPIO_Init+0x110>
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d14:	2703      	movs	r7, #3
 8002d16:	40b7      	lsls	r7, r6
 8002d18:	433c      	orrs	r4, r7
 8002d1a:	e771      	b.n	8002c00 <HAL_GPIO_Init+0xd4>
 8002d1c:	2701      	movs	r7, #1
 8002d1e:	40b7      	lsls	r7, r6
 8002d20:	433c      	orrs	r4, r7
 8002d22:	e76d      	b.n	8002c00 <HAL_GPIO_Init+0xd4>
 8002d24:	2702      	movs	r7, #2
 8002d26:	40b7      	lsls	r7, r6
 8002d28:	433c      	orrs	r4, r7
 8002d2a:	e769      	b.n	8002c00 <HAL_GPIO_Init+0xd4>
 8002d2c:	2705      	movs	r7, #5
 8002d2e:	40b7      	lsls	r7, r6
 8002d30:	433c      	orrs	r4, r7
 8002d32:	e765      	b.n	8002c00 <HAL_GPIO_Init+0xd4>
 8002d34:	40021800 	.word	0x40021800
 8002d38:	50000400 	.word	0x50000400
 8002d3c:	50000800 	.word	0x50000800
 8002d40:	50000c00 	.word	0x50000c00
 8002d44:	50001400 	.word	0x50001400

08002d48 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002d48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4a:	46de      	mov	lr, fp
 8002d4c:	4657      	mov	r7, sl
 8002d4e:	464e      	mov	r6, r9
 8002d50:	4645      	mov	r5, r8
 8002d52:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8002d54:	2300      	movs	r3, #0
{
 8002d56:	b083      	sub	sp, #12
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8002d58:	2900      	cmp	r1, #0
 8002d5a:	d068      	beq.n	8002e2e <HAL_GPIO_DeInit+0xe6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4691      	mov	r9, r2
    if (iocurrent != 0U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = EXTI->EXTICR[position >> 2U];
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002d60:	3202      	adds	r2, #2
 8002d62:	4693      	mov	fp, r2
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002d64:	4a3d      	ldr	r2, [pc, #244]	@ (8002e5c <HAL_GPIO_DeInit+0x114>)
 8002d66:	4694      	mov	ip, r2
 8002d68:	e047      	b.n	8002dfa <HAL_GPIO_DeInit+0xb2>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002d6a:	4c3d      	ldr	r4, [pc, #244]	@ (8002e60 <HAL_GPIO_DeInit+0x118>)
 8002d6c:	42a0      	cmp	r0, r4
 8002d6e:	d065      	beq.n	8002e3c <HAL_GPIO_DeInit+0xf4>
 8002d70:	4c3c      	ldr	r4, [pc, #240]	@ (8002e64 <HAL_GPIO_DeInit+0x11c>)
 8002d72:	42a0      	cmp	r0, r4
 8002d74:	d066      	beq.n	8002e44 <HAL_GPIO_DeInit+0xfc>
 8002d76:	4c3c      	ldr	r4, [pc, #240]	@ (8002e68 <HAL_GPIO_DeInit+0x120>)
 8002d78:	42a0      	cmp	r0, r4
 8002d7a:	d067      	beq.n	8002e4c <HAL_GPIO_DeInit+0x104>
 8002d7c:	4c3b      	ldr	r4, [pc, #236]	@ (8002e6c <HAL_GPIO_DeInit+0x124>)
 8002d7e:	42a0      	cmp	r0, r4
 8002d80:	d068      	beq.n	8002e54 <HAL_GPIO_DeInit+0x10c>
 8002d82:	2406      	movs	r4, #6
 8002d84:	40ac      	lsls	r4, r5
 8002d86:	0025      	movs	r5, r4
 8002d88:	42ae      	cmp	r6, r5
 8002d8a:	d114      	bne.n	8002db6 <HAL_GPIO_DeInit+0x6e>
        EXTI->IMR1 &= ~(iocurrent);
 8002d8c:	2480      	movs	r4, #128	@ 0x80
 8002d8e:	4665      	mov	r5, ip
 8002d90:	4666      	mov	r6, ip
 8002d92:	592d      	ldr	r5, [r5, r4]
 8002d94:	43bd      	bics	r5, r7
 8002d96:	5135      	str	r5, [r6, r4]
        EXTI->EMR1 &= ~(iocurrent);
 8002d98:	3404      	adds	r4, #4
 8002d9a:	5935      	ldr	r5, [r6, r4]
 8002d9c:	43bd      	bics	r5, r7
 8002d9e:	5135      	str	r5, [r6, r4]
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
        EXTI->FTSR1 &= ~(iocurrent);

        tmp = (0x0FUL) << (8U * (position & 0x03U));
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002da0:	4644      	mov	r4, r8
        EXTI->RTSR1 &= ~(iocurrent);
 8002da2:	6835      	ldr	r5, [r6, #0]
 8002da4:	43bd      	bics	r5, r7
 8002da6:	6035      	str	r5, [r6, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8002da8:	6875      	ldr	r5, [r6, #4]
 8002daa:	43bd      	bics	r5, r7
 8002dac:	6075      	str	r5, [r6, #4]
        EXTI->EXTICR[position >> 2U] &= ~tmp;
 8002dae:	9e01      	ldr	r6, [sp, #4]
 8002db0:	6e35      	ldr	r5, [r6, #96]	@ 0x60
 8002db2:	43a5      	bics	r5, r4
 8002db4:	6635      	str	r5, [r6, #96]	@ 0x60
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8002db6:	465e      	mov	r6, fp
 8002db8:	005d      	lsls	r5, r3, #1
 8002dba:	40ae      	lsls	r6, r5
 8002dbc:	6804      	ldr	r4, [r0, #0]
 8002dbe:	0035      	movs	r5, r6
 8002dc0:	4334      	orrs	r4, r6
 8002dc2:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8002dc4:	08dc      	lsrs	r4, r3, #3
 8002dc6:	00a4      	lsls	r4, r4, #2
 8002dc8:	1904      	adds	r4, r0, r4
 8002dca:	6a26      	ldr	r6, [r4, #32]
 8002dcc:	2707      	movs	r7, #7
 8002dce:	46b0      	mov	r8, r6
 8002dd0:	260f      	movs	r6, #15
 8002dd2:	401f      	ands	r7, r3
 8002dd4:	00bf      	lsls	r7, r7, #2
 8002dd6:	40be      	lsls	r6, r7
 8002dd8:	0037      	movs	r7, r6
 8002dda:	4646      	mov	r6, r8
 8002ddc:	43be      	bics	r6, r7
 8002dde:	6226      	str	r6, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8002de0:	6884      	ldr	r4, [r0, #8]
 8002de2:	43ac      	bics	r4, r5
 8002de4:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8002de6:	6844      	ldr	r4, [r0, #4]
 8002de8:	4394      	bics	r4, r2
 8002dea:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8002dec:	68c2      	ldr	r2, [r0, #12]
 8002dee:	43aa      	bics	r2, r5
 8002df0:	60c2      	str	r2, [r0, #12]
  while ((GPIO_Pin >> position) != 0U)
 8002df2:	000a      	movs	r2, r1
    }

    position++;
 8002df4:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8002df6:	40da      	lsrs	r2, r3
 8002df8:	d019      	beq.n	8002e2e <HAL_GPIO_DeInit+0xe6>
    iocurrent = (GPIO_Pin) & (1UL << position);
 8002dfa:	464a      	mov	r2, r9
 8002dfc:	000f      	movs	r7, r1
 8002dfe:	409a      	lsls	r2, r3
 8002e00:	4017      	ands	r7, r2
    if (iocurrent != 0U)
 8002e02:	4211      	tst	r1, r2
 8002e04:	d0f5      	beq.n	8002df2 <HAL_GPIO_DeInit+0xaa>
      tmp = EXTI->EXTICR[position >> 2U];
 8002e06:	4d15      	ldr	r5, [pc, #84]	@ (8002e5c <HAL_GPIO_DeInit+0x114>)
 8002e08:	089c      	lsrs	r4, r3, #2
 8002e0a:	46a8      	mov	r8, r5
 8002e0c:	00a4      	lsls	r4, r4, #2
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e0e:	465d      	mov	r5, fp
 8002e10:	4444      	add	r4, r8
      tmp = EXTI->EXTICR[position >> 2U];
 8002e12:	6e26      	ldr	r6, [r4, #96]	@ 0x60
      tmp &= ((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8002e14:	9401      	str	r4, [sp, #4]
 8002e16:	240f      	movs	r4, #15
 8002e18:	401d      	ands	r5, r3
 8002e1a:	00ed      	lsls	r5, r5, #3
 8002e1c:	40ac      	lsls	r4, r5
 8002e1e:	46a0      	mov	r8, r4
 8002e20:	4026      	ands	r6, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002e22:	24a0      	movs	r4, #160	@ 0xa0
 8002e24:	05e4      	lsls	r4, r4, #23
 8002e26:	42a0      	cmp	r0, r4
 8002e28:	d19f      	bne.n	8002d6a <HAL_GPIO_DeInit+0x22>
 8002e2a:	2500      	movs	r5, #0
 8002e2c:	e7ac      	b.n	8002d88 <HAL_GPIO_DeInit+0x40>
  }
}
 8002e2e:	b003      	add	sp, #12
 8002e30:	bcf0      	pop	{r4, r5, r6, r7}
 8002e32:	46bb      	mov	fp, r7
 8002e34:	46b2      	mov	sl, r6
 8002e36:	46a9      	mov	r9, r5
 8002e38:	46a0      	mov	r8, r4
 8002e3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos)))
 8002e3c:	464c      	mov	r4, r9
 8002e3e:	40ac      	lsls	r4, r5
 8002e40:	0025      	movs	r5, r4
 8002e42:	e7a1      	b.n	8002d88 <HAL_GPIO_DeInit+0x40>
 8002e44:	2402      	movs	r4, #2
 8002e46:	40ac      	lsls	r4, r5
 8002e48:	0025      	movs	r5, r4
 8002e4a:	e79d      	b.n	8002d88 <HAL_GPIO_DeInit+0x40>
 8002e4c:	465c      	mov	r4, fp
 8002e4e:	40ac      	lsls	r4, r5
 8002e50:	0025      	movs	r5, r4
 8002e52:	e799      	b.n	8002d88 <HAL_GPIO_DeInit+0x40>
 8002e54:	2405      	movs	r4, #5
 8002e56:	40ac      	lsls	r4, r5
 8002e58:	0025      	movs	r5, r4
 8002e5a:	e795      	b.n	8002d88 <HAL_GPIO_DeInit+0x40>
 8002e5c:	40021800 	.word	0x40021800
 8002e60:	50000400 	.word	0x50000400
 8002e64:	50000800 	.word	0x50000800
 8002e68:	50000c00 	.word	0x50000c00
 8002e6c:	50001400 	.word	0x50001400

08002e70 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8002e70:	6900      	ldr	r0, [r0, #16]
 8002e72:	4008      	ands	r0, r1
 8002e74:	1e43      	subs	r3, r0, #1
 8002e76:	4198      	sbcs	r0, r3
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002e78:	b2c0      	uxtb	r0, r0
}
 8002e7a:	4770      	bx	lr

08002e7c <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <HAL_GPIO_EXTI_IRQHandler+0x30>)
{
 8002e7e:	b510      	push	{r4, lr}
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002e80:	68da      	ldr	r2, [r3, #12]
{
 8002e82:	0004      	movs	r4, r0
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8002e84:	4210      	tst	r0, r2
 8002e86:	d104      	bne.n	8002e92 <HAL_GPIO_EXTI_IRQHandler+0x16>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002e88:	4b08      	ldr	r3, [pc, #32]	@ (8002eac <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8002e8a:	691a      	ldr	r2, [r3, #16]
 8002e8c:	4222      	tst	r2, r4
 8002e8e:	d107      	bne.n	8002ea0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
  }
}
 8002e90:	bd10      	pop	{r4, pc}
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8002e92:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8002e94:	f7ff f9da 	bl	800224c <HAL_GPIO_EXTI_Rising_Callback>
  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8002e98:	4b04      	ldr	r3, [pc, #16]	@ (8002eac <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8002e9a:	691a      	ldr	r2, [r3, #16]
 8002e9c:	4222      	tst	r2, r4
 8002e9e:	d0f7      	beq.n	8002e90 <HAL_GPIO_EXTI_IRQHandler+0x14>
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002ea0:	0020      	movs	r0, r4
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8002ea2:	611c      	str	r4, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8002ea4:	f7ff fa0c 	bl	80022c0 <HAL_GPIO_EXTI_Falling_Callback>
}
 8002ea8:	e7f2      	b.n	8002e90 <HAL_GPIO_EXTI_IRQHandler+0x14>
 8002eaa:	46c0      	nop			@ (mov r8, r8)
 8002eac:	40021800 	.word	0x40021800

08002eb0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eb4:	d100      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x8>
 8002eb6:	e0aa      	b.n	800300e <HAL_RCC_OscConfig+0x15e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb8:	6803      	ldr	r3, [r0, #0]
 8002eba:	07da      	lsls	r2, r3, #31
 8002ebc:	d52c      	bpl.n	8002f18 <HAL_RCC_OscConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ebe:	2238      	movs	r2, #56	@ 0x38
 8002ec0:	4d95      	ldr	r5, [pc, #596]	@ (8003118 <HAL_RCC_OscConfig+0x268>)

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8002ec2:	6861      	ldr	r1, [r4, #4]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ec4:	68a8      	ldr	r0, [r5, #8]
 8002ec6:	4002      	ands	r2, r0
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8002ec8:	2a08      	cmp	r2, #8
 8002eca:	d100      	bne.n	8002ece <HAL_RCC_OscConfig+0x1e>
 8002ecc:	e09d      	b.n	800300a <HAL_RCC_OscConfig+0x15a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	2380      	movs	r3, #128	@ 0x80
 8002ed0:	025b      	lsls	r3, r3, #9
 8002ed2:	4299      	cmp	r1, r3
 8002ed4:	d100      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x28>
 8002ed6:	e0ba      	b.n	800304e <HAL_RCC_OscConfig+0x19e>
 8002ed8:	22a0      	movs	r2, #160	@ 0xa0
 8002eda:	02d2      	lsls	r2, r2, #11
 8002edc:	4291      	cmp	r1, r2
 8002ede:	d100      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x32>
 8002ee0:	e106      	b.n	80030f0 <HAL_RCC_OscConfig+0x240>
 8002ee2:	682b      	ldr	r3, [r5, #0]
 8002ee4:	4a8d      	ldr	r2, [pc, #564]	@ (800311c <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	602b      	str	r3, [r5, #0]
 8002eea:	682b      	ldr	r3, [r5, #0]
 8002eec:	4a8c      	ldr	r2, [pc, #560]	@ (8003120 <HAL_RCC_OscConfig+0x270>)
 8002eee:	4013      	ands	r3, r2
 8002ef0:	602b      	str	r3, [r5, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ef2:	2900      	cmp	r1, #0
 8002ef4:	d000      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x48>
 8002ef6:	e0ad      	b.n	8003054 <HAL_RCC_OscConfig+0x1a4>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef8:	f7ff fb74 	bl	80025e4 <HAL_GetTick>

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002efc:	2780      	movs	r7, #128	@ 0x80
        tickstart = HAL_GetTick();
 8002efe:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f00:	02bf      	lsls	r7, r7, #10
 8002f02:	e005      	b.n	8002f10 <HAL_RCC_OscConfig+0x60>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8002f04:	f7ff fb6e 	bl	80025e4 <HAL_GetTick>
 8002f08:	1b80      	subs	r0, r0, r6
 8002f0a:	2864      	cmp	r0, #100	@ 0x64
 8002f0c:	d900      	bls.n	8002f10 <HAL_RCC_OscConfig+0x60>
 8002f0e:	e0c9      	b.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	423b      	tst	r3, r7
 8002f14:	d1f6      	bne.n	8002f04 <HAL_RCC_OscConfig+0x54>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f16:	6823      	ldr	r3, [r4, #0]
 8002f18:	079a      	lsls	r2, r3, #30
 8002f1a:	d44b      	bmi.n	8002fb4 <HAL_RCC_OscConfig+0x104>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1c:	071a      	lsls	r2, r3, #28
 8002f1e:	d51d      	bpl.n	8002f5c <HAL_RCC_OscConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f20:	2238      	movs	r2, #56	@ 0x38
 8002f22:	4d7d      	ldr	r5, [pc, #500]	@ (8003118 <HAL_RCC_OscConfig+0x268>)
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002f24:	69a1      	ldr	r1, [r4, #24]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002f26:	68a8      	ldr	r0, [r5, #8]
 8002f28:	4002      	ands	r2, r0
 8002f2a:	2a18      	cmp	r2, #24
 8002f2c:	d100      	bne.n	8002f30 <HAL_RCC_OscConfig+0x80>
 8002f2e:	e0a2      	b.n	8003076 <HAL_RCC_OscConfig+0x1c6>
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002f30:	2201      	movs	r2, #1
 8002f32:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f34:	2900      	cmp	r1, #0
 8002f36:	d100      	bne.n	8002f3a <HAL_RCC_OscConfig+0x8a>
 8002f38:	e0c9      	b.n	80030ce <HAL_RCC_OscConfig+0x21e>
        __HAL_RCC_LSI_ENABLE();
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	662b      	str	r3, [r5, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7ff fb51 	bl	80025e4 <HAL_GetTick>

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f42:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 8002f44:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f46:	e005      	b.n	8002f54 <HAL_RCC_OscConfig+0xa4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002f48:	f7ff fb4c 	bl	80025e4 <HAL_GetTick>
 8002f4c:	1b80      	subs	r0, r0, r6
 8002f4e:	2802      	cmp	r0, #2
 8002f50:	d900      	bls.n	8002f54 <HAL_RCC_OscConfig+0xa4>
 8002f52:	e0a7      	b.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002f54:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 8002f56:	421f      	tst	r7, r3
 8002f58:	d0f6      	beq.n	8002f48 <HAL_RCC_OscConfig+0x98>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f5a:	6823      	ldr	r3, [r4, #0]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	421a      	tst	r2, r3
 8002f60:	d026      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x100>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f62:	2338      	movs	r3, #56	@ 0x38
 8002f64:	4d6c      	ldr	r5, [pc, #432]	@ (8003118 <HAL_RCC_OscConfig+0x268>)
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002f66:	68a0      	ldr	r0, [r4, #8]
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002f68:	68a9      	ldr	r1, [r5, #8]
 8002f6a:	400b      	ands	r3, r1
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d100      	bne.n	8002f72 <HAL_RCC_OscConfig+0xc2>
 8002f70:	e0c7      	b.n	8003102 <HAL_RCC_OscConfig+0x252>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f72:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002f74:	2801      	cmp	r0, #1
 8002f76:	d100      	bne.n	8002f7a <HAL_RCC_OscConfig+0xca>
 8002f78:	e081      	b.n	800307e <HAL_RCC_OscConfig+0x1ce>
 8002f7a:	2805      	cmp	r0, #5
 8002f7c:	d100      	bne.n	8002f80 <HAL_RCC_OscConfig+0xd0>
 8002f7e:	e0c4      	b.n	800310a <HAL_RCC_OscConfig+0x25a>
 8002f80:	2101      	movs	r1, #1
 8002f82:	438b      	bics	r3, r1
 8002f84:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8002f86:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002f88:	4393      	bics	r3, r2
 8002f8a:	65eb      	str	r3, [r5, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f8c:	2800      	cmp	r0, #0
 8002f8e:	d000      	beq.n	8002f92 <HAL_RCC_OscConfig+0xe2>
 8002f90:	e077      	b.n	8003082 <HAL_RCC_OscConfig+0x1d2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f92:	f7ff fb27 	bl	80025e4 <HAL_GetTick>

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f96:	2602      	movs	r6, #2
        tickstart = HAL_GetTick();
 8002f98:	0004      	movs	r4, r0
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9a:	4f62      	ldr	r7, [pc, #392]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002f9c:	e005      	b.n	8002faa <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f9e:	f7ff fb21 	bl	80025e4 <HAL_GetTick>
 8002fa2:	1b00      	subs	r0, r0, r4
 8002fa4:	42b8      	cmp	r0, r7
 8002fa6:	d900      	bls.n	8002faa <HAL_RCC_OscConfig+0xfa>
 8002fa8:	e07c      	b.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8002faa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002fac:	421e      	tst	r6, r3
 8002fae:	d1f6      	bne.n	8002f9e <HAL_RCC_OscConfig+0xee>
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8002fb0:	2000      	movs	r0, #0
 8002fb2:	e02d      	b.n	8003010 <HAL_RCC_OscConfig+0x160>
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb4:	2238      	movs	r2, #56	@ 0x38
 8002fb6:	4d58      	ldr	r5, [pc, #352]	@ (8003118 <HAL_RCC_OscConfig+0x268>)
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8002fb8:	68e1      	ldr	r1, [r4, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fba:	68ab      	ldr	r3, [r5, #8]
    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002fbc:	421a      	tst	r2, r3
 8002fbe:	d028      	beq.n	8003012 <HAL_RCC_OscConfig+0x162>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fc0:	682b      	ldr	r3, [r5, #0]
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002fc2:	2900      	cmp	r1, #0
 8002fc4:	d100      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x118>
 8002fc6:	e06f      	b.n	80030a8 <HAL_RCC_OscConfig+0x1f8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fc8:	4a57      	ldr	r2, [pc, #348]	@ (8003128 <HAL_RCC_OscConfig+0x278>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fca:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fcc:	4013      	ands	r3, r2
 8002fce:	6922      	ldr	r2, [r4, #16]
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fd0:	00ff      	lsls	r7, r7, #3
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002fd2:	4313      	orrs	r3, r2
 8002fd4:	602b      	str	r3, [r5, #0]
        __HAL_RCC_HSI_ENABLE();
 8002fd6:	2380      	movs	r3, #128	@ 0x80
 8002fd8:	682a      	ldr	r2, [r5, #0]
 8002fda:	005b      	lsls	r3, r3, #1
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002fe0:	f7ff fb00 	bl	80025e4 <HAL_GetTick>
 8002fe4:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fe6:	e004      	b.n	8002ff2 <HAL_RCC_OscConfig+0x142>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002fe8:	f7ff fafc 	bl	80025e4 <HAL_GetTick>
 8002fec:	1b80      	subs	r0, r0, r6
 8002fee:	2802      	cmp	r0, #2
 8002ff0:	d858      	bhi.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ff2:	682b      	ldr	r3, [r5, #0]
 8002ff4:	423b      	tst	r3, r7
 8002ff6:	d0f7      	beq.n	8002fe8 <HAL_RCC_OscConfig+0x138>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	686a      	ldr	r2, [r5, #4]
 8002ffa:	6963      	ldr	r3, [r4, #20]
 8002ffc:	494b      	ldr	r1, [pc, #300]	@ (800312c <HAL_RCC_OscConfig+0x27c>)
 8002ffe:	021b      	lsls	r3, r3, #8
 8003000:	400a      	ands	r2, r1
 8003002:	4313      	orrs	r3, r2
 8003004:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	e788      	b.n	8002f1c <HAL_RCC_OscConfig+0x6c>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800300a:	2900      	cmp	r1, #0
 800300c:	d184      	bne.n	8002f18 <HAL_RCC_OscConfig+0x68>
    return HAL_ERROR;
 800300e:	2001      	movs	r0, #1
}
 8003010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003012:	2900      	cmp	r1, #0
 8003014:	d0fb      	beq.n	800300e <HAL_RCC_OscConfig+0x15e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003016:	686a      	ldr	r2, [r5, #4]
 8003018:	6963      	ldr	r3, [r4, #20]
 800301a:	4944      	ldr	r1, [pc, #272]	@ (800312c <HAL_RCC_OscConfig+0x27c>)
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	400a      	ands	r2, r1
 8003020:	4313      	orrs	r3, r2
 8003022:	606b      	str	r3, [r5, #4]
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003024:	682b      	ldr	r3, [r5, #0]
 8003026:	4a40      	ldr	r2, [pc, #256]	@ (8003128 <HAL_RCC_OscConfig+0x278>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003028:	4941      	ldr	r1, [pc, #260]	@ (8003130 <HAL_RCC_OscConfig+0x280>)
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800302a:	4013      	ands	r3, r2
 800302c:	6922      	ldr	r2, [r4, #16]
 800302e:	4313      	orrs	r3, r2
 8003030:	602b      	str	r3, [r5, #0]
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003032:	682b      	ldr	r3, [r5, #0]
 8003034:	4a3f      	ldr	r2, [pc, #252]	@ (8003134 <HAL_RCC_OscConfig+0x284>)
 8003036:	049b      	lsls	r3, r3, #18
 8003038:	0f5b      	lsrs	r3, r3, #29
 800303a:	40da      	lsrs	r2, r3
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800303c:	4b3e      	ldr	r3, [pc, #248]	@ (8003138 <HAL_RCC_OscConfig+0x288>)
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800303e:	600a      	str	r2, [r1, #0]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003040:	6818      	ldr	r0, [r3, #0]
 8003042:	f7ff fa91 	bl	8002568 <HAL_InitTick>
 8003046:	2800      	cmp	r0, #0
 8003048:	d1e1      	bne.n	800300e <HAL_RCC_OscConfig+0x15e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	e766      	b.n	8002f1c <HAL_RCC_OscConfig+0x6c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304e:	682b      	ldr	r3, [r5, #0]
 8003050:	430b      	orrs	r3, r1
 8003052:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003054:	f7ff fac6 	bl	80025e4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003058:	2680      	movs	r6, #128	@ 0x80
        tickstart = HAL_GetTick();
 800305a:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305c:	4f2e      	ldr	r7, [pc, #184]	@ (8003118 <HAL_RCC_OscConfig+0x268>)
 800305e:	02b6      	lsls	r6, r6, #10
 8003060:	e004      	b.n	800306c <HAL_RCC_OscConfig+0x1bc>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003062:	f7ff fabf 	bl	80025e4 <HAL_GetTick>
 8003066:	1b40      	subs	r0, r0, r5
 8003068:	2864      	cmp	r0, #100	@ 0x64
 800306a:	d81b      	bhi.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	4233      	tst	r3, r6
 8003070:	d0f7      	beq.n	8003062 <HAL_RCC_OscConfig+0x1b2>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	e750      	b.n	8002f18 <HAL_RCC_OscConfig+0x68>
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003076:	2900      	cmp	r1, #0
 8003078:	d000      	beq.n	800307c <HAL_RCC_OscConfig+0x1cc>
 800307a:	e76f      	b.n	8002f5c <HAL_RCC_OscConfig+0xac>
 800307c:	e7c7      	b.n	800300e <HAL_RCC_OscConfig+0x15e>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800307e:	4303      	orrs	r3, r0
 8003080:	65eb      	str	r3, [r5, #92]	@ 0x5c
        tickstart = HAL_GetTick();
 8003082:	f7ff faaf 	bl	80025e4 <HAL_GetTick>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003086:	2502      	movs	r5, #2
        tickstart = HAL_GetTick();
 8003088:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800308a:	4e23      	ldr	r6, [pc, #140]	@ (8003118 <HAL_RCC_OscConfig+0x268>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308c:	4f25      	ldr	r7, [pc, #148]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800308e:	e004      	b.n	800309a <HAL_RCC_OscConfig+0x1ea>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7ff faa8 	bl	80025e4 <HAL_GetTick>
 8003094:	1b00      	subs	r0, r0, r4
 8003096:	42b8      	cmp	r0, r7
 8003098:	d804      	bhi.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800309a:	6df3      	ldr	r3, [r6, #92]	@ 0x5c
 800309c:	421d      	tst	r5, r3
 800309e:	d0f7      	beq.n	8003090 <HAL_RCC_OscConfig+0x1e0>
  return HAL_OK;
 80030a0:	2000      	movs	r0, #0
 80030a2:	e7b5      	b.n	8003010 <HAL_RCC_OscConfig+0x160>
            return HAL_TIMEOUT;
 80030a4:	2003      	movs	r0, #3
 80030a6:	e7b3      	b.n	8003010 <HAL_RCC_OscConfig+0x160>
        __HAL_RCC_HSI_DISABLE();
 80030a8:	4a24      	ldr	r2, [pc, #144]	@ (800313c <HAL_RCC_OscConfig+0x28c>)
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030aa:	2780      	movs	r7, #128	@ 0x80
        __HAL_RCC_HSI_DISABLE();
 80030ac:	4013      	ands	r3, r2
 80030ae:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80030b0:	f7ff fa98 	bl	80025e4 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b4:	00ff      	lsls	r7, r7, #3
        tickstart = HAL_GetTick();
 80030b6:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030b8:	e004      	b.n	80030c4 <HAL_RCC_OscConfig+0x214>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80030ba:	f7ff fa93 	bl	80025e4 <HAL_GetTick>
 80030be:	1b80      	subs	r0, r0, r6
 80030c0:	2802      	cmp	r0, #2
 80030c2:	d8ef      	bhi.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	423b      	tst	r3, r7
 80030c8:	d1f7      	bne.n	80030ba <HAL_RCC_OscConfig+0x20a>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ca:	6823      	ldr	r3, [r4, #0]
 80030cc:	e726      	b.n	8002f1c <HAL_RCC_OscConfig+0x6c>
        __HAL_RCC_LSI_DISABLE();
 80030ce:	4393      	bics	r3, r2
 80030d0:	662b      	str	r3, [r5, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80030d2:	f7ff fa87 	bl	80025e4 <HAL_GetTick>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80030d6:	2702      	movs	r7, #2
        tickstart = HAL_GetTick();
 80030d8:	0006      	movs	r6, r0
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80030da:	e004      	b.n	80030e6 <HAL_RCC_OscConfig+0x236>
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80030dc:	f7ff fa82 	bl	80025e4 <HAL_GetTick>
 80030e0:	1b80      	subs	r0, r0, r6
 80030e2:	2802      	cmp	r0, #2
 80030e4:	d8de      	bhi.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80030e6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80030e8:	421f      	tst	r7, r3
 80030ea:	d1f7      	bne.n	80030dc <HAL_RCC_OscConfig+0x22c>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	e735      	b.n	8002f5c <HAL_RCC_OscConfig+0xac>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030f0:	2280      	movs	r2, #128	@ 0x80
 80030f2:	6829      	ldr	r1, [r5, #0]
 80030f4:	02d2      	lsls	r2, r2, #11
 80030f6:	430a      	orrs	r2, r1
 80030f8:	602a      	str	r2, [r5, #0]
 80030fa:	682a      	ldr	r2, [r5, #0]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003100:	e7a8      	b.n	8003054 <HAL_RCC_OscConfig+0x1a4>
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003102:	4243      	negs	r3, r0
 8003104:	4158      	adcs	r0, r3
 8003106:	b2c0      	uxtb	r0, r0
 8003108:	e782      	b.n	8003010 <HAL_RCC_OscConfig+0x160>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800310a:	4313      	orrs	r3, r2
 800310c:	2201      	movs	r2, #1
 800310e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 8003110:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8003112:	4313      	orrs	r3, r2
 8003114:	65eb      	str	r3, [r5, #92]	@ 0x5c
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003116:	e7b4      	b.n	8003082 <HAL_RCC_OscConfig+0x1d2>
 8003118:	40021000 	.word	0x40021000
 800311c:	fffeffff 	.word	0xfffeffff
 8003120:	fffbffff 	.word	0xfffbffff
 8003124:	00001388 	.word	0x00001388
 8003128:	ffffc7ff 	.word	0xffffc7ff
 800312c:	ffff80ff 	.word	0xffff80ff
 8003130:	20000004 	.word	0x20000004
 8003134:	02dc6c00 	.word	0x02dc6c00
 8003138:	2000000c 	.word	0x2000000c
 800313c:	fffffeff 	.word	0xfffffeff

08003140 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003140:	2038      	movs	r0, #56	@ 0x38
 8003142:	4b12      	ldr	r3, [pc, #72]	@ (800318c <HAL_RCC_GetSysClockFreq+0x4c>)
 8003144:	689a      	ldr	r2, [r3, #8]
 8003146:	4210      	tst	r0, r2
 8003148:	d105      	bne.n	8003156 <HAL_RCC_GetSysClockFreq+0x16>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800314a:	681b      	ldr	r3, [r3, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800314c:	4810      	ldr	r0, [pc, #64]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x50>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800314e:	049b      	lsls	r3, r3, #18
 8003150:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003152:	40d8      	lsrs	r0, r3
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
}
 8003154:	4770      	bx	lr
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003156:	689a      	ldr	r2, [r3, #8]
 8003158:	4002      	ands	r2, r0
 800315a:	2a08      	cmp	r2, #8
 800315c:	d010      	beq.n	8003180 <HAL_RCC_GetSysClockFreq+0x40>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	4002      	ands	r2, r0
 8003162:	2a20      	cmp	r2, #32
 8003164:	d00e      	beq.n	8003184 <HAL_RCC_GetSysClockFreq+0x44>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 800316a:	3818      	subs	r0, #24
 800316c:	1e43      	subs	r3, r0, #1
 800316e:	4198      	sbcs	r0, r3
 8003170:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x54>)
 8003172:	4240      	negs	r0, r0
 8003174:	4018      	ands	r0, r3
 8003176:	23fa      	movs	r3, #250	@ 0xfa
 8003178:	01db      	lsls	r3, r3, #7
 800317a:	469c      	mov	ip, r3
 800317c:	4460      	add	r0, ip
 800317e:	e7e9      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = HSE_VALUE;
 8003180:	4805      	ldr	r0, [pc, #20]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x58>)
 8003182:	e7e7      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x14>
    sysclockfreq = LSE_VALUE;
 8003184:	2080      	movs	r0, #128	@ 0x80
 8003186:	0200      	lsls	r0, r0, #8
 8003188:	e7e4      	b.n	8003154 <HAL_RCC_GetSysClockFreq+0x14>
 800318a:	46c0      	nop			@ (mov r8, r8)
 800318c:	40021000 	.word	0x40021000
 8003190:	02dc6c00 	.word	0x02dc6c00
 8003194:	ffff8300 	.word	0xffff8300
 8003198:	007a1200 	.word	0x007a1200

0800319c <HAL_RCC_ClockConfig>:
{
 800319c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800319e:	46ce      	mov	lr, r9
 80031a0:	4647      	mov	r7, r8
 80031a2:	0005      	movs	r5, r0
 80031a4:	000c      	movs	r4, r1
 80031a6:	b580      	push	{r7, lr}
  if (RCC_ClkInitStruct == NULL)
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d060      	beq.n	800326e <HAL_RCC_ClockConfig+0xd2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031ac:	2207      	movs	r2, #7
 80031ae:	4e52      	ldr	r6, [pc, #328]	@ (80032f8 <HAL_RCC_ClockConfig+0x15c>)
 80031b0:	6833      	ldr	r3, [r6, #0]
 80031b2:	4013      	ands	r3, r2
 80031b4:	428b      	cmp	r3, r1
 80031b6:	d35c      	bcc.n	8003272 <HAL_RCC_ClockConfig+0xd6>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	079a      	lsls	r2, r3, #30
 80031bc:	d510      	bpl.n	80031e0 <HAL_RCC_ClockConfig+0x44>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031be:	075a      	lsls	r2, r3, #29
 80031c0:	d507      	bpl.n	80031d2 <HAL_RCC_ClockConfig+0x36>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80031c2:	484e      	ldr	r0, [pc, #312]	@ (80032fc <HAL_RCC_ClockConfig+0x160>)
 80031c4:	4a4e      	ldr	r2, [pc, #312]	@ (8003300 <HAL_RCC_ClockConfig+0x164>)
 80031c6:	6881      	ldr	r1, [r0, #8]
 80031c8:	4011      	ands	r1, r2
 80031ca:	22b0      	movs	r2, #176	@ 0xb0
 80031cc:	0112      	lsls	r2, r2, #4
 80031ce:	430a      	orrs	r2, r1
 80031d0:	6082      	str	r2, [r0, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031d2:	494a      	ldr	r1, [pc, #296]	@ (80032fc <HAL_RCC_ClockConfig+0x160>)
 80031d4:	484b      	ldr	r0, [pc, #300]	@ (8003304 <HAL_RCC_ClockConfig+0x168>)
 80031d6:	688a      	ldr	r2, [r1, #8]
 80031d8:	4002      	ands	r2, r0
 80031da:	68e8      	ldr	r0, [r5, #12]
 80031dc:	4302      	orrs	r2, r0
 80031de:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031e0:	07db      	lsls	r3, r3, #31
 80031e2:	d522      	bpl.n	800322a <HAL_RCC_ClockConfig+0x8e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e4:	686a      	ldr	r2, [r5, #4]
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80031e6:	4b45      	ldr	r3, [pc, #276]	@ (80032fc <HAL_RCC_ClockConfig+0x160>)
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e8:	2a01      	cmp	r2, #1
 80031ea:	d03d      	beq.n	8003268 <HAL_RCC_ClockConfig+0xcc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80031ec:	2a00      	cmp	r2, #0
 80031ee:	d15f      	bne.n	80032b0 <HAL_RCC_ClockConfig+0x114>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	055b      	lsls	r3, r3, #21
 80031f4:	d53b      	bpl.n	800326e <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80031f6:	2107      	movs	r1, #7
 80031f8:	4e40      	ldr	r6, [pc, #256]	@ (80032fc <HAL_RCC_ClockConfig+0x160>)
 80031fa:	68b3      	ldr	r3, [r6, #8]
 80031fc:	438b      	bics	r3, r1
 80031fe:	4313      	orrs	r3, r2
 8003200:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8003202:	f7ff f9ef 	bl	80025e4 <HAL_GetTick>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003206:	2338      	movs	r3, #56	@ 0x38
 8003208:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800320a:	4b3f      	ldr	r3, [pc, #252]	@ (8003308 <HAL_RCC_ClockConfig+0x16c>)
    tickstart = HAL_GetTick();
 800320c:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800320e:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003210:	e004      	b.n	800321c <HAL_RCC_ClockConfig+0x80>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003212:	f7ff f9e7 	bl	80025e4 <HAL_GetTick>
 8003216:	1bc0      	subs	r0, r0, r7
 8003218:	4548      	cmp	r0, r9
 800321a:	d83f      	bhi.n	800329c <HAL_RCC_ClockConfig+0x100>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800321c:	4643      	mov	r3, r8
 800321e:	68b2      	ldr	r2, [r6, #8]
 8003220:	401a      	ands	r2, r3
 8003222:	686b      	ldr	r3, [r5, #4]
 8003224:	00db      	lsls	r3, r3, #3
 8003226:	429a      	cmp	r2, r3
 8003228:	d1f3      	bne.n	8003212 <HAL_RCC_ClockConfig+0x76>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800322a:	2207      	movs	r2, #7
 800322c:	4e32      	ldr	r6, [pc, #200]	@ (80032f8 <HAL_RCC_ClockConfig+0x15c>)
 800322e:	6833      	ldr	r3, [r6, #0]
 8003230:	4013      	ands	r3, r2
 8003232:	42a3      	cmp	r3, r4
 8003234:	d843      	bhi.n	80032be <HAL_RCC_ClockConfig+0x122>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003236:	682b      	ldr	r3, [r5, #0]
 8003238:	075b      	lsls	r3, r3, #29
 800323a:	d431      	bmi.n	80032a0 <HAL_RCC_ClockConfig+0x104>
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800323c:	f7ff ff80 	bl	8003140 <HAL_RCC_GetSysClockFreq>
 8003240:	4b2e      	ldr	r3, [pc, #184]	@ (80032fc <HAL_RCC_ClockConfig+0x160>)
 8003242:	4a32      	ldr	r2, [pc, #200]	@ (800330c <HAL_RCC_ClockConfig+0x170>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	4932      	ldr	r1, [pc, #200]	@ (8003310 <HAL_RCC_ClockConfig+0x174>)
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003248:	051b      	lsls	r3, r3, #20
 800324a:	0f1b      	lsrs	r3, r3, #28
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800324c:	009b      	lsls	r3, r3, #2
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800324e:	589b      	ldr	r3, [r3, r2]
 8003250:	221f      	movs	r2, #31
 8003252:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003254:	40d8      	lsrs	r0, r3
  return HAL_InitTick(uwTickPrio);
 8003256:	4b2f      	ldr	r3, [pc, #188]	@ (8003314 <HAL_RCC_ClockConfig+0x178>)
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003258:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800325a:	6818      	ldr	r0, [r3, #0]
 800325c:	f7ff f984 	bl	8002568 <HAL_InitTick>
}
 8003260:	bcc0      	pop	{r6, r7}
 8003262:	46b9      	mov	r9, r7
 8003264:	46b0      	mov	r8, r6
 8003266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	039b      	lsls	r3, r3, #14
 800326c:	d4c3      	bmi.n	80031f6 <HAL_RCC_ClockConfig+0x5a>
    return HAL_ERROR;
 800326e:	2001      	movs	r0, #1
 8003270:	e7f6      	b.n	8003260 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	6833      	ldr	r3, [r6, #0]
 8003274:	4393      	bics	r3, r2
 8003276:	430b      	orrs	r3, r1
 8003278:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 800327a:	f7ff f9b3 	bl	80025e4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800327e:	2307      	movs	r3, #7
 8003280:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003282:	4b21      	ldr	r3, [pc, #132]	@ (8003308 <HAL_RCC_ClockConfig+0x16c>)
    tickstart = HAL_GetTick();
 8003284:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003286:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003288:	4642      	mov	r2, r8
 800328a:	6833      	ldr	r3, [r6, #0]
 800328c:	4013      	ands	r3, r2
 800328e:	42a3      	cmp	r3, r4
 8003290:	d092      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003292:	f7ff f9a7 	bl	80025e4 <HAL_GetTick>
 8003296:	1bc0      	subs	r0, r0, r7
 8003298:	4548      	cmp	r0, r9
 800329a:	d9f5      	bls.n	8003288 <HAL_RCC_ClockConfig+0xec>
        return HAL_TIMEOUT;
 800329c:	2003      	movs	r0, #3
 800329e:	e7df      	b.n	8003260 <HAL_RCC_ClockConfig+0xc4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4a16      	ldr	r2, [pc, #88]	@ (80032fc <HAL_RCC_ClockConfig+0x160>)
 80032a2:	491d      	ldr	r1, [pc, #116]	@ (8003318 <HAL_RCC_ClockConfig+0x17c>)
 80032a4:	6893      	ldr	r3, [r2, #8]
 80032a6:	400b      	ands	r3, r1
 80032a8:	6929      	ldr	r1, [r5, #16]
 80032aa:	430b      	orrs	r3, r1
 80032ac:	6093      	str	r3, [r2, #8]
 80032ae:	e7c5      	b.n	800323c <HAL_RCC_ClockConfig+0xa0>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80032b0:	2a03      	cmp	r2, #3
 80032b2:	d01b      	beq.n	80032ec <HAL_RCC_ClockConfig+0x150>
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80032b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032b6:	079b      	lsls	r3, r3, #30
 80032b8:	d49d      	bmi.n	80031f6 <HAL_RCC_ClockConfig+0x5a>
    return HAL_ERROR;
 80032ba:	2001      	movs	r0, #1
 80032bc:	e7d0      	b.n	8003260 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032be:	6833      	ldr	r3, [r6, #0]
 80032c0:	4393      	bics	r3, r2
 80032c2:	4323      	orrs	r3, r4
 80032c4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80032c6:	f7ff f98d 	bl	80025e4 <HAL_GetTick>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032ca:	2307      	movs	r3, #7
 80032cc:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003308 <HAL_RCC_ClockConfig+0x16c>)
    tickstart = HAL_GetTick();
 80032d0:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032d2:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80032d4:	4642      	mov	r2, r8
 80032d6:	6833      	ldr	r3, [r6, #0]
 80032d8:	4013      	ands	r3, r2
 80032da:	42a3      	cmp	r3, r4
 80032dc:	d0ab      	beq.n	8003236 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80032de:	f7ff f981 	bl	80025e4 <HAL_GetTick>
 80032e2:	1bc0      	subs	r0, r0, r7
 80032e4:	4548      	cmp	r0, r9
 80032e6:	d9f5      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x138>
        return HAL_TIMEOUT;
 80032e8:	2003      	movs	r0, #3
 80032ea:	e7b9      	b.n	8003260 <HAL_RCC_ClockConfig+0xc4>
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80032ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ee:	079b      	lsls	r3, r3, #30
 80032f0:	d500      	bpl.n	80032f4 <HAL_RCC_ClockConfig+0x158>
 80032f2:	e780      	b.n	80031f6 <HAL_RCC_ClockConfig+0x5a>
    return HAL_ERROR;
 80032f4:	2001      	movs	r0, #1
 80032f6:	e7b3      	b.n	8003260 <HAL_RCC_ClockConfig+0xc4>
 80032f8:	40022000 	.word	0x40022000
 80032fc:	40021000 	.word	0x40021000
 8003300:	ffff84ff 	.word	0xffff84ff
 8003304:	fffff0ff 	.word	0xfffff0ff
 8003308:	00001388 	.word	0x00001388
 800330c:	080041e0 	.word	0x080041e0
 8003310:	20000004 	.word	0x20000004
 8003314:	2000000c 	.word	0x2000000c
 8003318:	ffff8fff 	.word	0xffff8fff

0800331c <HAL_RCC_GetPCLK1Freq>:
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800331c:	2338      	movs	r3, #56	@ 0x38
 800331e:	4a1c      	ldr	r2, [pc, #112]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x74>)
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003320:	b510      	push	{r4, lr}
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003322:	6891      	ldr	r1, [r2, #8]
 8003324:	420b      	tst	r3, r1
 8003326:	d119      	bne.n	800335c <HAL_RCC_GetPCLK1Freq+0x40>
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003328:	6813      	ldr	r3, [r2, #0]
    sysclockfreq = (HSI_VALUE / hsidiv);
 800332a:	481a      	ldr	r0, [pc, #104]	@ (8003394 <HAL_RCC_GetPCLK1Freq+0x78>)
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800332c:	049b      	lsls	r3, r3, #18
 800332e:	0f5b      	lsrs	r3, r3, #29
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003330:	40d8      	lsrs	r0, r3
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003332:	211f      	movs	r1, #31
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003334:	4c16      	ldr	r4, [pc, #88]	@ (8003390 <HAL_RCC_GetPCLK1Freq+0x74>)
 8003336:	4a18      	ldr	r2, [pc, #96]	@ (8003398 <HAL_RCC_GetPCLK1Freq+0x7c>)
 8003338:	68a3      	ldr	r3, [r4, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800333a:	051b      	lsls	r3, r3, #20
 800333c:	0f1b      	lsrs	r3, r3, #28
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800333e:	009b      	lsls	r3, r3, #2
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003340:	589b      	ldr	r3, [r3, r2]
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003342:	4a16      	ldr	r2, [pc, #88]	@ (800339c <HAL_RCC_GetPCLK1Freq+0x80>)
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003344:	400b      	ands	r3, r1
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8003346:	40d8      	lsrs	r0, r3
 8003348:	4b15      	ldr	r3, [pc, #84]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x84>)
 800334a:	6018      	str	r0, [r3, #0]
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800334c:	68a3      	ldr	r3, [r4, #8]
 800334e:	045b      	lsls	r3, r3, #17
 8003350:	0f5b      	lsrs	r3, r3, #29
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	589b      	ldr	r3, [r3, r2]
 8003356:	400b      	ands	r3, r1
 8003358:	40d8      	lsrs	r0, r3
}
 800335a:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800335c:	6891      	ldr	r1, [r2, #8]
 800335e:	4019      	ands	r1, r3
 8003360:	2908      	cmp	r1, #8
 8003362:	d010      	beq.n	8003386 <HAL_RCC_GetPCLK1Freq+0x6a>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003364:	6891      	ldr	r1, [r2, #8]
 8003366:	4019      	ands	r1, r3
 8003368:	2920      	cmp	r1, #32
 800336a:	d00e      	beq.n	800338a <HAL_RCC_GetPCLK1Freq+0x6e>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800336c:	6890      	ldr	r0, [r2, #8]
 800336e:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8003370:	3818      	subs	r0, #24
 8003372:	1e43      	subs	r3, r0, #1
 8003374:	4198      	sbcs	r0, r3
 8003376:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <HAL_RCC_GetPCLK1Freq+0x88>)
 8003378:	4240      	negs	r0, r0
 800337a:	4018      	ands	r0, r3
 800337c:	23fa      	movs	r3, #250	@ 0xfa
 800337e:	01db      	lsls	r3, r3, #7
 8003380:	469c      	mov	ip, r3
 8003382:	4460      	add	r0, ip
 8003384:	e7d5      	b.n	8003332 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = HSE_VALUE;
 8003386:	4808      	ldr	r0, [pc, #32]	@ (80033a8 <HAL_RCC_GetPCLK1Freq+0x8c>)
 8003388:	e7d3      	b.n	8003332 <HAL_RCC_GetPCLK1Freq+0x16>
    sysclockfreq = LSE_VALUE;
 800338a:	2080      	movs	r0, #128	@ 0x80
 800338c:	0200      	lsls	r0, r0, #8
 800338e:	e7d0      	b.n	8003332 <HAL_RCC_GetPCLK1Freq+0x16>
 8003390:	40021000 	.word	0x40021000
 8003394:	02dc6c00 	.word	0x02dc6c00
 8003398:	080041e0 	.word	0x080041e0
 800339c:	080041c0 	.word	0x080041c0
 80033a0:	20000004 	.word	0x20000004
 80033a4:	ffff8300 	.word	0xffff8300
 80033a8:	007a1200 	.word	0x007a1200

080033ac <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	213d      	movs	r1, #61	@ 0x3d
{
 80033ae:	b510      	push	{r4, lr}
  if (htim->State != HAL_TIM_STATE_READY)
 80033b0:	5c42      	ldrb	r2, [r0, r1]
{
 80033b2:	0003      	movs	r3, r0
  if (htim->State != HAL_TIM_STATE_READY)
 80033b4:	b2d4      	uxtb	r4, r2
  {
    return HAL_ERROR;
 80033b6:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80033b8:	2a01      	cmp	r2, #1
 80033ba:	d10f      	bne.n	80033dc <HAL_TIM_Base_Start_IT+0x30>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	3201      	adds	r2, #1
 80033be:	545a      	strb	r2, [r3, r1]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	68da      	ldr	r2, [r3, #12]
 80033c4:	4322      	orrs	r2, r4
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	4a0c      	ldr	r2, [pc, #48]	@ (80033fc <HAL_TIM_Base_Start_IT+0x50>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d007      	beq.n	80033de <HAL_TIM_Base_Start_IT+0x32>
 80033ce:	4a0c      	ldr	r2, [pc, #48]	@ (8003400 <HAL_TIM_Base_Start_IT+0x54>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_TIM_Base_Start_IT+0x32>
      __HAL_TIM_ENABLE(htim);
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4322      	orrs	r2, r4
 80033d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033da:	2000      	movs	r0, #0
}
 80033dc:	bd10      	pop	{r4, pc}
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	4908      	ldr	r1, [pc, #32]	@ (8003404 <HAL_TIM_Base_Start_IT+0x58>)
 80033e2:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	2a06      	cmp	r2, #6
 80033e6:	d0f8      	beq.n	80033da <HAL_TIM_Base_Start_IT+0x2e>
 80033e8:	3907      	subs	r1, #7
 80033ea:	428a      	cmp	r2, r1
 80033ec:	d0f5      	beq.n	80033da <HAL_TIM_Base_Start_IT+0x2e>
      __HAL_TIM_ENABLE(htim);
 80033ee:	2101      	movs	r1, #1
 80033f0:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 80033f2:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	e7f0      	b.n	80033dc <HAL_TIM_Base_Start_IT+0x30>
 80033fa:	46c0      	nop			@ (mov r8, r8)
 80033fc:	40012c00 	.word	0x40012c00
 8003400:	40000400 	.word	0x40000400
 8003404:	00010007 	.word	0x00010007

08003408 <HAL_TIM_Base_Stop_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8003408:	2101      	movs	r1, #1
 800340a:	6803      	ldr	r3, [r0, #0]
{
 800340c:	b510      	push	{r4, lr}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	438a      	bics	r2, r1
 8003412:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003414:	6a1c      	ldr	r4, [r3, #32]
 8003416:	4a07      	ldr	r2, [pc, #28]	@ (8003434 <HAL_TIM_Base_Stop_IT+0x2c>)
 8003418:	4214      	tst	r4, r2
 800341a:	d106      	bne.n	800342a <HAL_TIM_Base_Stop_IT+0x22>
 800341c:	6a1c      	ldr	r4, [r3, #32]
 800341e:	4a06      	ldr	r2, [pc, #24]	@ (8003438 <HAL_TIM_Base_Stop_IT+0x30>)
 8003420:	4214      	tst	r4, r2
 8003422:	d102      	bne.n	800342a <HAL_TIM_Base_Stop_IT+0x22>
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	438a      	bics	r2, r1
 8003428:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800342a:	233d      	movs	r3, #61	@ 0x3d
 800342c:	2201      	movs	r2, #1
 800342e:	54c2      	strb	r2, [r0, r3]

  /* Return function status */
  return HAL_OK;
}
 8003430:	2000      	movs	r0, #0
 8003432:	bd10      	pop	{r4, pc}
 8003434:	00001111 	.word	0x00001111
 8003438:	00000444 	.word	0x00000444

0800343c <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800343c:	4770      	bx	lr
 800343e:	46c0      	nop			@ (mov r8, r8)

08003440 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 8003440:	4770      	bx	lr
 8003442:	46c0      	nop			@ (mov r8, r8)

08003444 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 8003444:	4770      	bx	lr
 8003446:	46c0      	nop			@ (mov r8, r8)

08003448 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 8003448:	4770      	bx	lr
 800344a:	46c0      	nop			@ (mov r8, r8)

0800344c <HAL_TIM_IRQHandler>:
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800344c:	2202      	movs	r2, #2
{
 800344e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t itsource = htim->Instance->DIER;
 8003450:	6803      	ldr	r3, [r0, #0]
{
 8003452:	0005      	movs	r5, r0
  uint32_t itsource = htim->Instance->DIER;
 8003454:	68de      	ldr	r6, [r3, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003456:	691c      	ldr	r4, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003458:	4222      	tst	r2, r4
 800345a:	d001      	beq.n	8003460 <HAL_TIM_IRQHandler+0x14>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800345c:	4232      	tst	r2, r6
 800345e:	d162      	bne.n	8003526 <HAL_TIM_IRQHandler+0xda>
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003460:	2304      	movs	r3, #4
 8003462:	4223      	tst	r3, r4
 8003464:	d001      	beq.n	800346a <HAL_TIM_IRQHandler+0x1e>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003466:	4233      	tst	r3, r6
 8003468:	d149      	bne.n	80034fe <HAL_TIM_IRQHandler+0xb2>
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800346a:	2308      	movs	r3, #8
 800346c:	4223      	tst	r3, r4
 800346e:	d001      	beq.n	8003474 <HAL_TIM_IRQHandler+0x28>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003470:	4233      	tst	r3, r6
 8003472:	d132      	bne.n	80034da <HAL_TIM_IRQHandler+0x8e>
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003474:	2310      	movs	r3, #16
 8003476:	4223      	tst	r3, r4
 8003478:	d001      	beq.n	800347e <HAL_TIM_IRQHandler+0x32>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800347a:	4233      	tst	r3, r6
 800347c:	d119      	bne.n	80034b2 <HAL_TIM_IRQHandler+0x66>
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800347e:	2301      	movs	r3, #1
 8003480:	4223      	tst	r3, r4
 8003482:	d001      	beq.n	8003488 <HAL_TIM_IRQHandler+0x3c>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003484:	4233      	tst	r3, r6
 8003486:	d16a      	bne.n	800355e <HAL_TIM_IRQHandler+0x112>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003488:	2780      	movs	r7, #128	@ 0x80
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800348a:	2382      	movs	r3, #130	@ 0x82
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800348c:	007f      	lsls	r7, r7, #1
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800348e:	019b      	lsls	r3, r3, #6
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003490:	4027      	ands	r7, r4
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003492:	421c      	tst	r4, r3
 8003494:	d056      	beq.n	8003544 <HAL_TIM_IRQHandler+0xf8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003496:	0633      	lsls	r3, r6, #24
 8003498:	d469      	bmi.n	800356e <HAL_TIM_IRQHandler+0x122>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800349a:	2340      	movs	r3, #64	@ 0x40
 800349c:	4223      	tst	r3, r4
 800349e:	d002      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x5a>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80034a0:	4233      	tst	r3, r6
 80034a2:	d000      	beq.n	80034a6 <HAL_TIM_IRQHandler+0x5a>
 80034a4:	e073      	b.n	800358e <HAL_TIM_IRQHandler+0x142>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034a6:	2320      	movs	r3, #32
 80034a8:	4223      	tst	r3, r4
 80034aa:	d001      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x64>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034ac:	4233      	tst	r3, r6
 80034ae:	d14e      	bne.n	800354e <HAL_TIM_IRQHandler+0x102>
}
 80034b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034b2:	2211      	movs	r2, #17
 80034b4:	682b      	ldr	r3, [r5, #0]
 80034b6:	4252      	negs	r2, r2
 80034b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ba:	3219      	adds	r2, #25
 80034bc:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	23c0      	movs	r3, #192	@ 0xc0
 80034c2:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80034c4:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034c6:	421a      	tst	r2, r3
 80034c8:	d172      	bne.n	80035b0 <HAL_TIM_IRQHandler+0x164>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ca:	f7ff ffb7 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ce:	0028      	movs	r0, r5
 80034d0:	f7ff ffb8 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d4:	2300      	movs	r3, #0
 80034d6:	772b      	strb	r3, [r5, #28]
 80034d8:	e7d1      	b.n	800347e <HAL_TIM_IRQHandler+0x32>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034da:	2209      	movs	r2, #9
 80034dc:	682b      	ldr	r3, [r5, #0]
 80034de:	4252      	negs	r2, r2
 80034e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034e2:	320d      	adds	r2, #13
 80034e4:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e6:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80034e8:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034ea:	079b      	lsls	r3, r3, #30
 80034ec:	d15d      	bne.n	80035aa <HAL_TIM_IRQHandler+0x15e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ee:	f7ff ffa5 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f2:	0028      	movs	r0, r5
 80034f4:	f7ff ffa6 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f8:	2300      	movs	r3, #0
 80034fa:	772b      	strb	r3, [r5, #28]
 80034fc:	e7ba      	b.n	8003474 <HAL_TIM_IRQHandler+0x28>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034fe:	2205      	movs	r2, #5
 8003500:	682b      	ldr	r3, [r5, #0]
 8003502:	4252      	negs	r2, r2
 8003504:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003506:	3207      	adds	r2, #7
 8003508:	772a      	strb	r2, [r5, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	23c0      	movs	r3, #192	@ 0xc0
 800350e:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8003510:	0028      	movs	r0, r5
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003512:	421a      	tst	r2, r3
 8003514:	d146      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x158>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003516:	f7ff ff91 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800351a:	0028      	movs	r0, r5
 800351c:	f7ff ff92 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003520:	2300      	movs	r3, #0
 8003522:	772b      	strb	r3, [r5, #28]
 8003524:	e7a1      	b.n	800346a <HAL_TIM_IRQHandler+0x1e>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003526:	3a05      	subs	r2, #5
 8003528:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800352a:	3204      	adds	r2, #4
 800352c:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800352e:	699b      	ldr	r3, [r3, #24]
 8003530:	079b      	lsls	r3, r3, #30
 8003532:	d134      	bne.n	800359e <HAL_TIM_IRQHandler+0x152>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003534:	f7ff ff82 	bl	800343c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	0028      	movs	r0, r5
 800353a:	f7ff ff83 	bl	8003444 <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	2300      	movs	r3, #0
 8003540:	772b      	strb	r3, [r5, #28]
 8003542:	e78d      	b.n	8003460 <HAL_TIM_IRQHandler+0x14>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003544:	2f00      	cmp	r7, #0
 8003546:	d0a8      	beq.n	800349a <HAL_TIM_IRQHandler+0x4e>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003548:	0633      	lsls	r3, r6, #24
 800354a:	d5a6      	bpl.n	800349a <HAL_TIM_IRQHandler+0x4e>
 800354c:	e018      	b.n	8003580 <HAL_TIM_IRQHandler+0x134>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800354e:	2221      	movs	r2, #33	@ 0x21
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	4252      	negs	r2, r2
      HAL_TIMEx_CommutCallback(htim);
 8003554:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003556:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8003558:	f000 f8b2 	bl	80036c0 <HAL_TIMEx_CommutCallback>
}
 800355c:	e7a8      	b.n	80034b0 <HAL_TIM_IRQHandler+0x64>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800355e:	2202      	movs	r2, #2
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	4252      	negs	r2, r2
      HAL_TIM_PeriodElapsedCallback(htim);
 8003564:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003566:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003568:	f7fe fd90 	bl	800208c <HAL_TIM_PeriodElapsedCallback>
 800356c:	e78c      	b.n	8003488 <HAL_TIM_IRQHandler+0x3c>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800356e:	682b      	ldr	r3, [r5, #0]
 8003570:	4a11      	ldr	r2, [pc, #68]	@ (80035b8 <HAL_TIM_IRQHandler+0x16c>)
      HAL_TIMEx_BreakCallback(htim);
 8003572:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003574:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8003576:	f000 f8a5 	bl	80036c4 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800357a:	2f00      	cmp	r7, #0
 800357c:	d100      	bne.n	8003580 <HAL_TIM_IRQHandler+0x134>
 800357e:	e78c      	b.n	800349a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003580:	682b      	ldr	r3, [r5, #0]
 8003582:	4a0e      	ldr	r2, [pc, #56]	@ (80035bc <HAL_TIM_IRQHandler+0x170>)
      HAL_TIMEx_Break2Callback(htim);
 8003584:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003586:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8003588:	f000 f89e 	bl	80036c8 <HAL_TIMEx_Break2Callback>
 800358c:	e785      	b.n	800349a <HAL_TIM_IRQHandler+0x4e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800358e:	2241      	movs	r2, #65	@ 0x41
 8003590:	682b      	ldr	r3, [r5, #0]
 8003592:	4252      	negs	r2, r2
      HAL_TIM_TriggerCallback(htim);
 8003594:	0028      	movs	r0, r5
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003596:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003598:	f7ff ff56 	bl	8003448 <HAL_TIM_TriggerCallback>
 800359c:	e783      	b.n	80034a6 <HAL_TIM_IRQHandler+0x5a>
          HAL_TIM_IC_CaptureCallback(htim);
 800359e:	f7ff ff4f 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 80035a2:	e7cc      	b.n	800353e <HAL_TIM_IRQHandler+0xf2>
        HAL_TIM_IC_CaptureCallback(htim);
 80035a4:	f7ff ff4c 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 80035a8:	e7ba      	b.n	8003520 <HAL_TIM_IRQHandler+0xd4>
        HAL_TIM_IC_CaptureCallback(htim);
 80035aa:	f7ff ff49 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 80035ae:	e7a3      	b.n	80034f8 <HAL_TIM_IRQHandler+0xac>
        HAL_TIM_IC_CaptureCallback(htim);
 80035b0:	f7ff ff46 	bl	8003440 <HAL_TIM_IC_CaptureCallback>
 80035b4:	e78e      	b.n	80034d4 <HAL_TIM_IRQHandler+0x88>
 80035b6:	46c0      	nop			@ (mov r8, r8)
 80035b8:	ffffdf7f 	.word	0xffffdf7f
 80035bc:	fffffeff 	.word	0xfffffeff

080035c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035c0:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c2:	4e21      	ldr	r6, [pc, #132]	@ (8003648 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 80035c4:	6803      	ldr	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035c6:	680a      	ldr	r2, [r1, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035c8:	688c      	ldr	r4, [r1, #8]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035ca:	694d      	ldr	r5, [r1, #20]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	42b0      	cmp	r0, r6
 80035ce:	d029      	beq.n	8003624 <TIM_Base_SetConfig+0x64>
 80035d0:	4e1e      	ldr	r6, [pc, #120]	@ (800364c <TIM_Base_SetConfig+0x8c>)
 80035d2:	42b0      	cmp	r0, r6
 80035d4:	d017      	beq.n	8003606 <TIM_Base_SetConfig+0x46>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d6:	4e1e      	ldr	r6, [pc, #120]	@ (8003650 <TIM_Base_SetConfig+0x90>)
 80035d8:	42b0      	cmp	r0, r6
 80035da:	d018      	beq.n	800360e <TIM_Base_SetConfig+0x4e>
 80035dc:	4e1d      	ldr	r6, [pc, #116]	@ (8003654 <TIM_Base_SetConfig+0x94>)
 80035de:	42b0      	cmp	r0, r6
 80035e0:	d024      	beq.n	800362c <TIM_Base_SetConfig+0x6c>
 80035e2:	4e1d      	ldr	r6, [pc, #116]	@ (8003658 <TIM_Base_SetConfig+0x98>)
 80035e4:	42b0      	cmp	r0, r6
 80035e6:	d021      	beq.n	800362c <TIM_Base_SetConfig+0x6c>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035e8:	2180      	movs	r1, #128	@ 0x80
 80035ea:	438b      	bics	r3, r1
 80035ec:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 80035ee:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035f0:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80035f2:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035f4:	2301      	movs	r3, #1
 80035f6:	6143      	str	r3, [r0, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80035f8:	6902      	ldr	r2, [r0, #16]
 80035fa:	4213      	tst	r3, r2
 80035fc:	d002      	beq.n	8003604 <TIM_Base_SetConfig+0x44>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80035fe:	6902      	ldr	r2, [r0, #16]
 8003600:	439a      	bics	r2, r3
 8003602:	6102      	str	r2, [r0, #16]
  }
}
 8003604:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003606:	2670      	movs	r6, #112	@ 0x70
 8003608:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 800360a:	684e      	ldr	r6, [r1, #4]
 800360c:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800360e:	4e13      	ldr	r6, [pc, #76]	@ (800365c <TIM_Base_SetConfig+0x9c>)
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003610:	68c9      	ldr	r1, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8003612:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003614:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003616:	2180      	movs	r1, #128	@ 0x80
 8003618:	438b      	bics	r3, r1
 800361a:	431d      	orrs	r5, r3
  TIMx->CR1 = tmpcr1;
 800361c:	6005      	str	r5, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800361e:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003620:	6282      	str	r2, [r0, #40]	@ 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003622:	e7e7      	b.n	80035f4 <TIM_Base_SetConfig+0x34>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003624:	2670      	movs	r6, #112	@ 0x70
 8003626:	43b3      	bics	r3, r6
    tmpcr1 |= Structure->CounterMode;
 8003628:	684e      	ldr	r6, [r1, #4]
 800362a:	4333      	orrs	r3, r6
    tmpcr1 &= ~TIM_CR1_CKD;
 800362c:	4e0b      	ldr	r6, [pc, #44]	@ (800365c <TIM_Base_SetConfig+0x9c>)
 800362e:	4033      	ands	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003630:	68ce      	ldr	r6, [r1, #12]
 8003632:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003634:	2680      	movs	r6, #128	@ 0x80
 8003636:	43b3      	bics	r3, r6
 8003638:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800363a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800363c:	62c4      	str	r4, [r0, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800363e:	6282      	str	r2, [r0, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8003640:	690b      	ldr	r3, [r1, #16]
 8003642:	6303      	str	r3, [r0, #48]	@ 0x30
 8003644:	e7d6      	b.n	80035f4 <TIM_Base_SetConfig+0x34>
 8003646:	46c0      	nop			@ (mov r8, r8)
 8003648:	40012c00 	.word	0x40012c00
 800364c:	40000400 	.word	0x40000400
 8003650:	40002000 	.word	0x40002000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	fffffcff 	.word	0xfffffcff

08003660 <HAL_TIM_Base_Init>:
{
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	1e04      	subs	r4, r0, #0
  if (htim == NULL)
 8003664:	d02a      	beq.n	80036bc <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003666:	233d      	movs	r3, #61	@ 0x3d
 8003668:	5cc3      	ldrb	r3, [r0, r3]
 800366a:	b2da      	uxtb	r2, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d020      	beq.n	80036b2 <HAL_TIM_Base_Init+0x52>
  htim->State = HAL_TIM_STATE_BUSY;
 8003670:	2302      	movs	r3, #2
 8003672:	253d      	movs	r5, #61	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003674:	0021      	movs	r1, r4
  htim->State = HAL_TIM_STATE_BUSY;
 8003676:	5563      	strb	r3, [r4, r5]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003678:	c901      	ldmia	r1!, {r0}
 800367a:	f7ff ffa1 	bl	80035c0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800367e:	2301      	movs	r3, #1
 8003680:	2248      	movs	r2, #72	@ 0x48
  return HAL_OK;
 8003682:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003684:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003686:	3a0a      	subs	r2, #10
 8003688:	54a3      	strb	r3, [r4, r2]
 800368a:	3201      	adds	r2, #1
 800368c:	54a3      	strb	r3, [r4, r2]
 800368e:	3201      	adds	r2, #1
 8003690:	54a3      	strb	r3, [r4, r2]
 8003692:	3201      	adds	r2, #1
 8003694:	54a3      	strb	r3, [r4, r2]
 8003696:	3201      	adds	r2, #1
 8003698:	54a3      	strb	r3, [r4, r2]
 800369a:	3201      	adds	r2, #1
 800369c:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800369e:	3201      	adds	r2, #1
 80036a0:	54a3      	strb	r3, [r4, r2]
 80036a2:	3201      	adds	r2, #1
 80036a4:	54a3      	strb	r3, [r4, r2]
 80036a6:	3201      	adds	r2, #1
 80036a8:	54a3      	strb	r3, [r4, r2]
 80036aa:	3201      	adds	r2, #1
 80036ac:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 80036ae:	5563      	strb	r3, [r4, r5]
}
 80036b0:	bd70      	pop	{r4, r5, r6, pc}
    htim->Lock = HAL_UNLOCKED;
 80036b2:	333c      	adds	r3, #60	@ 0x3c
 80036b4:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 80036b6:	f7fe fe63 	bl	8002380 <HAL_TIM_Base_MspInit>
 80036ba:	e7d9      	b.n	8003670 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 80036bc:	2001      	movs	r0, #1
 80036be:	e7f7      	b.n	80036b0 <HAL_TIM_Base_Init+0x50>

080036c0 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 80036c0:	4770      	bx	lr
 80036c2:	46c0      	nop			@ (mov r8, r8)

080036c4 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 80036c4:	4770      	bx	lr
 80036c6:	46c0      	nop			@ (mov r8, r8)

080036c8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 80036c8:	4770      	bx	lr
 80036ca:	46c0      	nop			@ (mov r8, r8)

080036cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036cc:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036ce:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036d2:	2201      	movs	r2, #1
 80036d4:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036d8:	6801      	ldr	r1, [r0, #0]
 80036da:	4d13      	ldr	r5, [pc, #76]	@ (8003728 <UART_EndRxTransfer+0x5c>)
 80036dc:	680b      	ldr	r3, [r1, #0]
 80036de:	402b      	ands	r3, r5
 80036e0:	600b      	str	r3, [r1, #0]
 80036e2:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ea:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036ee:	6802      	ldr	r2, [r0, #0]
 80036f0:	4c0e      	ldr	r4, [pc, #56]	@ (800372c <UART_EndRxTransfer+0x60>)
 80036f2:	6893      	ldr	r3, [r2, #8]
 80036f4:	4023      	ands	r3, r4
 80036f6:	6093      	str	r3, [r2, #8]
 80036f8:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036fc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d10a      	bne.n	8003718 <UART_EndRxTransfer+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003702:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003706:	f383 8810 	msr	PRIMASK, r3
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370a:	2410      	movs	r4, #16
 800370c:	6802      	ldr	r2, [r0, #0]
 800370e:	6813      	ldr	r3, [r2, #0]
 8003710:	43a3      	bics	r3, r4
 8003712:	6013      	str	r3, [r2, #0]
 8003714:	f381 8810 	msr	PRIMASK, r1
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003718:	238c      	movs	r3, #140	@ 0x8c
 800371a:	2220      	movs	r2, #32
 800371c:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800371e:	2300      	movs	r3, #0
 8003720:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003722:	6743      	str	r3, [r0, #116]	@ 0x74
}
 8003724:	bd30      	pop	{r4, r5, pc}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	fffffedf 	.word	0xfffffedf
 800372c:	effffffe 	.word	0xeffffffe

08003730 <HAL_UART_DeInit>:
{
 8003730:	b570      	push	{r4, r5, r6, lr}
 8003732:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003734:	d018      	beq.n	8003768 <HAL_UART_DeInit+0x38>
  huart->gState = HAL_UART_STATE_BUSY;
 8003736:	2688      	movs	r6, #136	@ 0x88
 8003738:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800373a:	2101      	movs	r1, #1
  huart->Instance->CR1 = 0x0U;
 800373c:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_BUSY;
 800373e:	5183      	str	r3, [r0, r6]
  __HAL_UART_DISABLE(huart);
 8003740:	6803      	ldr	r3, [r0, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	438a      	bics	r2, r1
 8003746:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8003748:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800374a:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800374c:	609d      	str	r5, [r3, #8]
  HAL_UART_MspDeInit(huart);
 800374e:	f7fe fe8d 	bl	800246c <HAL_UART_MspDeInit>
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003752:	2390      	movs	r3, #144	@ 0x90
  return HAL_OK;
 8003754:	2000      	movs	r0, #0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003756:	50e5      	str	r5, [r4, r3]
  huart->RxState = HAL_UART_STATE_RESET;
 8003758:	3b04      	subs	r3, #4
  huart->gState = HAL_UART_STATE_RESET;
 800375a:	51a5      	str	r5, [r4, r6]
  huart->RxState = HAL_UART_STATE_RESET;
 800375c:	50e5      	str	r5, [r4, r3]
  __HAL_UNLOCK(huart);
 800375e:	3b08      	subs	r3, #8
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003760:	66e5      	str	r5, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003762:	6725      	str	r5, [r4, #112]	@ 0x70
  __HAL_UNLOCK(huart);
 8003764:	54e5      	strb	r5, [r4, r3]
}
 8003766:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8003768:	2001      	movs	r0, #1
 800376a:	e7fc      	b.n	8003766 <HAL_UART_DeInit+0x36>

0800376c <HAL_UART_Transmit_DMA>:
{
 800376c:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800376e:	2288      	movs	r2, #136	@ 0x88
{
 8003770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003772:	46c6      	mov	lr, r8
  if (huart->gState == HAL_UART_STATE_READY)
 8003774:	5882      	ldr	r2, [r0, r2]
{
 8003776:	0004      	movs	r4, r0
 8003778:	b500      	push	{lr}
  if (huart->gState == HAL_UART_STATE_READY)
 800377a:	2a20      	cmp	r2, #32
 800377c:	d12c      	bne.n	80037d8 <HAL_UART_Transmit_DMA+0x6c>
    if ((pData == NULL) || (Size == 0U))
 800377e:	2900      	cmp	r1, #0
 8003780:	d028      	beq.n	80037d4 <HAL_UART_Transmit_DMA+0x68>
 8003782:	2b00      	cmp	r3, #0
 8003784:	d026      	beq.n	80037d4 <HAL_UART_Transmit_DMA+0x68>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003786:	2280      	movs	r2, #128	@ 0x80
 8003788:	6880      	ldr	r0, [r0, #8]
 800378a:	0152      	lsls	r2, r2, #5
 800378c:	4290      	cmp	r0, r2
 800378e:	d038      	beq.n	8003802 <HAL_UART_Transmit_DMA+0x96>
    huart->TxXferSize  = Size;
 8003790:	2254      	movs	r2, #84	@ 0x54
    huart->pTxBuffPtr  = pData;
 8003792:	6521      	str	r1, [r4, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8003794:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 8003796:	3202      	adds	r2, #2
 8003798:	52a3      	strh	r3, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800379a:	3232      	adds	r2, #50	@ 0x32
 800379c:	4690      	mov	r8, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379e:	2690      	movs	r6, #144	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a0:	4640      	mov	r0, r8
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a2:	2700      	movs	r7, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a4:	3a67      	subs	r2, #103	@ 0x67
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037a6:	51a7      	str	r7, [r4, r6]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037a8:	5022      	str	r2, [r4, r0]
    if (huart->hdmatx != NULL)
 80037aa:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80037ac:	6822      	ldr	r2, [r4, #0]
    if (huart->hdmatx != NULL)
 80037ae:	2800      	cmp	r0, #0
 80037b0:	d017      	beq.n	80037e2 <HAL_UART_Transmit_DMA+0x76>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037b2:	4d17      	ldr	r5, [pc, #92]	@ (8003810 <HAL_UART_Transmit_DMA+0xa4>)
      huart->hdmatx->XferAbortCallback = NULL;
 80037b4:	6387      	str	r7, [r0, #56]	@ 0x38
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80037b6:	62c5      	str	r5, [r0, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037b8:	4d16      	ldr	r5, [pc, #88]	@ (8003814 <HAL_UART_Transmit_DMA+0xa8>)
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80037ba:	3228      	adds	r2, #40	@ 0x28
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80037bc:	6305      	str	r5, [r0, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80037be:	4d16      	ldr	r5, [pc, #88]	@ (8003818 <HAL_UART_Transmit_DMA+0xac>)
 80037c0:	6345      	str	r5, [r0, #52]	@ 0x34
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80037c2:	f7ff f897 	bl	80028f4 <HAL_DMA_Start_IT>
 80037c6:	2800      	cmp	r0, #0
 80037c8:	d00a      	beq.n	80037e0 <HAL_UART_Transmit_DMA+0x74>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037ca:	2310      	movs	r3, #16
        huart->gState = HAL_UART_STATE_READY;
 80037cc:	4642      	mov	r2, r8
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80037ce:	51a3      	str	r3, [r4, r6]
        huart->gState = HAL_UART_STATE_READY;
 80037d0:	3310      	adds	r3, #16
 80037d2:	50a3      	str	r3, [r4, r2]
      return HAL_ERROR;
 80037d4:	2001      	movs	r0, #1
 80037d6:	e000      	b.n	80037da <HAL_UART_Transmit_DMA+0x6e>
    return HAL_BUSY;
 80037d8:	2002      	movs	r0, #2
}
 80037da:	bc80      	pop	{r7}
 80037dc:	46b8      	mov	r8, r7
 80037de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e0:	6822      	ldr	r2, [r4, #0]
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80037e2:	2340      	movs	r3, #64	@ 0x40
 80037e4:	6213      	str	r3, [r2, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037e6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ea:	3b3f      	subs	r3, #63	@ 0x3f
 80037ec:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037f0:	2080      	movs	r0, #128	@ 0x80
 80037f2:	6822      	ldr	r2, [r4, #0]
 80037f4:	6893      	ldr	r3, [r2, #8]
 80037f6:	4303      	orrs	r3, r0
 80037f8:	6093      	str	r3, [r2, #8]
 80037fa:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 80037fe:	2000      	movs	r0, #0
 8003800:	e7eb      	b.n	80037da <HAL_UART_Transmit_DMA+0x6e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003802:	6922      	ldr	r2, [r4, #16]
 8003804:	2a00      	cmp	r2, #0
 8003806:	d1c3      	bne.n	8003790 <HAL_UART_Transmit_DMA+0x24>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003808:	07ca      	lsls	r2, r1, #31
 800380a:	d5c1      	bpl.n	8003790 <HAL_UART_Transmit_DMA+0x24>
      return HAL_ERROR;
 800380c:	2001      	movs	r0, #1
 800380e:	e7e4      	b.n	80037da <HAL_UART_Transmit_DMA+0x6e>
 8003810:	0800381d 	.word	0x0800381d
 8003814:	08003871 	.word	0x08003871
 8003818:	08003881 	.word	0x08003881

0800381c <UART_DMATransmitCplt>:
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800381c:	2220      	movs	r2, #32
{
 800381e:	0003      	movs	r3, r0
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003820:	0011      	movs	r1, r2
 8003822:	681b      	ldr	r3, [r3, #0]
{
 8003824:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003826:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003828:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800382a:	4019      	ands	r1, r3
 800382c:	421a      	tst	r2, r3
 800382e:	d119      	bne.n	8003864 <UART_DMATransmitCplt+0x48>
  {
    huart->TxXferCount = 0U;
 8003830:	2356      	movs	r3, #86	@ 0x56
 8003832:	52c1      	strh	r1, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003834:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003838:	3a1f      	subs	r2, #31
 800383a:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800383e:	2480      	movs	r4, #128	@ 0x80
 8003840:	6801      	ldr	r1, [r0, #0]
 8003842:	688b      	ldr	r3, [r1, #8]
 8003844:	43a3      	bics	r3, r4
 8003846:	608b      	str	r3, [r1, #8]
 8003848:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800384c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003850:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003854:	6802      	ldr	r2, [r0, #0]
 8003856:	2040      	movs	r0, #64	@ 0x40
 8003858:	6813      	ldr	r3, [r2, #0]
 800385a:	4303      	orrs	r3, r0
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003862:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8003864:	f7fe fc94 	bl	8002190 <HAL_UART_TxCpltCallback>
}
 8003868:	e7fb      	b.n	8003862 <UART_DMATransmitCplt+0x46>
 800386a:	46c0      	nop			@ (mov r8, r8)

0800386c <HAL_UART_TxHalfCpltCallback>:
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
 800386c:	4770      	bx	lr
 800386e:	46c0      	nop			@ (mov r8, r8)

08003870 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003870:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003872:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003874:	f7ff fffa 	bl	800386c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003878:	bd10      	pop	{r4, pc}
 800387a:	46c0      	nop			@ (mov r8, r8)

0800387c <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800387c:	4770      	bx	lr
 800387e:	46c0      	nop			@ (mov r8, r8)

08003880 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003882:	2188      	movs	r1, #136	@ 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003884:	238c      	movs	r3, #140	@ 0x8c
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003886:	6a84      	ldr	r4, [r0, #40]	@ 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003888:	5865      	ldr	r5, [r4, r1]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800388a:	58e0      	ldr	r0, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800388c:	6823      	ldr	r3, [r4, #0]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	0612      	lsls	r2, r2, #24
 8003892:	d501      	bpl.n	8003898 <UART_DMAError+0x18>
 8003894:	2d21      	cmp	r5, #33	@ 0x21
 8003896:	d014      	beq.n	80038c2 <UART_DMAError+0x42>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	065b      	lsls	r3, r3, #25
 800389c:	d501      	bpl.n	80038a2 <UART_DMAError+0x22>
 800389e:	2822      	cmp	r0, #34	@ 0x22
 80038a0:	d008      	beq.n	80038b4 <UART_DMAError+0x34>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038a2:	2290      	movs	r2, #144	@ 0x90
 80038a4:	2110      	movs	r1, #16
 80038a6:	58a3      	ldr	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038a8:	0020      	movs	r0, r4
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80038aa:	430b      	orrs	r3, r1
 80038ac:	50a3      	str	r3, [r4, r2]
  HAL_UART_ErrorCallback(huart);
 80038ae:	f7ff ffe5 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->RxXferCount = 0U;
 80038b4:	235e      	movs	r3, #94	@ 0x5e
 80038b6:	2200      	movs	r2, #0
    UART_EndRxTransfer(huart);
 80038b8:	0020      	movs	r0, r4
    huart->RxXferCount = 0U;
 80038ba:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80038bc:	f7ff ff06 	bl	80036cc <UART_EndRxTransfer>
 80038c0:	e7ef      	b.n	80038a2 <UART_DMAError+0x22>
    huart->TxXferCount = 0U;
 80038c2:	2356      	movs	r3, #86	@ 0x56
 80038c4:	2200      	movs	r2, #0
 80038c6:	52e2      	strh	r2, [r4, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038c8:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038cc:	3201      	adds	r2, #1
 80038ce:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80038d2:	27c0      	movs	r7, #192	@ 0xc0
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	682b      	ldr	r3, [r5, #0]
 80038d8:	43bb      	bics	r3, r7
 80038da:	602b      	str	r3, [r5, #0]
 80038dc:	f386 8810 	msr	PRIMASK, r6
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038e0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e4:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80038e8:	6822      	ldr	r2, [r4, #0]
 80038ea:	4e05      	ldr	r6, [pc, #20]	@ (8003900 <UART_DMAError+0x80>)
 80038ec:	6893      	ldr	r3, [r2, #8]
 80038ee:	4033      	ands	r3, r6
 80038f0:	6093      	str	r3, [r2, #8]
 80038f2:	f385 8810 	msr	PRIMASK, r5
  huart->gState = HAL_UART_STATE_READY;
 80038f6:	2320      	movs	r3, #32
 80038f8:	5063      	str	r3, [r4, r1]
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80038fa:	6823      	ldr	r3, [r4, #0]
}
 80038fc:	e7cc      	b.n	8003898 <UART_DMAError+0x18>
 80038fe:	46c0      	nop			@ (mov r8, r8)
 8003900:	ff7fffff 	.word	0xff7fffff

08003904 <UART_DMAAbortOnError>:
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
  huart->RxXferCount = 0U;
 8003904:	235e      	movs	r3, #94	@ 0x5e
 8003906:	2200      	movs	r2, #0
{
 8003908:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800390a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 800390c:	52c2      	strh	r2, [r0, r3]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800390e:	f7ff ffb5 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003912:	bd10      	pop	{r4, pc}

08003914 <HAL_UARTEx_RxEventCallback>:
}
 8003914:	4770      	bx	lr
 8003916:	46c0      	nop			@ (mov r8, r8)

08003918 <HAL_UART_IRQHandler>:
{
 8003918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391a:	4645      	mov	r5, r8
 800391c:	46de      	mov	lr, fp
 800391e:	4657      	mov	r7, sl
 8003920:	464e      	mov	r6, r9
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003922:	6802      	ldr	r2, [r0, #0]
{
 8003924:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003926:	69d3      	ldr	r3, [r2, #28]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003928:	4db9      	ldr	r5, [pc, #740]	@ (8003c10 <HAL_UART_IRQHandler+0x2f8>)
{
 800392a:	0004      	movs	r4, r0
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800392c:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800392e:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8003930:	422b      	tst	r3, r5
 8003932:	d138      	bne.n	80039a6 <HAL_UART_IRQHandler+0x8e>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003934:	2520      	movs	r5, #32
 8003936:	421d      	tst	r5, r3
 8003938:	d006      	beq.n	8003948 <HAL_UART_IRQHandler+0x30>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800393a:	2680      	movs	r6, #128	@ 0x80
 800393c:	0576      	lsls	r6, r6, #21
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800393e:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003940:	4006      	ands	r6, r0
 8003942:	4335      	orrs	r5, r6
 8003944:	d000      	beq.n	8003948 <HAL_UART_IRQHandler+0x30>
 8003946:	e0ec      	b.n	8003b22 <HAL_UART_IRQHandler+0x20a>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003948:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 800394a:	2d01      	cmp	r5, #1
 800394c:	d100      	bne.n	8003950 <HAL_UART_IRQHandler+0x38>
 800394e:	e0ae      	b.n	8003aae <HAL_UART_IRQHandler+0x196>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003950:	2580      	movs	r5, #128	@ 0x80
 8003952:	036d      	lsls	r5, r5, #13
 8003954:	422b      	tst	r3, r5
 8003956:	d11f      	bne.n	8003998 <HAL_UART_IRQHandler+0x80>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003958:	2280      	movs	r2, #128	@ 0x80
 800395a:	421a      	tst	r2, r3
 800395c:	d006      	beq.n	800396c <HAL_UART_IRQHandler+0x54>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800395e:	2580      	movs	r5, #128	@ 0x80
 8003960:	042d      	lsls	r5, r5, #16
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003962:	400a      	ands	r2, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003964:	4028      	ands	r0, r5
 8003966:	4302      	orrs	r2, r0
 8003968:	d000      	beq.n	800396c <HAL_UART_IRQHandler+0x54>
 800396a:	e0e1      	b.n	8003b30 <HAL_UART_IRQHandler+0x218>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800396c:	2240      	movs	r2, #64	@ 0x40
 800396e:	421a      	tst	r2, r3
 8003970:	d002      	beq.n	8003978 <HAL_UART_IRQHandler+0x60>
 8003972:	420a      	tst	r2, r1
 8003974:	d000      	beq.n	8003978 <HAL_UART_IRQHandler+0x60>
 8003976:	e0ea      	b.n	8003b4e <HAL_UART_IRQHandler+0x236>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003978:	021a      	lsls	r2, r3, #8
 800397a:	d502      	bpl.n	8003982 <HAL_UART_IRQHandler+0x6a>
 800397c:	004a      	lsls	r2, r1, #1
 800397e:	d500      	bpl.n	8003982 <HAL_UART_IRQHandler+0x6a>
 8003980:	e0f9      	b.n	8003b76 <HAL_UART_IRQHandler+0x25e>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003982:	01db      	lsls	r3, r3, #7
 8003984:	d502      	bpl.n	800398c <HAL_UART_IRQHandler+0x74>
 8003986:	2900      	cmp	r1, #0
 8003988:	da00      	bge.n	800398c <HAL_UART_IRQHandler+0x74>
 800398a:	e0f8      	b.n	8003b7e <HAL_UART_IRQHandler+0x266>
}
 800398c:	bcf0      	pop	{r4, r5, r6, r7}
 800398e:	46bb      	mov	fp, r7
 8003990:	46b2      	mov	sl, r6
 8003992:	46a9      	mov	r9, r5
 8003994:	46a0      	mov	r8, r4
 8003996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003998:	0246      	lsls	r6, r0, #9
 800399a:	d5dd      	bpl.n	8003958 <HAL_UART_IRQHandler+0x40>
    HAL_UARTEx_WakeupCallback(huart);
 800399c:	0020      	movs	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800399e:	6215      	str	r5, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80039a0:	f000 fb92 	bl	80040c8 <HAL_UARTEx_WakeupCallback>
    return;
 80039a4:	e7f2      	b.n	800398c <HAL_UART_IRQHandler+0x74>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80039a6:	4e9b      	ldr	r6, [pc, #620]	@ (8003c14 <HAL_UART_IRQHandler+0x2fc>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80039a8:	4d9b      	ldr	r5, [pc, #620]	@ (8003c18 <HAL_UART_IRQHandler+0x300>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80039aa:	4006      	ands	r6, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80039ac:	400d      	ands	r5, r1
 80039ae:	4335      	orrs	r5, r6
 80039b0:	d0ca      	beq.n	8003948 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80039b2:	2501      	movs	r5, #1
 80039b4:	421d      	tst	r5, r3
 80039b6:	d008      	beq.n	80039ca <HAL_UART_IRQHandler+0xb2>
 80039b8:	05cf      	lsls	r7, r1, #23
 80039ba:	d506      	bpl.n	80039ca <HAL_UART_IRQHandler+0xb2>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039bc:	2790      	movs	r7, #144	@ 0x90
 80039be:	46bc      	mov	ip, r7
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80039c0:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039c2:	59e7      	ldr	r7, [r4, r7]
 80039c4:	433d      	orrs	r5, r7
 80039c6:	4667      	mov	r7, ip
 80039c8:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039ca:	2504      	movs	r5, #4
 80039cc:	002f      	movs	r7, r5
 80039ce:	401f      	ands	r7, r3
 80039d0:	46bc      	mov	ip, r7
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d2:	2702      	movs	r7, #2
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d4:	46a9      	mov	r9, r5
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039d6:	421f      	tst	r7, r3
 80039d8:	d100      	bne.n	80039dc <HAL_UART_IRQHandler+0xc4>
 80039da:	e09a      	b.n	8003b12 <HAL_UART_IRQHandler+0x1fa>
 80039dc:	07c5      	lsls	r5, r0, #31
 80039de:	d516      	bpl.n	8003a0e <HAL_UART_IRQHandler+0xf6>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e0:	2590      	movs	r5, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80039e2:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80039e4:	5967      	ldr	r7, [r4, r5]
 80039e6:	46a8      	mov	r8, r5
 80039e8:	464d      	mov	r5, r9
 80039ea:	433d      	orrs	r5, r7
 80039ec:	4647      	mov	r7, r8
 80039ee:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80039f0:	4665      	mov	r5, ip
 80039f2:	2d00      	cmp	r5, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80039f6:	2504      	movs	r5, #4
 80039f8:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039fa:	358c      	adds	r5, #140	@ 0x8c
 80039fc:	46a9      	mov	r9, r5
 80039fe:	5965      	ldr	r5, [r4, r5]
 8003a00:	46a8      	mov	r8, r5
 8003a02:	2502      	movs	r5, #2
 8003a04:	4647      	mov	r7, r8
 8003a06:	432f      	orrs	r7, r5
 8003a08:	003d      	movs	r5, r7
 8003a0a:	464f      	mov	r7, r9
 8003a0c:	51e5      	str	r5, [r4, r7]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003a0e:	2708      	movs	r7, #8
 8003a10:	421f      	tst	r7, r3
 8003a12:	d008      	beq.n	8003a26 <HAL_UART_IRQHandler+0x10e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003a14:	2520      	movs	r5, #32
 8003a16:	400d      	ands	r5, r1
 8003a18:	4335      	orrs	r5, r6
 8003a1a:	d004      	beq.n	8003a26 <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a1c:	2690      	movs	r6, #144	@ 0x90
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a1e:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a20:	59a5      	ldr	r5, [r4, r6]
 8003a22:	433d      	orrs	r5, r7
 8003a24:	51a5      	str	r5, [r4, r6]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003a26:	2580      	movs	r5, #128	@ 0x80
 8003a28:	012d      	lsls	r5, r5, #4
 8003a2a:	422b      	tst	r3, r5
 8003a2c:	d007      	beq.n	8003a3e <HAL_UART_IRQHandler+0x126>
 8003a2e:	014e      	lsls	r6, r1, #5
 8003a30:	d505      	bpl.n	8003a3e <HAL_UART_IRQHandler+0x126>
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a32:	2690      	movs	r6, #144	@ 0x90
 8003a34:	2720      	movs	r7, #32
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a36:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003a38:	59a5      	ldr	r5, [r4, r6]
 8003a3a:	433d      	orrs	r5, r7
 8003a3c:	51a5      	str	r5, [r4, r6]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a3e:	2590      	movs	r5, #144	@ 0x90
 8003a40:	5965      	ldr	r5, [r4, r5]
 8003a42:	2d00      	cmp	r5, #0
 8003a44:	d0a2      	beq.n	800398c <HAL_UART_IRQHandler+0x74>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003a46:	2520      	movs	r5, #32
 8003a48:	421d      	tst	r5, r3
 8003a4a:	d005      	beq.n	8003a58 <HAL_UART_IRQHandler+0x140>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a4c:	2380      	movs	r3, #128	@ 0x80
 8003a4e:	055b      	lsls	r3, r3, #21
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003a50:	400d      	ands	r5, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003a52:	4003      	ands	r3, r0
 8003a54:	431d      	orrs	r5, r3
 8003a56:	d16f      	bne.n	8003b38 <HAL_UART_IRQHandler+0x220>
      errorcode = huart->ErrorCode;
 8003a58:	2690      	movs	r6, #144	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a5a:	2740      	movs	r7, #64	@ 0x40
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a5c:	2328      	movs	r3, #40	@ 0x28
      errorcode = huart->ErrorCode;
 8003a5e:	59a1      	ldr	r1, [r4, r6]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a60:	6895      	ldr	r5, [r2, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003a62:	400b      	ands	r3, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a64:	403d      	ands	r5, r7
        UART_EndRxTransfer(huart);
 8003a66:	0020      	movs	r0, r4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003a68:	431d      	orrs	r5, r3
 8003a6a:	d100      	bne.n	8003a6e <HAL_UART_IRQHandler+0x156>
 8003a6c:	e08b      	b.n	8003b86 <HAL_UART_IRQHandler+0x26e>
        UART_EndRxTransfer(huart);
 8003a6e:	f7ff fe2d 	bl	80036cc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	6823      	ldr	r3, [r4, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	421f      	tst	r7, r3
 8003a78:	d065      	beq.n	8003b46 <HAL_UART_IRQHandler+0x22e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003a7a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	2301      	movs	r3, #1
 8003a80:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a84:	6822      	ldr	r2, [r4, #0]
 8003a86:	6893      	ldr	r3, [r2, #8]
 8003a88:	43bb      	bics	r3, r7
 8003a8a:	6093      	str	r3, [r2, #8]
 8003a8c:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003a90:	2580      	movs	r5, #128	@ 0x80
 8003a92:	5960      	ldr	r0, [r4, r5]
 8003a94:	2800      	cmp	r0, #0
 8003a96:	d056      	beq.n	8003b46 <HAL_UART_IRQHandler+0x22e>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003a98:	4b60      	ldr	r3, [pc, #384]	@ (8003c1c <HAL_UART_IRQHandler+0x304>)
 8003a9a:	6383      	str	r3, [r0, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003a9c:	f7fe ffac 	bl	80029f8 <HAL_DMA_Abort_IT>
 8003aa0:	2800      	cmp	r0, #0
 8003aa2:	d100      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x18e>
 8003aa4:	e772      	b.n	800398c <HAL_UART_IRQHandler+0x74>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003aa6:	5960      	ldr	r0, [r4, r5]
 8003aa8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003aaa:	4798      	blx	r3
 8003aac:	e76e      	b.n	800398c <HAL_UART_IRQHandler+0x74>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003aae:	2610      	movs	r6, #16
 8003ab0:	421e      	tst	r6, r3
 8003ab2:	d100      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x19e>
 8003ab4:	e74c      	b.n	8003950 <HAL_UART_IRQHandler+0x38>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003ab6:	420e      	tst	r6, r1
 8003ab8:	d100      	bne.n	8003abc <HAL_UART_IRQHandler+0x1a4>
 8003aba:	e749      	b.n	8003950 <HAL_UART_IRQHandler+0x38>
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003abc:	2040      	movs	r0, #64	@ 0x40
 8003abe:	0001      	movs	r1, r0
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ac0:	235c      	movs	r3, #92	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ac2:	6216      	str	r6, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac4:	6892      	ldr	r2, [r2, #8]
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ac6:	469b      	mov	fp, r3
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ac8:	4011      	ands	r1, r2
 8003aca:	468c      	mov	ip, r1
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003acc:	5ae3      	ldrh	r3, [r4, r3]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ace:	4210      	tst	r0, r2
 8003ad0:	d05d      	beq.n	8003b8e <HAL_UART_IRQHandler+0x276>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ad2:	2280      	movs	r2, #128	@ 0x80
 8003ad4:	4694      	mov	ip, r2
 8003ad6:	58a2      	ldr	r2, [r4, r2]
 8003ad8:	6812      	ldr	r2, [r2, #0]
 8003ada:	6851      	ldr	r1, [r2, #4]
 8003adc:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 8003ade:	2900      	cmp	r1, #0
 8003ae0:	d100      	bne.n	8003ae4 <HAL_UART_IRQHandler+0x1cc>
 8003ae2:	e08c      	b.n	8003bfe <HAL_UART_IRQHandler+0x2e6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ae4:	4299      	cmp	r1, r3
 8003ae6:	d300      	bcc.n	8003aea <HAL_UART_IRQHandler+0x1d2>
 8003ae8:	e089      	b.n	8003bfe <HAL_UART_IRQHandler+0x2e6>
        huart->RxXferCount = nb_remaining_rx_data;
 8003aea:	275e      	movs	r7, #94	@ 0x5e
 8003aec:	53e1      	strh	r1, [r4, r7]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003aee:	6811      	ldr	r1, [r2, #0]
 8003af0:	2220      	movs	r2, #32
 8003af2:	0017      	movs	r7, r2
 8003af4:	400f      	ands	r7, r1
 8003af6:	46b8      	mov	r8, r7
 8003af8:	420a      	tst	r2, r1
 8003afa:	d100      	bne.n	8003afe <HAL_UART_IRQHandler+0x1e6>
 8003afc:	e094      	b.n	8003c28 <HAL_UART_IRQHandler+0x310>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003afe:	2202      	movs	r2, #2
 8003b00:	6722      	str	r2, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003b02:	325c      	adds	r2, #92	@ 0x5c
 8003b04:	5aa1      	ldrh	r1, [r4, r2]
 8003b06:	0020      	movs	r0, r4
 8003b08:	1a59      	subs	r1, r3, r1
 8003b0a:	b289      	uxth	r1, r1
 8003b0c:	f7ff ff02 	bl	8003914 <HAL_UARTEx_RxEventCallback>
 8003b10:	e73c      	b.n	800398c <HAL_UART_IRQHandler+0x74>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b12:	4665      	mov	r5, ip
 8003b14:	2d00      	cmp	r5, #0
 8003b16:	d100      	bne.n	8003b1a <HAL_UART_IRQHandler+0x202>
 8003b18:	e779      	b.n	8003a0e <HAL_UART_IRQHandler+0xf6>
 8003b1a:	07c5      	lsls	r5, r0, #31
 8003b1c:	d400      	bmi.n	8003b20 <HAL_UART_IRQHandler+0x208>
 8003b1e:	e776      	b.n	8003a0e <HAL_UART_IRQHandler+0xf6>
 8003b20:	e769      	b.n	80039f6 <HAL_UART_IRQHandler+0xde>
      if (huart->RxISR != NULL)
 8003b22:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d100      	bne.n	8003b2a <HAL_UART_IRQHandler+0x212>
 8003b28:	e730      	b.n	800398c <HAL_UART_IRQHandler+0x74>
      huart->TxISR(huart);
 8003b2a:	0020      	movs	r0, r4
 8003b2c:	4798      	blx	r3
 8003b2e:	e72d      	b.n	800398c <HAL_UART_IRQHandler+0x74>
    if (huart->TxISR != NULL)
 8003b30:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f9      	bne.n	8003b2a <HAL_UART_IRQHandler+0x212>
 8003b36:	e729      	b.n	800398c <HAL_UART_IRQHandler+0x74>
        if (huart->RxISR != NULL)
 8003b38:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d08c      	beq.n	8003a58 <HAL_UART_IRQHandler+0x140>
          huart->RxISR(huart);
 8003b3e:	0020      	movs	r0, r4
 8003b40:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	e788      	b.n	8003a58 <HAL_UART_IRQHandler+0x140>
            HAL_UART_ErrorCallback(huart);
 8003b46:	0020      	movs	r0, r4
 8003b48:	f7ff fe98 	bl	800387c <HAL_UART_ErrorCallback>
 8003b4c:	e71e      	b.n	800398c <HAL_UART_IRQHandler+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003b4e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b52:	2301      	movs	r3, #1
 8003b54:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b58:	6821      	ldr	r1, [r4, #0]
 8003b5a:	680b      	ldr	r3, [r1, #0]
 8003b5c:	4393      	bics	r3, r2
 8003b5e:	600b      	str	r3, [r1, #0]
 8003b60:	f380 8810 	msr	PRIMASK, r0

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b64:	2388      	movs	r3, #136	@ 0x88
 8003b66:	3a20      	subs	r2, #32
 8003b68:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b6a:	2300      	movs	r3, #0
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b6c:	0020      	movs	r0, r4
  huart->TxISR = NULL;
 8003b6e:	67a3      	str	r3, [r4, #120]	@ 0x78
  HAL_UART_TxCpltCallback(huart);
 8003b70:	f7fe fb0e 	bl	8002190 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b74:	e70a      	b.n	800398c <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003b76:	0020      	movs	r0, r4
 8003b78:	f000 faaa 	bl	80040d0 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 8003b7c:	e706      	b.n	800398c <HAL_UART_IRQHandler+0x74>
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b7e:	0020      	movs	r0, r4
 8003b80:	f000 faa4 	bl	80040cc <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003b84:	e702      	b.n	800398c <HAL_UART_IRQHandler+0x74>
        HAL_UART_ErrorCallback(huart);
 8003b86:	f7ff fe79 	bl	800387c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8a:	51a5      	str	r5, [r4, r6]
 8003b8c:	e6fe      	b.n	800398c <HAL_UART_IRQHandler+0x74>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b8e:	215e      	movs	r1, #94	@ 0x5e
 8003b90:	5a62      	ldrh	r2, [r4, r1]
      if ((huart->RxXferCount > 0U)
 8003b92:	5a61      	ldrh	r1, [r4, r1]
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b94:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 8003b96:	2900      	cmp	r1, #0
 8003b98:	d100      	bne.n	8003b9c <HAL_UART_IRQHandler+0x284>
 8003b9a:	e6f7      	b.n	800398c <HAL_UART_IRQHandler+0x74>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003b9c:	1a9b      	subs	r3, r3, r2
 8003b9e:	b299      	uxth	r1, r3
          && (nb_rx_data > 0U))
 8003ba0:	2900      	cmp	r1, #0
 8003ba2:	d100      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x28e>
 8003ba4:	e6f2      	b.n	800398c <HAL_UART_IRQHandler+0x74>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ba6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003baa:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	4f1b      	ldr	r7, [pc, #108]	@ (8003c20 <HAL_UART_IRQHandler+0x308>)
 8003bb2:	6813      	ldr	r3, [r2, #0]
 8003bb4:	403b      	ands	r3, r7
 8003bb6:	6013      	str	r3, [r2, #0]
 8003bb8:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bbc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc0:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003bc4:	6822      	ldr	r2, [r4, #0]
 8003bc6:	4f17      	ldr	r7, [pc, #92]	@ (8003c24 <HAL_UART_IRQHandler+0x30c>)
 8003bc8:	6893      	ldr	r3, [r2, #8]
 8003bca:	403b      	ands	r3, r7
 8003bcc:	6093      	str	r3, [r2, #8]
 8003bce:	f380 8810 	msr	PRIMASK, r0
        huart->RxState = HAL_UART_STATE_READY;
 8003bd2:	238c      	movs	r3, #140	@ 0x8c
 8003bd4:	2220      	movs	r2, #32
 8003bd6:	50e2      	str	r2, [r4, r3]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd8:	4663      	mov	r3, ip
 8003bda:	66e3      	str	r3, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 8003bdc:	6763      	str	r3, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003bde:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003be2:	f385 8810 	msr	PRIMASK, r5
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003be6:	6822      	ldr	r2, [r4, #0]
 8003be8:	6813      	ldr	r3, [r2, #0]
 8003bea:	43b3      	bics	r3, r6
 8003bec:	6013      	str	r3, [r2, #0]
 8003bee:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bf2:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf4:	0020      	movs	r0, r4
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003bf6:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bf8:	f7ff fe8c 	bl	8003914 <HAL_UARTEx_RxEventCallback>
 8003bfc:	e6c6      	b.n	800398c <HAL_UART_IRQHandler+0x74>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8003bfe:	4299      	cmp	r1, r3
 8003c00:	d000      	beq.n	8003c04 <HAL_UART_IRQHandler+0x2ec>
 8003c02:	e6c3      	b.n	800398c <HAL_UART_IRQHandler+0x74>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003c04:	6813      	ldr	r3, [r2, #0]
 8003c06:	069b      	lsls	r3, r3, #26
 8003c08:	d400      	bmi.n	8003c0c <HAL_UART_IRQHandler+0x2f4>
 8003c0a:	e6bf      	b.n	800398c <HAL_UART_IRQHandler+0x74>
 8003c0c:	e7f1      	b.n	8003bf2 <HAL_UART_IRQHandler+0x2da>
 8003c0e:	46c0      	nop			@ (mov r8, r8)
 8003c10:	0000080f 	.word	0x0000080f
 8003c14:	10000001 	.word	0x10000001
 8003c18:	04000120 	.word	0x04000120
 8003c1c:	08003905 	.word	0x08003905
 8003c20:	fffffedf 	.word	0xfffffedf
 8003c24:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c28:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2c:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c30:	6821      	ldr	r1, [r4, #0]
 8003c32:	4f17      	ldr	r7, [pc, #92]	@ (8003c90 <HAL_UART_IRQHandler+0x378>)
 8003c34:	680b      	ldr	r3, [r1, #0]
 8003c36:	403b      	ands	r3, r7
 8003c38:	600b      	str	r3, [r1, #0]
 8003c3a:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c3e:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	6821      	ldr	r1, [r4, #0]
 8003c48:	688b      	ldr	r3, [r1, #8]
 8003c4a:	43ab      	bics	r3, r5
 8003c4c:	608b      	str	r3, [r1, #8]
 8003c4e:	f389 8810 	msr	PRIMASK, r9
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c52:	f3ef 8910 	mrs	r9, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c56:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5a:	6821      	ldr	r1, [r4, #0]
 8003c5c:	688b      	ldr	r3, [r1, #8]
 8003c5e:	4383      	bics	r3, r0
 8003c60:	608b      	str	r3, [r1, #8]
 8003c62:	f389 8810 	msr	PRIMASK, r9
          huart->RxState = HAL_UART_STATE_READY;
 8003c66:	238c      	movs	r3, #140	@ 0x8c
 8003c68:	50e2      	str	r2, [r4, r3]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6a:	4643      	mov	r3, r8
 8003c6c:	66e3      	str	r3, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003c6e:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c72:	f385 8810 	msr	PRIMASK, r5
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c76:	6822      	ldr	r2, [r4, #0]
 8003c78:	6813      	ldr	r3, [r2, #0]
 8003c7a:	43b3      	bics	r3, r6
 8003c7c:	6013      	str	r3, [r2, #0]
 8003c7e:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003c82:	4663      	mov	r3, ip
 8003c84:	58e0      	ldr	r0, [r4, r3]
 8003c86:	f7fe fe7b 	bl	8002980 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003c8a:	465b      	mov	r3, fp
 8003c8c:	5ae3      	ldrh	r3, [r4, r3]
 8003c8e:	e736      	b.n	8003afe <HAL_UART_IRQHandler+0x1e6>
 8003c90:	fffffeff 	.word	0xfffffeff

08003c94 <UART_SetConfig>:
{
 8003c94:	b570      	push	{r4, r5, r6, lr}
 8003c96:	0004      	movs	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c98:	6925      	ldr	r5, [r4, #16]
 8003c9a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c9c:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c9e:	432a      	orrs	r2, r5
 8003ca0:	6965      	ldr	r5, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca2:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ca4:	69c0      	ldr	r0, [r0, #28]
 8003ca6:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ca8:	4d4e      	ldr	r5, [pc, #312]	@ (8003de4 <UART_SetConfig+0x150>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003caa:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cac:	4029      	ands	r1, r5
 8003cae:	430a      	orrs	r2, r1
 8003cb0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb2:	685a      	ldr	r2, [r3, #4]
 8003cb4:	494c      	ldr	r1, [pc, #304]	@ (8003de8 <UART_SetConfig+0x154>)
  tmpreg |= huart->Init.OneBitSampling;
 8003cb6:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cb8:	400a      	ands	r2, r1
 8003cba:	68e1      	ldr	r1, [r4, #12]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003cc0:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc2:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003cc4:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cc6:	4d49      	ldr	r5, [pc, #292]	@ (8003dec <UART_SetConfig+0x158>)
 8003cc8:	4029      	ands	r1, r5
 8003cca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003ccc:	210f      	movs	r1, #15
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003cce:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003cd2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003cd4:	438a      	bics	r2, r1
 8003cd6:	432a      	orrs	r2, r5
 8003cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cda:	4a45      	ldr	r2, [pc, #276]	@ (8003df0 <UART_SetConfig+0x15c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d004      	beq.n	8003cea <UART_SetConfig+0x56>
 8003ce0:	4a44      	ldr	r2, [pc, #272]	@ (8003df4 <UART_SetConfig+0x160>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d008      	beq.n	8003cf8 <UART_SetConfig+0x64>
    switch (clocksource)
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	e00f      	b.n	8003d0a <UART_SetConfig+0x76>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cea:	2303      	movs	r3, #3
 8003cec:	4942      	ldr	r1, [pc, #264]	@ (8003df8 <UART_SetConfig+0x164>)
 8003cee:	6d4a      	ldr	r2, [r1, #84]	@ 0x54
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d90e      	bls.n	8003d16 <UART_SetConfig+0x82>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	021b      	lsls	r3, r3, #8
 8003cfc:	4298      	cmp	r0, r3
 8003cfe:	d040      	beq.n	8003d82 <UART_SetConfig+0xee>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d00:	f7ff fb0c 	bl	800331c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003d04:	2800      	cmp	r0, #0
 8003d06:	d12d      	bne.n	8003d64 <UART_SetConfig+0xd0>
    switch (clocksource)
 8003d08:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 8003d0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003dfc <UART_SetConfig+0x168>)
 8003d0c:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 8003d12:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003d14:	bd70      	pop	{r4, r5, r6, pc}
 8003d16:	4a3a      	ldr	r2, [pc, #232]	@ (8003e00 <UART_SetConfig+0x16c>)
 8003d18:	5cd2      	ldrb	r2, [r2, r3]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d1a:	2380      	movs	r3, #128	@ 0x80
 8003d1c:	021b      	lsls	r3, r3, #8
 8003d1e:	4298      	cmp	r0, r3
 8003d20:	d02a      	beq.n	8003d78 <UART_SetConfig+0xe4>
    switch (clocksource)
 8003d22:	2a04      	cmp	r2, #4
 8003d24:	d020      	beq.n	8003d68 <UART_SetConfig+0xd4>
 8003d26:	d822      	bhi.n	8003d6e <UART_SetConfig+0xda>
 8003d28:	2a00      	cmp	r2, #0
 8003d2a:	d0e9      	beq.n	8003d00 <UART_SetConfig+0x6c>
 8003d2c:	2a02      	cmp	r2, #2
 8003d2e:	d1da      	bne.n	8003ce6 <UART_SetConfig+0x52>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003d30:	6809      	ldr	r1, [r1, #0]
 8003d32:	4834      	ldr	r0, [pc, #208]	@ (8003e04 <UART_SetConfig+0x170>)
 8003d34:	0609      	lsls	r1, r1, #24
 8003d36:	0f49      	lsrs	r1, r1, #29
 8003d38:	3101      	adds	r1, #1
 8003d3a:	f7fc f9e5 	bl	8000108 <__udivsi3>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d3e:	4b32      	ldr	r3, [pc, #200]	@ (8003e08 <UART_SetConfig+0x174>)
 8003d40:	006d      	lsls	r5, r5, #1
 8003d42:	5ae9      	ldrh	r1, [r5, r3]
 8003d44:	f7fc f9e0 	bl	8000108 <__udivsi3>
 8003d48:	6866      	ldr	r6, [r4, #4]
 8003d4a:	0873      	lsrs	r3, r6, #1
 8003d4c:	18c0      	adds	r0, r0, r3
 8003d4e:	0031      	movs	r1, r6
 8003d50:	f7fc f9da 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d54:	0002      	movs	r2, r0
 8003d56:	4b2d      	ldr	r3, [pc, #180]	@ (8003e0c <UART_SetConfig+0x178>)
 8003d58:	3a10      	subs	r2, #16
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d8c3      	bhi.n	8003ce6 <UART_SetConfig+0x52>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d5e:	6823      	ldr	r3, [r4, #0]
 8003d60:	60d8      	str	r0, [r3, #12]
 8003d62:	e7d1      	b.n	8003d08 <UART_SetConfig+0x74>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d64:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003d66:	e7ea      	b.n	8003d3e <UART_SetConfig+0xaa>
        pclk = HAL_RCC_GetSysClockFreq();
 8003d68:	f7ff f9ea 	bl	8003140 <HAL_RCC_GetSysClockFreq>
        break;
 8003d6c:	e7ca      	b.n	8003d04 <UART_SetConfig+0x70>
    switch (clocksource)
 8003d6e:	0018      	movs	r0, r3
 8003d70:	2a08      	cmp	r2, #8
 8003d72:	d0e4      	beq.n	8003d3e <UART_SetConfig+0xaa>
 8003d74:	2001      	movs	r0, #1
 8003d76:	e7c8      	b.n	8003d0a <UART_SetConfig+0x76>
    switch (clocksource)
 8003d78:	2a04      	cmp	r2, #4
 8003d7a:	d02f      	beq.n	8003ddc <UART_SetConfig+0x148>
 8003d7c:	d82a      	bhi.n	8003dd4 <UART_SetConfig+0x140>
 8003d7e:	2a00      	cmp	r2, #0
 8003d80:	d11d      	bne.n	8003dbe <UART_SetConfig+0x12a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d82:	f7ff facb 	bl	800331c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003d86:	2800      	cmp	r0, #0
 8003d88:	d0be      	beq.n	8003d08 <UART_SetConfig+0x74>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d8a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8003d8c:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <UART_SetConfig+0x174>)
 8003d8e:	006d      	lsls	r5, r5, #1
 8003d90:	5ae9      	ldrh	r1, [r5, r3]
 8003d92:	f7fc f9b9 	bl	8000108 <__udivsi3>
 8003d96:	6866      	ldr	r6, [r4, #4]
 8003d98:	0040      	lsls	r0, r0, #1
 8003d9a:	0873      	lsrs	r3, r6, #1
 8003d9c:	18c0      	adds	r0, r0, r3
 8003d9e:	0031      	movs	r1, r6
 8003da0:	f7fc f9b2 	bl	8000108 <__udivsi3>
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003da4:	0002      	movs	r2, r0
 8003da6:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <UART_SetConfig+0x178>)
 8003da8:	3a10      	subs	r2, #16
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d89b      	bhi.n	8003ce6 <UART_SetConfig+0x52>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003dae:	4b18      	ldr	r3, [pc, #96]	@ (8003e10 <UART_SetConfig+0x17c>)
        huart->Instance->BRR = brrtemp;
 8003db0:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003db2:	4003      	ands	r3, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003db4:	0700      	lsls	r0, r0, #28
 8003db6:	0f40      	lsrs	r0, r0, #29
        huart->Instance->BRR = brrtemp;
 8003db8:	4303      	orrs	r3, r0
 8003dba:	60d3      	str	r3, [r2, #12]
 8003dbc:	e7a4      	b.n	8003d08 <UART_SetConfig+0x74>
    switch (clocksource)
 8003dbe:	2a02      	cmp	r2, #2
 8003dc0:	d000      	beq.n	8003dc4 <UART_SetConfig+0x130>
 8003dc2:	e790      	b.n	8003ce6 <UART_SetConfig+0x52>
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8003dc4:	6809      	ldr	r1, [r1, #0]
 8003dc6:	480f      	ldr	r0, [pc, #60]	@ (8003e04 <UART_SetConfig+0x170>)
 8003dc8:	0609      	lsls	r1, r1, #24
 8003dca:	0f49      	lsrs	r1, r1, #29
 8003dcc:	3101      	adds	r1, #1
 8003dce:	f7fc f99b 	bl	8000108 <__udivsi3>
    if (pclk != 0U)
 8003dd2:	e7db      	b.n	8003d8c <UART_SetConfig+0xf8>
    switch (clocksource)
 8003dd4:	2a08      	cmp	r2, #8
 8003dd6:	d0d9      	beq.n	8003d8c <UART_SetConfig+0xf8>
    switch (clocksource)
 8003dd8:	2001      	movs	r0, #1
 8003dda:	e796      	b.n	8003d0a <UART_SetConfig+0x76>
        pclk = HAL_RCC_GetSysClockFreq();
 8003ddc:	f7ff f9b0 	bl	8003140 <HAL_RCC_GetSysClockFreq>
        break;
 8003de0:	e7d1      	b.n	8003d86 <UART_SetConfig+0xf2>
 8003de2:	46c0      	nop			@ (mov r8, r8)
 8003de4:	cfff69f3 	.word	0xcfff69f3
 8003de8:	ffffcfff 	.word	0xffffcfff
 8003dec:	11fff4ff 	.word	0x11fff4ff
 8003df0:	40013800 	.word	0x40013800
 8003df4:	40004400 	.word	0x40004400
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	00010001 	.word	0x00010001
 8003e00:	08004220 	.word	0x08004220
 8003e04:	02dc6c00 	.word	0x02dc6c00
 8003e08:	08004224 	.word	0x08004224
 8003e0c:	0000ffef 	.word	0x0000ffef
 8003e10:	0000fff0 	.word	0x0000fff0

08003e14 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e14:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
 8003e16:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e18:	071a      	lsls	r2, r3, #28
 8003e1a:	d506      	bpl.n	8003e2a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e1c:	6801      	ldr	r1, [r0, #0]
 8003e1e:	4c28      	ldr	r4, [pc, #160]	@ (8003ec0 <UART_AdvFeatureConfig+0xac>)
 8003e20:	684a      	ldr	r2, [r1, #4]
 8003e22:	4022      	ands	r2, r4
 8003e24:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8003e26:	4322      	orrs	r2, r4
 8003e28:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e2a:	07da      	lsls	r2, r3, #31
 8003e2c:	d506      	bpl.n	8003e3c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e2e:	6801      	ldr	r1, [r0, #0]
 8003e30:	4c24      	ldr	r4, [pc, #144]	@ (8003ec4 <UART_AdvFeatureConfig+0xb0>)
 8003e32:	684a      	ldr	r2, [r1, #4]
 8003e34:	4022      	ands	r2, r4
 8003e36:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8003e38:	4322      	orrs	r2, r4
 8003e3a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e3c:	079a      	lsls	r2, r3, #30
 8003e3e:	d506      	bpl.n	8003e4e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e40:	6801      	ldr	r1, [r0, #0]
 8003e42:	4c21      	ldr	r4, [pc, #132]	@ (8003ec8 <UART_AdvFeatureConfig+0xb4>)
 8003e44:	684a      	ldr	r2, [r1, #4]
 8003e46:	4022      	ands	r2, r4
 8003e48:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8003e4a:	4322      	orrs	r2, r4
 8003e4c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e4e:	075a      	lsls	r2, r3, #29
 8003e50:	d506      	bpl.n	8003e60 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e52:	6801      	ldr	r1, [r0, #0]
 8003e54:	4c1d      	ldr	r4, [pc, #116]	@ (8003ecc <UART_AdvFeatureConfig+0xb8>)
 8003e56:	684a      	ldr	r2, [r1, #4]
 8003e58:	4022      	ands	r2, r4
 8003e5a:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8003e5c:	4322      	orrs	r2, r4
 8003e5e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e60:	06da      	lsls	r2, r3, #27
 8003e62:	d506      	bpl.n	8003e72 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e64:	6801      	ldr	r1, [r0, #0]
 8003e66:	4c1a      	ldr	r4, [pc, #104]	@ (8003ed0 <UART_AdvFeatureConfig+0xbc>)
 8003e68:	688a      	ldr	r2, [r1, #8]
 8003e6a:	4022      	ands	r2, r4
 8003e6c:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8003e6e:	4322      	orrs	r2, r4
 8003e70:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e72:	069a      	lsls	r2, r3, #26
 8003e74:	d506      	bpl.n	8003e84 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e76:	6801      	ldr	r1, [r0, #0]
 8003e78:	4c16      	ldr	r4, [pc, #88]	@ (8003ed4 <UART_AdvFeatureConfig+0xc0>)
 8003e7a:	688a      	ldr	r2, [r1, #8]
 8003e7c:	4022      	ands	r2, r4
 8003e7e:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8003e80:	4322      	orrs	r2, r4
 8003e82:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e84:	065a      	lsls	r2, r3, #25
 8003e86:	d50a      	bpl.n	8003e9e <UART_AdvFeatureConfig+0x8a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e88:	6801      	ldr	r1, [r0, #0]
 8003e8a:	4d13      	ldr	r5, [pc, #76]	@ (8003ed8 <UART_AdvFeatureConfig+0xc4>)
 8003e8c:	684a      	ldr	r2, [r1, #4]
 8003e8e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8003e90:	402a      	ands	r2, r5
 8003e92:	4322      	orrs	r2, r4
 8003e94:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e96:	2280      	movs	r2, #128	@ 0x80
 8003e98:	0352      	lsls	r2, r2, #13
 8003e9a:	4294      	cmp	r4, r2
 8003e9c:	d009      	beq.n	8003eb2 <UART_AdvFeatureConfig+0x9e>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	d506      	bpl.n	8003eb0 <UART_AdvFeatureConfig+0x9c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ea2:	6802      	ldr	r2, [r0, #0]
 8003ea4:	490d      	ldr	r1, [pc, #52]	@ (8003edc <UART_AdvFeatureConfig+0xc8>)
 8003ea6:	6853      	ldr	r3, [r2, #4]
 8003ea8:	400b      	ands	r3, r1
 8003eaa:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8003eac:	430b      	orrs	r3, r1
 8003eae:	6053      	str	r3, [r2, #4]
}
 8003eb0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb2:	684a      	ldr	r2, [r1, #4]
 8003eb4:	4c0a      	ldr	r4, [pc, #40]	@ (8003ee0 <UART_AdvFeatureConfig+0xcc>)
 8003eb6:	4022      	ands	r2, r4
 8003eb8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8003eba:	4322      	orrs	r2, r4
 8003ebc:	604a      	str	r2, [r1, #4]
 8003ebe:	e7ee      	b.n	8003e9e <UART_AdvFeatureConfig+0x8a>
 8003ec0:	ffff7fff 	.word	0xffff7fff
 8003ec4:	fffdffff 	.word	0xfffdffff
 8003ec8:	fffeffff 	.word	0xfffeffff
 8003ecc:	fffbffff 	.word	0xfffbffff
 8003ed0:	ffffefff 	.word	0xffffefff
 8003ed4:	ffffdfff 	.word	0xffffdfff
 8003ed8:	ffefffff 	.word	0xffefffff
 8003edc:	fff7ffff 	.word	0xfff7ffff
 8003ee0:	ff9fffff 	.word	0xff9fffff

08003ee4 <UART_WaitOnFlagUntilTimeout>:
{
 8003ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee6:	464f      	mov	r7, r9
 8003ee8:	4646      	mov	r6, r8
 8003eea:	46d6      	mov	lr, sl
 8003eec:	b5c0      	push	{r6, r7, lr}
 8003eee:	4699      	mov	r9, r3
 8003ef0:	4680      	mov	r8, r0
 8003ef2:	000d      	movs	r5, r1
 8003ef4:	0016      	movs	r6, r2
 8003ef6:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef8:	6803      	ldr	r3, [r0, #0]
 8003efa:	e001      	b.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x1c>
    if (Timeout != HAL_MAX_DELAY)
 8003efc:	1c7a      	adds	r2, r7, #1
 8003efe:	d10c      	bne.n	8003f1a <UART_WaitOnFlagUntilTimeout+0x36>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f00:	69dc      	ldr	r4, [r3, #28]
 8003f02:	402c      	ands	r4, r5
 8003f04:	1b64      	subs	r4, r4, r5
 8003f06:	4262      	negs	r2, r4
 8003f08:	4154      	adcs	r4, r2
 8003f0a:	42b4      	cmp	r4, r6
 8003f0c:	d0f6      	beq.n	8003efc <UART_WaitOnFlagUntilTimeout+0x18>
  return HAL_OK;
 8003f0e:	2000      	movs	r0, #0
}
 8003f10:	bce0      	pop	{r5, r6, r7}
 8003f12:	46ba      	mov	sl, r7
 8003f14:	46b1      	mov	r9, r6
 8003f16:	46a8      	mov	r8, r5
 8003f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f1a:	f7fe fb63 	bl	80025e4 <HAL_GetTick>
 8003f1e:	464b      	mov	r3, r9
 8003f20:	1ac0      	subs	r0, r0, r3
 8003f22:	42b8      	cmp	r0, r7
 8003f24:	d823      	bhi.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	d021      	beq.n	8003f6e <UART_WaitOnFlagUntilTimeout+0x8a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003f2a:	4643      	mov	r3, r8
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	0752      	lsls	r2, r2, #29
 8003f32:	d5e5      	bpl.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x1c>
 8003f34:	002a      	movs	r2, r5
 8003f36:	2140      	movs	r1, #64	@ 0x40
 8003f38:	3a40      	subs	r2, #64	@ 0x40
 8003f3a:	438a      	bics	r2, r1
 8003f3c:	d0e0      	beq.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x1c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003f3e:	2408      	movs	r4, #8
 8003f40:	0021      	movs	r1, r4
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	4011      	ands	r1, r2
 8003f46:	468a      	mov	sl, r1
 8003f48:	4214      	tst	r4, r2
 8003f4a:	d112      	bne.n	8003f72 <UART_WaitOnFlagUntilTimeout+0x8e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f4c:	2280      	movs	r2, #128	@ 0x80
 8003f4e:	69d9      	ldr	r1, [r3, #28]
 8003f50:	0112      	lsls	r2, r2, #4
 8003f52:	4211      	tst	r1, r2
 8003f54:	d0d4      	beq.n	8003f00 <UART_WaitOnFlagUntilTimeout+0x1c>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f56:	621a      	str	r2, [r3, #32]
          UART_EndRxTransfer(huart);
 8003f58:	4640      	mov	r0, r8
 8003f5a:	f7ff fbb7 	bl	80036cc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003f5e:	2390      	movs	r3, #144	@ 0x90
 8003f60:	2220      	movs	r2, #32
 8003f62:	4641      	mov	r1, r8
 8003f64:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 8003f66:	4642      	mov	r2, r8
 8003f68:	4651      	mov	r1, sl
 8003f6a:	3b0c      	subs	r3, #12
 8003f6c:	54d1      	strb	r1, [r2, r3]
        return HAL_TIMEOUT;
 8003f6e:	2003      	movs	r0, #3
 8003f70:	e7ce      	b.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x2c>
          UART_EndRxTransfer(huart);
 8003f72:	4640      	mov	r0, r8
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003f74:	621c      	str	r4, [r3, #32]
          UART_EndRxTransfer(huart);
 8003f76:	f7ff fba9 	bl	80036cc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f7a:	2390      	movs	r3, #144	@ 0x90
 8003f7c:	4642      	mov	r2, r8
          __HAL_UNLOCK(huart);
 8003f7e:	4641      	mov	r1, r8
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003f80:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 8003f82:	2200      	movs	r2, #0
 8003f84:	3b0c      	subs	r3, #12
          return HAL_ERROR;
 8003f86:	2001      	movs	r0, #1
          __HAL_UNLOCK(huart);
 8003f88:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 8003f8a:	e7c1      	b.n	8003f10 <UART_WaitOnFlagUntilTimeout+0x2c>

08003f8c <UART_CheckIdleState>:
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	2390      	movs	r3, #144	@ 0x90
{
 8003f90:	b530      	push	{r4, r5, lr}
 8003f92:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f94:	50c2      	str	r2, [r0, r3]
{
 8003f96:	b083      	sub	sp, #12
  tickstart = HAL_GetTick();
 8003f98:	f7fe fb24 	bl	80025e4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f9c:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8003f9e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa0:	6811      	ldr	r1, [r2, #0]
 8003fa2:	0709      	lsls	r1, r1, #28
 8003fa4:	d410      	bmi.n	8003fc8 <UART_CheckIdleState+0x3c>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	0752      	lsls	r2, r2, #29
 8003faa:	d41c      	bmi.n	8003fe6 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8003fac:	2320      	movs	r3, #32
 8003fae:	2288      	movs	r2, #136	@ 0x88
 8003fb0:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	3204      	adds	r2, #4
 8003fb4:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb6:	2300      	movs	r3, #0
  return HAL_OK;
 8003fb8:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fbc:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8003fbe:	2384      	movs	r3, #132	@ 0x84
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	54e2      	strb	r2, [r4, r3]
}
 8003fc4:	b003      	add	sp, #12
 8003fc6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fc8:	2180      	movs	r1, #128	@ 0x80
 8003fca:	4b22      	ldr	r3, [pc, #136]	@ (8004054 <UART_CheckIdleState+0xc8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	0389      	lsls	r1, r1, #14
 8003fd2:	0003      	movs	r3, r0
 8003fd4:	0020      	movs	r0, r4
 8003fd6:	f7ff ff85 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003fda:	2800      	cmp	r0, #0
 8003fdc:	d129      	bne.n	8004032 <UART_CheckIdleState+0xa6>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	0752      	lsls	r2, r2, #29
 8003fe4:	d5e2      	bpl.n	8003fac <UART_CheckIdleState+0x20>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe6:	2180      	movs	r1, #128	@ 0x80
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	@ (8004054 <UART_CheckIdleState+0xc8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	0020      	movs	r0, r4
 8003ff0:	002b      	movs	r3, r5
 8003ff2:	03c9      	lsls	r1, r1, #15
 8003ff4:	f7ff ff76 	bl	8003ee4 <UART_WaitOnFlagUntilTimeout>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	d0d7      	beq.n	8003fac <UART_CheckIdleState+0x20>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ffc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004000:	2201      	movs	r2, #1
 8004002:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004006:	6821      	ldr	r1, [r4, #0]
 8004008:	4d13      	ldr	r5, [pc, #76]	@ (8004058 <UART_CheckIdleState+0xcc>)
 800400a:	680b      	ldr	r3, [r1, #0]
 800400c:	402b      	ands	r3, r5
 800400e:	600b      	str	r3, [r1, #0]
 8004010:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004014:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800401c:	6821      	ldr	r1, [r4, #0]
 800401e:	688b      	ldr	r3, [r1, #8]
 8004020:	4393      	bics	r3, r2
 8004022:	608b      	str	r3, [r1, #8]
 8004024:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8004028:	238c      	movs	r3, #140	@ 0x8c
 800402a:	321f      	adds	r2, #31
      return HAL_TIMEOUT;
 800402c:	2003      	movs	r0, #3
      huart->RxState = HAL_UART_STATE_READY;
 800402e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004030:	e7c5      	b.n	8003fbe <UART_CheckIdleState+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004032:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	2301      	movs	r3, #1
 8004038:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800403c:	2080      	movs	r0, #128	@ 0x80
 800403e:	6822      	ldr	r2, [r4, #0]
 8004040:	6813      	ldr	r3, [r2, #0]
 8004042:	4383      	bics	r3, r0
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 800404a:	2388      	movs	r3, #136	@ 0x88
 800404c:	2220      	movs	r2, #32
      return HAL_TIMEOUT;
 800404e:	2003      	movs	r0, #3
      huart->gState = HAL_UART_STATE_READY;
 8004050:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8004052:	e7b4      	b.n	8003fbe <UART_CheckIdleState+0x32>
 8004054:	01ffffff 	.word	0x01ffffff
 8004058:	fffffedf 	.word	0xfffffedf

0800405c <HAL_UART_Init>:
{
 800405c:	b510      	push	{r4, lr}
 800405e:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8004060:	d024      	beq.n	80040ac <HAL_UART_Init+0x50>
  if (huart->gState == HAL_UART_STATE_RESET)
 8004062:	2388      	movs	r3, #136	@ 0x88
 8004064:	58c3      	ldr	r3, [r0, r3]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d026      	beq.n	80040b8 <HAL_UART_Init+0x5c>
  huart->gState = HAL_UART_STATE_BUSY;
 800406a:	2388      	movs	r3, #136	@ 0x88
 800406c:	2224      	movs	r2, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800406e:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8004070:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8004072:	6822      	ldr	r2, [r4, #0]
 8004074:	6813      	ldr	r3, [r2, #0]
 8004076:	438b      	bics	r3, r1
 8004078:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800407a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800407c:	2b00      	cmp	r3, #0
 800407e:	d117      	bne.n	80040b0 <HAL_UART_Init+0x54>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004080:	0020      	movs	r0, r4
 8004082:	f7ff fe07 	bl	8003c94 <UART_SetConfig>
 8004086:	2801      	cmp	r0, #1
 8004088:	d010      	beq.n	80040ac <HAL_UART_Init+0x50>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	490d      	ldr	r1, [pc, #52]	@ (80040c4 <HAL_UART_Init+0x68>)
 800408e:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8004090:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004092:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004094:	212a      	movs	r1, #42	@ 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004096:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004098:	689a      	ldr	r2, [r3, #8]
 800409a:	438a      	bics	r2, r1
 800409c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	3929      	subs	r1, #41	@ 0x29
 80040a2:	430a      	orrs	r2, r1
 80040a4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80040a6:	f7ff ff71 	bl	8003f8c <UART_CheckIdleState>
}
 80040aa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80040ac:	2001      	movs	r0, #1
 80040ae:	e7fc      	b.n	80040aa <HAL_UART_Init+0x4e>
    UART_AdvFeatureConfig(huart);
 80040b0:	0020      	movs	r0, r4
 80040b2:	f7ff feaf 	bl	8003e14 <UART_AdvFeatureConfig>
 80040b6:	e7e3      	b.n	8004080 <HAL_UART_Init+0x24>
    huart->Lock = HAL_UNLOCKED;
 80040b8:	2284      	movs	r2, #132	@ 0x84
 80040ba:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 80040bc:	f7fe f980 	bl	80023c0 <HAL_UART_MspInit>
 80040c0:	e7d3      	b.n	800406a <HAL_UART_Init+0xe>
 80040c2:	46c0      	nop			@ (mov r8, r8)
 80040c4:	ffffb7ff 	.word	0xffffb7ff

080040c8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80040c8:	4770      	bx	lr
 80040ca:	46c0      	nop			@ (mov r8, r8)

080040cc <HAL_UARTEx_RxFifoFullCallback>:
/**
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 80040cc:	4770      	bx	lr
 80040ce:	46c0      	nop			@ (mov r8, r8)

080040d0 <HAL_UARTEx_TxFifoEmptyCallback>:
/**
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 80040d0:	4770      	bx	lr
 80040d2:	46c0      	nop			@ (mov r8, r8)

080040d4 <memset>:
 80040d4:	0003      	movs	r3, r0
 80040d6:	1882      	adds	r2, r0, r2
 80040d8:	4293      	cmp	r3, r2
 80040da:	d100      	bne.n	80040de <memset+0xa>
 80040dc:	4770      	bx	lr
 80040de:	7019      	strb	r1, [r3, #0]
 80040e0:	3301      	adds	r3, #1
 80040e2:	e7f9      	b.n	80040d8 <memset+0x4>

080040e4 <__libc_init_array>:
 80040e4:	b570      	push	{r4, r5, r6, lr}
 80040e6:	2600      	movs	r6, #0
 80040e8:	4c0c      	ldr	r4, [pc, #48]	@ (800411c <__libc_init_array+0x38>)
 80040ea:	4d0d      	ldr	r5, [pc, #52]	@ (8004120 <__libc_init_array+0x3c>)
 80040ec:	1b64      	subs	r4, r4, r5
 80040ee:	10a4      	asrs	r4, r4, #2
 80040f0:	42a6      	cmp	r6, r4
 80040f2:	d109      	bne.n	8004108 <__libc_init_array+0x24>
 80040f4:	2600      	movs	r6, #0
 80040f6:	f000 f819 	bl	800412c <_init>
 80040fa:	4c0a      	ldr	r4, [pc, #40]	@ (8004124 <__libc_init_array+0x40>)
 80040fc:	4d0a      	ldr	r5, [pc, #40]	@ (8004128 <__libc_init_array+0x44>)
 80040fe:	1b64      	subs	r4, r4, r5
 8004100:	10a4      	asrs	r4, r4, #2
 8004102:	42a6      	cmp	r6, r4
 8004104:	d105      	bne.n	8004112 <__libc_init_array+0x2e>
 8004106:	bd70      	pop	{r4, r5, r6, pc}
 8004108:	00b3      	lsls	r3, r6, #2
 800410a:	58eb      	ldr	r3, [r5, r3]
 800410c:	4798      	blx	r3
 800410e:	3601      	adds	r6, #1
 8004110:	e7ee      	b.n	80040f0 <__libc_init_array+0xc>
 8004112:	00b3      	lsls	r3, r6, #2
 8004114:	58eb      	ldr	r3, [r5, r3]
 8004116:	4798      	blx	r3
 8004118:	3601      	adds	r6, #1
 800411a:	e7f2      	b.n	8004102 <__libc_init_array+0x1e>
 800411c:	0800423c 	.word	0x0800423c
 8004120:	0800423c 	.word	0x0800423c
 8004124:	08004240 	.word	0x08004240
 8004128:	0800423c 	.word	0x0800423c

0800412c <_init>:
 800412c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004132:	bc08      	pop	{r3}
 8004134:	469e      	mov	lr, r3
 8004136:	4770      	bx	lr

08004138 <_fini>:
 8004138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800413a:	46c0      	nop			@ (mov r8, r8)
 800413c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800413e:	bc08      	pop	{r3}
 8004140:	469e      	mov	lr, r3
 8004142:	4770      	bx	lr
