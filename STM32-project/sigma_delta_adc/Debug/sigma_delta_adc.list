
sigma_delta_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000367c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  0800373c  0800373c  0000473c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080037c4  080037c4  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  080037c4  080037c4  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080037c4  080037c4  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080037c4  080037c4  000047c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080037c8  080037c8  000047c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080037cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000010  080037dc  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080037dc  0000511c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010125  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002256  00000000  00000000  0001515d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000df8  00000000  00000000  000173b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aff  00000000  00000000  000181b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013230  00000000  00000000  00018caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010df6  00000000  00000000  0002bedf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a923  00000000  00000000  0003ccd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b75f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003278  00000000  00000000  000b763c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000ba8b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003724 	.word	0x08003724

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003724 	.word	0x08003724

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fb5c 	bl	8000ab6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f81f 	bl	8000440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f8e1 	bl	80005c8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f891 	bl	800052c <MX_USART1_UART_Init>
  MX_TIM17_Init();
 800040a:	f000 f867 	bl	80004dc <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);
 800040e:	4b0a      	ldr	r3, [pc, #40]	@ (8000438 <main+0x44>)
 8000410:	0018      	movs	r0, r3
 8000412:	f001 fc1f 	bl	8001c54 <HAL_TIM_Base_Start_IT>
  __HAL_RCC_PWR_CLK_ENABLE(); //TODO TO CHECK IF WORKS STOP MODE // https://www.youtube.com/watch?v=td_CbkFBCfE
 8000416:	4b09      	ldr	r3, [pc, #36]	@ (800043c <main+0x48>)
 8000418:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <main+0x48>)
 800041c:	2180      	movs	r1, #128	@ 0x80
 800041e:	0549      	lsls	r1, r1, #21
 8000420:	430a      	orrs	r2, r1
 8000422:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000424:	4b05      	ldr	r3, [pc, #20]	@ (800043c <main+0x48>)
 8000426:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000428:	2380      	movs	r3, #128	@ 0x80
 800042a:	055b      	lsls	r3, r3, #21
 800042c:	4013      	ands	r3, r2
 800042e:	607b      	str	r3, [r7, #4]
 8000430:	687b      	ldr	r3, [r7, #4]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	e7fd      	b.n	8000432 <main+0x3e>
 8000436:	46c0      	nop			@ (mov r8, r8)
 8000438:	2000002c 	.word	0x2000002c
 800043c:	40021000 	.word	0x40021000

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b08d      	sub	sp, #52	@ 0x34
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	2414      	movs	r4, #20
 8000448:	193b      	adds	r3, r7, r4
 800044a:	0018      	movs	r0, r3
 800044c:	231c      	movs	r3, #28
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f003 f93b 	bl	80036cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	003b      	movs	r3, r7
 8000458:	0018      	movs	r0, r3
 800045a:	2314      	movs	r3, #20
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f003 f934 	bl	80036cc <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000464:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <SystemClock_Config+0x98>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2207      	movs	r2, #7
 800046a:	4393      	bics	r3, r2
 800046c:	001a      	movs	r2, r3
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <SystemClock_Config+0x98>)
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2240      	movs	r2, #64	@ 0x40
 800048e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	f000 ff3e 	bl	8001314 <HAL_RCC_OscConfig>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800049c:	f000 f9ca 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	003b      	movs	r3, r7
 80004a2:	2207      	movs	r2, #7
 80004a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b2:	003b      	movs	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004be:	003b      	movs	r3, r7
 80004c0:	2101      	movs	r1, #1
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 f90a 	bl	80016dc <HAL_RCC_ClockConfig>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004cc:	f000 f9b2 	bl	8000834 <Error_Handler>
  }
}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b00d      	add	sp, #52	@ 0x34
 80004d6:	bd90      	pop	{r4, r7, pc}
 80004d8:	40022000 	.word	0x40022000

080004dc <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <MX_TIM17_Init+0x44>)
 80004e2:	4a10      	ldr	r2, [pc, #64]	@ (8000524 <MX_TIM17_Init+0x48>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 46875-1;
 80004e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000520 <MX_TIM17_Init+0x44>)
 80004e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000528 <MX_TIM17_Init+0x4c>)
 80004ea:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000520 <MX_TIM17_Init+0x44>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2-1;
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <MX_TIM17_Init+0x44>)
 80004f4:	2201      	movs	r2, #1
 80004f6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004f8:	4b09      	ldr	r3, [pc, #36]	@ (8000520 <MX_TIM17_Init+0x44>)
 80004fa:	2200      	movs	r2, #0
 80004fc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80004fe:	4b08      	ldr	r3, [pc, #32]	@ (8000520 <MX_TIM17_Init+0x44>)
 8000500:	2200      	movs	r2, #0
 8000502:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000504:	4b06      	ldr	r3, [pc, #24]	@ (8000520 <MX_TIM17_Init+0x44>)
 8000506:	2200      	movs	r2, #0
 8000508:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800050a:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <MX_TIM17_Init+0x44>)
 800050c:	0018      	movs	r0, r3
 800050e:	f001 fb49 	bl	8001ba4 <HAL_TIM_Base_Init>
 8000512:	1e03      	subs	r3, r0, #0
 8000514:	d001      	beq.n	800051a <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 8000516:	f000 f98d 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	2000002c 	.word	0x2000002c
 8000524:	40014800 	.word	0x40014800
 8000528:	0000b71a 	.word	0x0000b71a

0800052c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000530:	4b23      	ldr	r3, [pc, #140]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000532:	4a24      	ldr	r2, [pc, #144]	@ (80005c4 <MX_USART1_UART_Init+0x98>)
 8000534:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000536:	4b22      	ldr	r3, [pc, #136]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000538:	22e1      	movs	r2, #225	@ 0xe1
 800053a:	0252      	lsls	r2, r2, #9
 800053c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800053e:	4b20      	ldr	r3, [pc, #128]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000544:	4b1e      	ldr	r3, [pc, #120]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000546:	2200      	movs	r2, #0
 8000548:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800054a:	4b1d      	ldr	r3, [pc, #116]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000550:	4b1b      	ldr	r3, [pc, #108]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000552:	2208      	movs	r2, #8
 8000554:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000556:	4b1a      	ldr	r3, [pc, #104]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000558:	2200      	movs	r2, #0
 800055a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800055c:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 800055e:	2200      	movs	r2, #0
 8000560:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000562:	4b17      	ldr	r3, [pc, #92]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000564:	2200      	movs	r2, #0
 8000566:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000568:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 800056a:	2200      	movs	r2, #0
 800056c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800056e:	4b14      	ldr	r3, [pc, #80]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000570:	2200      	movs	r2, #0
 8000572:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000574:	4b12      	ldr	r3, [pc, #72]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000576:	0018      	movs	r0, r3
 8000578:	f001 fd74 	bl	8002064 <HAL_HalfDuplex_Init>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000580:	f000 f958 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000584:	4b0e      	ldr	r3, [pc, #56]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000586:	2100      	movs	r1, #0
 8000588:	0018      	movs	r0, r3
 800058a:	f002 ffbf 	bl	800350c <HAL_UARTEx_SetTxFifoThreshold>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000592:	f000 f94f 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000596:	4b0a      	ldr	r3, [pc, #40]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 8000598:	2100      	movs	r1, #0
 800059a:	0018      	movs	r0, r3
 800059c:	f002 fff6 	bl	800358c <HAL_UARTEx_SetRxFifoThreshold>
 80005a0:	1e03      	subs	r3, r0, #0
 80005a2:	d001      	beq.n	80005a8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80005a4:	f000 f946 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80005a8:	4b05      	ldr	r3, [pc, #20]	@ (80005c0 <MX_USART1_UART_Init+0x94>)
 80005aa:	0018      	movs	r0, r3
 80005ac:	f002 ff74 	bl	8003498 <HAL_UARTEx_DisableFifoMode>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80005b4:	f000 f93e 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005b8:	46c0      	nop			@ (mov r8, r8)
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			@ (mov r8, r8)
 80005c0:	20000078 	.word	0x20000078
 80005c4:	40013800 	.word	0x40013800

080005c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b089      	sub	sp, #36	@ 0x24
 80005cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	240c      	movs	r4, #12
 80005d0:	193b      	adds	r3, r7, r4
 80005d2:	0018      	movs	r0, r3
 80005d4:	2314      	movs	r3, #20
 80005d6:	001a      	movs	r2, r3
 80005d8:	2100      	movs	r1, #0
 80005da:	f003 f877 	bl	80036cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b22      	ldr	r3, [pc, #136]	@ (8000668 <MX_GPIO_Init+0xa0>)
 80005e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005e2:	4b21      	ldr	r3, [pc, #132]	@ (8000668 <MX_GPIO_Init+0xa0>)
 80005e4:	2101      	movs	r1, #1
 80005e6:	430a      	orrs	r2, r1
 80005e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80005ea:	4b1f      	ldr	r3, [pc, #124]	@ (8000668 <MX_GPIO_Init+0xa0>)
 80005ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80005ee:	2201      	movs	r2, #1
 80005f0:	4013      	ands	r3, r2
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000668 <MX_GPIO_Init+0xa0>)
 80005f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80005fa:	4b1b      	ldr	r3, [pc, #108]	@ (8000668 <MX_GPIO_Init+0xa0>)
 80005fc:	2102      	movs	r1, #2
 80005fe:	430a      	orrs	r2, r1
 8000600:	635a      	str	r2, [r3, #52]	@ 0x34
 8000602:	4b19      	ldr	r3, [pc, #100]	@ (8000668 <MX_GPIO_Init+0xa0>)
 8000604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000606:	2202      	movs	r2, #2
 8000608:	4013      	ands	r3, r2
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : DIGITAL_INPUT_Pin */
  GPIO_InitStruct.Pin = DIGITAL_INPUT_Pin;
 800060e:	193b      	adds	r3, r7, r4
 8000610:	2202      	movs	r2, #2
 8000612:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000614:	193b      	adds	r3, r7, r4
 8000616:	2200      	movs	r2, #0
 8000618:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061a:	193b      	adds	r3, r7, r4
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL_INPUT_GPIO_Port, &GPIO_InitStruct);
 8000620:	193a      	adds	r2, r7, r4
 8000622:	23a0      	movs	r3, #160	@ 0xa0
 8000624:	05db      	lsls	r3, r3, #23
 8000626:	0011      	movs	r1, r2
 8000628:	0018      	movs	r0, r3
 800062a:	f000 fc97 	bl	8000f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_SELECT_Pin;
 800062e:	193b      	adds	r3, r7, r4
 8000630:	2204      	movs	r2, #4
 8000632:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000634:	193b      	adds	r3, r7, r4
 8000636:	4a0d      	ldr	r2, [pc, #52]	@ (800066c <MX_GPIO_Init+0xa4>)
 8000638:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	193b      	adds	r3, r7, r4
 800063c:	2200      	movs	r2, #0
 800063e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SELECT_GPIO_Port, &GPIO_InitStruct);
 8000640:	193a      	adds	r2, r7, r4
 8000642:	23a0      	movs	r3, #160	@ 0xa0
 8000644:	05db      	lsls	r3, r3, #23
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f000 fc87 	bl	8000f5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 800064e:	2200      	movs	r2, #0
 8000650:	2100      	movs	r1, #0
 8000652:	2006      	movs	r0, #6
 8000654:	f000 fb74 	bl	8000d40 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000658:	2006      	movs	r0, #6
 800065a:	f000 fb86 	bl	8000d6a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800065e:	46c0      	nop			@ (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b009      	add	sp, #36	@ 0x24
 8000664:	bd90      	pop	{r4, r7, pc}
 8000666:	46c0      	nop			@ (mov r8, r8)
 8000668:	40021000 	.word	0x40021000
 800066c:	10310000 	.word	0x10310000

08000670 <ANALOG_TO_DIGITAL>:
err show in console via uart?


*/
uint8_t ANALOG_TO_DIGITAL() //conversion from sigma delta hardware output to digital data
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	static uint8_t data = 0; //current state of function
	static uint16_t ticks_high=0; //how many tick was i on high state
	static uint16_t ticks_low=0; //how many tick was i on low state
	static uint16_t ticks=0;

	data = HAL_GPIO_ReadPin(DIGITAL_INPUT_GPIO_Port, DIGITAL_INPUT_Pin);
 8000674:	23a0      	movs	r3, #160	@ 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	2102      	movs	r1, #2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fdd8 	bl	8001230 <HAL_GPIO_ReadPin>
 8000680:	0003      	movs	r3, r0
 8000682:	001a      	movs	r2, r3
 8000684:	4b31      	ldr	r3, [pc, #196]	@ (800074c <ANALOG_TO_DIGITAL+0xdc>)
 8000686:	701a      	strb	r2, [r3, #0]

	ticks = ticks + 1;
 8000688:	4b31      	ldr	r3, [pc, #196]	@ (8000750 <ANALOG_TO_DIGITAL+0xe0>)
 800068a:	881b      	ldrh	r3, [r3, #0]
 800068c:	3301      	adds	r3, #1
 800068e:	b29a      	uxth	r2, r3
 8000690:	4b2f      	ldr	r3, [pc, #188]	@ (8000750 <ANALOG_TO_DIGITAL+0xe0>)
 8000692:	801a      	strh	r2, [r3, #0]

	if((was_high == true && data == HIGH) || ticks >= MAX_TICKS) //back on high
 8000694:	4b2f      	ldr	r3, [pc, #188]	@ (8000754 <ANALOG_TO_DIGITAL+0xe4>)
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d103      	bne.n	80006a4 <ANALOG_TO_DIGITAL+0x34>
 800069c:	4b2b      	ldr	r3, [pc, #172]	@ (800074c <ANALOG_TO_DIGITAL+0xdc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b01      	cmp	r3, #1
 80006a2:	d003      	beq.n	80006ac <ANALOG_TO_DIGITAL+0x3c>
 80006a4:	4b2a      	ldr	r3, [pc, #168]	@ (8000750 <ANALOG_TO_DIGITAL+0xe0>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	2bfe      	cmp	r3, #254	@ 0xfe
 80006aa:	d936      	bls.n	800071a <ANALOG_TO_DIGITAL+0xaa>
	{
		if(ticks_high >= MAX_TICKS) VOLTAGE = 255;
 80006ac:	4b2a      	ldr	r3, [pc, #168]	@ (8000758 <ANALOG_TO_DIGITAL+0xe8>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	2bfe      	cmp	r3, #254	@ 0xfe
 80006b2:	d903      	bls.n	80006bc <ANALOG_TO_DIGITAL+0x4c>
 80006b4:	4b29      	ldr	r3, [pc, #164]	@ (800075c <ANALOG_TO_DIGITAL+0xec>)
 80006b6:	22ff      	movs	r2, #255	@ 0xff
 80006b8:	701a      	strb	r2, [r3, #0]
 80006ba:	e016      	b.n	80006ea <ANALOG_TO_DIGITAL+0x7a>
		else if(ticks_low >= MAX_TICKS) VOLTAGE = 0;
 80006bc:	4b28      	ldr	r3, [pc, #160]	@ (8000760 <ANALOG_TO_DIGITAL+0xf0>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	2bfe      	cmp	r3, #254	@ 0xfe
 80006c2:	d903      	bls.n	80006cc <ANALOG_TO_DIGITAL+0x5c>
 80006c4:	4b25      	ldr	r3, [pc, #148]	@ (800075c <ANALOG_TO_DIGITAL+0xec>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	701a      	strb	r2, [r3, #0]
 80006ca:	e00e      	b.n	80006ea <ANALOG_TO_DIGITAL+0x7a>
		else VOLTAGE = ticks_high / ticks_low * MAGIC_VOLTAGE_MULTIPLIER;
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <ANALOG_TO_DIGITAL+0xe8>)
 80006ce:	881a      	ldrh	r2, [r3, #0]
 80006d0:	4b23      	ldr	r3, [pc, #140]	@ (8000760 <ANALOG_TO_DIGITAL+0xf0>)
 80006d2:	881b      	ldrh	r3, [r3, #0]
 80006d4:	0019      	movs	r1, r3
 80006d6:	0010      	movs	r0, r2
 80006d8:	f7ff fd16 	bl	8000108 <__udivsi3>
 80006dc:	0003      	movs	r3, r0
 80006de:	b29b      	uxth	r3, r3
 80006e0:	b2db      	uxtb	r3, r3
 80006e2:	425b      	negs	r3, r3
 80006e4:	b2da      	uxtb	r2, r3
 80006e6:	4b1d      	ldr	r3, [pc, #116]	@ (800075c <ANALOG_TO_DIGITAL+0xec>)
 80006e8:	701a      	strb	r2, [r3, #0]
		SEND_VIA_UART(VOLTAGE * STATIC_VOLTAGE_MULTIPLIER + VOLTAGE_OFFSET);
 80006ea:	4b1c      	ldr	r3, [pc, #112]	@ (800075c <ANALOG_TO_DIGITAL+0xec>)
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	0018      	movs	r0, r3
 80006f4:	f000 f850 	bl	8000798 <SEND_VIA_UART>
		//for new run
		ticks = 1;
 80006f8:	4b15      	ldr	r3, [pc, #84]	@ (8000750 <ANALOG_TO_DIGITAL+0xe0>)
 80006fa:	2201      	movs	r2, #1
 80006fc:	801a      	strh	r2, [r3, #0]
		ticks_high = 1;
 80006fe:	4b16      	ldr	r3, [pc, #88]	@ (8000758 <ANALOG_TO_DIGITAL+0xe8>)
 8000700:	2201      	movs	r2, #1
 8000702:	801a      	strh	r2, [r3, #0]
		ticks_low = 0;
 8000704:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <ANALOG_TO_DIGITAL+0xf0>)
 8000706:	2200      	movs	r2, #0
 8000708:	801a      	strh	r2, [r3, #0]
		ticks = 1;
 800070a:	4b11      	ldr	r3, [pc, #68]	@ (8000750 <ANALOG_TO_DIGITAL+0xe0>)
 800070c:	2201      	movs	r2, #1
 800070e:	801a      	strh	r2, [r3, #0]
		was_high=false;
 8000710:	4b10      	ldr	r3, [pc, #64]	@ (8000754 <ANALOG_TO_DIGITAL+0xe4>)
 8000712:	2200      	movs	r2, #0
 8000714:	701a      	strb	r2, [r3, #0]
		return 1; //voltage analysis done
 8000716:	2301      	movs	r3, #1
 8000718:	e014      	b.n	8000744 <ANALOG_TO_DIGITAL+0xd4>
	}
	else if(data == HIGH) //first high
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <ANALOG_TO_DIGITAL+0xdc>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b01      	cmp	r3, #1
 8000720:	d106      	bne.n	8000730 <ANALOG_TO_DIGITAL+0xc0>
	{
		ticks_high = ticks_high + 1;
 8000722:	4b0d      	ldr	r3, [pc, #52]	@ (8000758 <ANALOG_TO_DIGITAL+0xe8>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	3301      	adds	r3, #1
 8000728:	b29a      	uxth	r2, r3
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <ANALOG_TO_DIGITAL+0xe8>)
 800072c:	801a      	strh	r2, [r3, #0]
 800072e:	e008      	b.n	8000742 <ANALOG_TO_DIGITAL+0xd2>
	}
	else //func went down
	{
		ticks_low = ticks_low + 1;
 8000730:	4b0b      	ldr	r3, [pc, #44]	@ (8000760 <ANALOG_TO_DIGITAL+0xf0>)
 8000732:	881b      	ldrh	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	b29a      	uxth	r2, r3
 8000738:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <ANALOG_TO_DIGITAL+0xf0>)
 800073a:	801a      	strh	r2, [r3, #0]
		was_high = true;
 800073c:	4b05      	ldr	r3, [pc, #20]	@ (8000754 <ANALOG_TO_DIGITAL+0xe4>)
 800073e:	2201      	movs	r2, #1
 8000740:	701a      	strb	r2, [r3, #0]
	}

	return 0; //nothing
 8000742:	2300      	movs	r3, #0
}
 8000744:	0018      	movs	r0, r3
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	46c0      	nop			@ (mov r8, r8)
 800074c:	2000010c 	.word	0x2000010c
 8000750:	2000010e 	.word	0x2000010e
 8000754:	20000110 	.word	0x20000110
 8000758:	20000112 	.word	0x20000112
 800075c:	20000000 	.word	0x20000000
 8000760:	20000114 	.word	0x20000114

08000764 <MANUAL_MODE>:

void MANUAL_MODE()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
	while(ANALOG_TO_DIGITAL() == 0); //do until done, one full check
 8000768:	46c0      	nop			@ (mov r8, r8)
 800076a:	f7ff ff81 	bl	8000670 <ANALOG_TO_DIGITAL>
 800076e:	1e03      	subs	r3, r0, #0
 8000770:	d0fb      	beq.n	800076a <MANUAL_MODE+0x6>

	//STOP MODE of mcu
	HAL_SuspendTick();
 8000772:	f000 fa1d 	bl	8000bb0 <HAL_SuspendTick>
	HAL_PWR_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFI); //TODO low power regulator?
 8000776:	2101      	movs	r1, #1
 8000778:	2000      	movs	r0, #0
 800077a:	f000 fda1 	bl	80012c0 <HAL_PWR_EnterSTOPMode>
}
 800077e:	46c0      	nop			@ (mov r8, r8)
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}

08000784 <EXIT_DEEP_SLEEP_MODE>:

void EXIT_DEEP_SLEEP_MODE()
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	HAL_ResumeTick();
 8000788:	f000 fa20 	bl	8000bcc <HAL_ResumeTick>
	SystemClock_Config();
 800078c:	f7ff fe58 	bl	8000440 <SystemClock_Config>
}
 8000790:	46c0      	nop			@ (mov r8, r8)
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
	...

08000798 <SEND_VIA_UART>:

void SEND_VIA_UART(uint8_t toSend) //send analog output via uart tx
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	0002      	movs	r2, r0
 80007a0:	1dfb      	adds	r3, r7, #7
 80007a2:	701a      	strb	r2, [r3, #0]
	 */


	uint8_t uart_tx[2];

	uart_tx[0] = 0x59;
 80007a4:	210c      	movs	r1, #12
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2259      	movs	r2, #89	@ 0x59
 80007aa:	701a      	strb	r2, [r3, #0]
	uart_tx[1] = VOLTAGE;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <SEND_VIA_UART+0x30>)
 80007ae:	781a      	ldrb	r2, [r3, #0]
 80007b0:	187b      	adds	r3, r7, r1
 80007b2:	705a      	strb	r2, [r3, #1]
	//HAL_UART_Transmit(&huart1, uart_tx, 3, 100); //TODO check if works
	HAL_UART_Transmit_IT(&huart1, uart_tx, 2);
 80007b4:	1879      	adds	r1, r7, r1
 80007b6:	4b05      	ldr	r3, [pc, #20]	@ (80007cc <SEND_VIA_UART+0x34>)
 80007b8:	2202      	movs	r2, #2
 80007ba:	0018      	movs	r0, r3
 80007bc:	f001 fcb0 	bl	8002120 <HAL_UART_Transmit_IT>
}
 80007c0:	46c0      	nop			@ (mov r8, r8)
 80007c2:	46bd      	mov	sp, r7
 80007c4:	b004      	add	sp, #16
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	20000000 	.word	0x20000000
 80007cc:	20000078 	.word	0x20000078

080007d0 <HAL_GPIO_EXTI_Rising_Callback>:
//=======================================================INTERRUPTS===================================================================



void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin) //MODE pin was shorted with 3.3 => we are into manual mode
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	0002      	movs	r2, r0
 80007d8:	1dbb      	adds	r3, r7, #6
 80007da:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == MODE_SELECT_Pin)
 80007dc:	1dbb      	adds	r3, r7, #6
 80007de:	881b      	ldrh	r3, [r3, #0]
 80007e0:	2b04      	cmp	r3, #4
 80007e2:	d101      	bne.n	80007e8 <HAL_GPIO_EXTI_Rising_Callback+0x18>
    {
    	MANUAL_MODE();
 80007e4:	f7ff ffbe 	bl	8000764 <MANUAL_MODE>
    }
}
 80007e8:	46c0      	nop			@ (mov r8, r8)
 80007ea:	46bd      	mov	sp, r7
 80007ec:	b002      	add	sp, #8
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin) //MODE pin got release => we are going into auto mode
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	0002      	movs	r2, r0
 80007f8:	1dbb      	adds	r3, r7, #6
 80007fa:	801a      	strh	r2, [r3, #0]
    if(GPIO_Pin == MODE_SELECT_Pin)
 80007fc:	1dbb      	adds	r3, r7, #6
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	2b04      	cmp	r3, #4
 8000802:	d101      	bne.n	8000808 <HAL_GPIO_EXTI_Falling_Callback+0x18>
    {
    	EXIT_DEEP_SLEEP_MODE();
 8000804:	f7ff ffbe 	bl	8000784 <EXIT_DEEP_SLEEP_MODE>
    }
}
 8000808:	46c0      	nop			@ (mov r8, r8)
 800080a:	46bd      	mov	sp, r7
 800080c:	b002      	add	sp, #8
 800080e:	bd80      	pop	{r7, pc}

08000810 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //time based interrupts
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
	  if(htim->Instance == TIM17) //execute every something of time
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a04      	ldr	r2, [pc, #16]	@ (8000830 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800081e:	4293      	cmp	r3, r2
 8000820:	d101      	bne.n	8000826 <HAL_TIM_PeriodElapsedCallback+0x16>
	  {
		  ANALOG_TO_DIGITAL();
 8000822:	f7ff ff25 	bl	8000670 <ANALOG_TO_DIGITAL>
	  }
}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	46bd      	mov	sp, r7
 800082a:	b002      	add	sp, #8
 800082c:	bd80      	pop	{r7, pc}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	40014800 	.word	0x40014800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
																																//TODO user output of error in uart?

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	@ (8000884 <HAL_MspInit+0x44>)
 8000848:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800084a:	4b0e      	ldr	r3, [pc, #56]	@ (8000884 <HAL_MspInit+0x44>)
 800084c:	2101      	movs	r1, #1
 800084e:	430a      	orrs	r2, r1
 8000850:	641a      	str	r2, [r3, #64]	@ 0x40
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <HAL_MspInit+0x44>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000856:	2201      	movs	r2, #1
 8000858:	4013      	ands	r3, r2
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	@ (8000884 <HAL_MspInit+0x44>)
 8000860:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <HAL_MspInit+0x44>)
 8000864:	2180      	movs	r1, #128	@ 0x80
 8000866:	0549      	lsls	r1, r1, #21
 8000868:	430a      	orrs	r2, r1
 800086a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800086c:	4b05      	ldr	r3, [pc, #20]	@ (8000884 <HAL_MspInit+0x44>)
 800086e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000870:	2380      	movs	r3, #128	@ 0x80
 8000872:	055b      	lsls	r3, r3, #21
 8000874:	4013      	ands	r3, r2
 8000876:	603b      	str	r3, [r7, #0]
 8000878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087a:	46c0      	nop			@ (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	b002      	add	sp, #8
 8000880:	bd80      	pop	{r7, pc}
 8000882:	46c0      	nop			@ (mov r8, r8)
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a0e      	ldr	r2, [pc, #56]	@ (80008d0 <HAL_TIM_Base_MspInit+0x48>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d115      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <HAL_TIM_Base_MspInit+0x4c>)
 800089c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <HAL_TIM_Base_MspInit+0x4c>)
 80008a0:	2180      	movs	r1, #128	@ 0x80
 80008a2:	02c9      	lsls	r1, r1, #11
 80008a4:	430a      	orrs	r2, r1
 80008a6:	641a      	str	r2, [r3, #64]	@ 0x40
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <HAL_TIM_Base_MspInit+0x4c>)
 80008aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008ac:	2380      	movs	r3, #128	@ 0x80
 80008ae:	02db      	lsls	r3, r3, #11
 80008b0:	4013      	ands	r3, r2
 80008b2:	60fb      	str	r3, [r7, #12]
 80008b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	2016      	movs	r0, #22
 80008bc:	f000 fa40 	bl	8000d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008c0:	2016      	movs	r0, #22
 80008c2:	f000 fa52 	bl	8000d6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM17_MspInit 1 */

  }

}
 80008c6:	46c0      	nop			@ (mov r8, r8)
 80008c8:	46bd      	mov	sp, r7
 80008ca:	b004      	add	sp, #16
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	46c0      	nop			@ (mov r8, r8)
 80008d0:	40014800 	.word	0x40014800
 80008d4:	40021000 	.word	0x40021000

080008d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d8:	b590      	push	{r4, r7, lr}
 80008da:	b091      	sub	sp, #68	@ 0x44
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e0:	232c      	movs	r3, #44	@ 0x2c
 80008e2:	18fb      	adds	r3, r7, r3
 80008e4:	0018      	movs	r0, r3
 80008e6:	2314      	movs	r3, #20
 80008e8:	001a      	movs	r2, r3
 80008ea:	2100      	movs	r1, #0
 80008ec:	f002 feee 	bl	80036cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008f0:	2410      	movs	r4, #16
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	0018      	movs	r0, r3
 80008f6:	231c      	movs	r3, #28
 80008f8:	001a      	movs	r2, r3
 80008fa:	2100      	movs	r1, #0
 80008fc:	f002 fee6 	bl	80036cc <memset>
  if(huart->Instance==USART1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a31      	ldr	r2, [pc, #196]	@ (80009cc <HAL_UART_MspInit+0xf4>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d15b      	bne.n	80009c2 <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2201      	movs	r2, #1
 800090e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000916:	193b      	adds	r3, r7, r4
 8000918:	0018      	movs	r0, r3
 800091a:	f001 f857 	bl	80019cc <HAL_RCCEx_PeriphCLKConfig>
 800091e:	1e03      	subs	r3, r0, #0
 8000920:	d001      	beq.n	8000926 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000922:	f7ff ff87 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <HAL_UART_MspInit+0xf8>)
 8000928:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800092a:	4b29      	ldr	r3, [pc, #164]	@ (80009d0 <HAL_UART_MspInit+0xf8>)
 800092c:	2180      	movs	r1, #128	@ 0x80
 800092e:	01c9      	lsls	r1, r1, #7
 8000930:	430a      	orrs	r2, r1
 8000932:	641a      	str	r2, [r3, #64]	@ 0x40
 8000934:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <HAL_UART_MspInit+0xf8>)
 8000936:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000938:	2380      	movs	r3, #128	@ 0x80
 800093a:	01db      	lsls	r3, r3, #7
 800093c:	4013      	ands	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000942:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <HAL_UART_MspInit+0xf8>)
 8000944:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000946:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <HAL_UART_MspInit+0xf8>)
 8000948:	2102      	movs	r1, #2
 800094a:	430a      	orrs	r2, r1
 800094c:	635a      	str	r2, [r3, #52]	@ 0x34
 800094e:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <HAL_UART_MspInit+0xf8>)
 8000950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000952:	2202      	movs	r2, #2
 8000954:	4013      	ands	r3, r2
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800095a:	242c      	movs	r4, #44	@ 0x2c
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2240      	movs	r2, #64	@ 0x40
 8000960:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2212      	movs	r2, #18
 8000966:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2201      	movs	r2, #1
 800096c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000974:	193b      	adds	r3, r7, r4
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800097a:	193b      	adds	r3, r7, r4
 800097c:	4a15      	ldr	r2, [pc, #84]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 800097e:	0019      	movs	r1, r3
 8000980:	0010      	movs	r0, r2
 8000982:	f000 faeb 	bl	8000f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX__Pin;
 8000986:	0021      	movs	r1, r4
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2280      	movs	r2, #128	@ 0x80
 800098c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	187b      	adds	r3, r7, r1
 8000990:	2202      	movs	r2, #2
 8000992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000994:	187b      	adds	r3, r7, r1
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099a:	187b      	adds	r3, r7, r1
 800099c:	2200      	movs	r2, #0
 800099e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009a0:	187b      	adds	r3, r7, r1
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_RX__GPIO_Port, &GPIO_InitStruct);
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	4a0a      	ldr	r2, [pc, #40]	@ (80009d4 <HAL_UART_MspInit+0xfc>)
 80009aa:	0019      	movs	r1, r3
 80009ac:	0010      	movs	r0, r2
 80009ae:	f000 fad5 	bl	8000f5c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009b2:	2200      	movs	r2, #0
 80009b4:	2100      	movs	r1, #0
 80009b6:	201b      	movs	r0, #27
 80009b8:	f000 f9c2 	bl	8000d40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009bc:	201b      	movs	r0, #27
 80009be:	f000 f9d4 	bl	8000d6a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	46bd      	mov	sp, r7
 80009c6:	b011      	add	sp, #68	@ 0x44
 80009c8:	bd90      	pop	{r4, r7, pc}
 80009ca:	46c0      	nop			@ (mov r8, r8)
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	50000400 	.word	0x50000400

080009d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009dc:	46c0      	nop			@ (mov r8, r8)
 80009de:	e7fd      	b.n	80009dc <NMI_Handler+0x4>

080009e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009e4:	46c0      	nop			@ (mov r8, r8)
 80009e6:	e7fd      	b.n	80009e4 <HardFault_Handler+0x4>

080009e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f6:	46c0      	nop			@ (mov r8, r8)
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a00:	f000 f8ba 	bl	8000b78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a04:	46c0      	nop			@ (mov r8, r8)
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_SELECT_Pin);
 8000a0e:	2004      	movs	r0, #4
 8000a10:	f000 fc2c 	bl	800126c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
	...

08000a1c <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000a20:	4b03      	ldr	r3, [pc, #12]	@ (8000a30 <TIM17_IRQHandler+0x14>)
 8000a22:	0018      	movs	r0, r3
 8000a24:	f001 f964 	bl	8001cf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000a28:	46c0      	nop			@ (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	2000002c 	.word	0x2000002c

08000a34 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <USART1_IRQHandler+0x14>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f001 fc18 	bl	8002270 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	46c0      	nop			@ (mov r8, r8)
 8000a48:	20000078 	.word	0x20000078

08000a4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a50:	4b03      	ldr	r3, [pc, #12]	@ (8000a60 <SystemInit+0x14>)
 8000a52:	2280      	movs	r2, #128	@ 0x80
 8000a54:	0512      	lsls	r2, r2, #20
 8000a56:	609a      	str	r2, [r3, #8]
#endif
}
 8000a58:	46c0      	nop			@ (mov r8, r8)
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	46c0      	nop			@ (mov r8, r8)
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a64:	480d      	ldr	r0, [pc, #52]	@ (8000a9c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a66:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a68:	f7ff fff0 	bl	8000a4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a6c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a6e:	e003      	b.n	8000a78 <LoopCopyDataInit>

08000a70 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a70:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a72:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a74:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a76:	3104      	adds	r1, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a78:	480a      	ldr	r0, [pc, #40]	@ (8000aa4 <LoopForever+0xa>)
  ldr r3, =_edata
 8000a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000aa8 <LoopForever+0xe>)
  adds r2, r0, r1
 8000a7c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a7e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a80:	d3f6      	bcc.n	8000a70 <CopyDataInit>
  ldr r2, =_sbss
 8000a82:	4a0a      	ldr	r2, [pc, #40]	@ (8000aac <LoopForever+0x12>)
  b LoopFillZerobss
 8000a84:	e002      	b.n	8000a8c <LoopFillZerobss>

08000a86 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a88:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a8a:	3204      	adds	r2, #4

08000a8c <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a8c:	4b08      	ldr	r3, [pc, #32]	@ (8000ab0 <LoopForever+0x16>)
  cmp r2, r3
 8000a8e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a90:	d3f9      	bcc.n	8000a86 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a92:	f002 fe23 	bl	80036dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a96:	f7ff fcad 	bl	80003f4 <main>

08000a9a <LoopForever>:

LoopForever:
    b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   r0, =_estack
 8000a9c:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000aa0:	080037cc 	.word	0x080037cc
  ldr r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000aa8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000aac:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000ab0:	2000011c 	.word	0x2000011c

08000ab4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_IRQHandler>

08000ab6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b082      	sub	sp, #8
 8000aba:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000abc:	1dfb      	adds	r3, r7, #7
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ac2:	2003      	movs	r0, #3
 8000ac4:	f000 f80e 	bl	8000ae4 <HAL_InitTick>
 8000ac8:	1e03      	subs	r3, r0, #0
 8000aca:	d003      	beq.n	8000ad4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	2201      	movs	r2, #1
 8000ad0:	701a      	strb	r2, [r3, #0]
 8000ad2:	e001      	b.n	8000ad8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ad4:	f7ff feb4 	bl	8000840 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ad8:	1dfb      	adds	r3, r7, #7
 8000ada:	781b      	ldrb	r3, [r3, #0]
}
 8000adc:	0018      	movs	r0, r3
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	b002      	add	sp, #8
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ae4:	b590      	push	{r4, r7, lr}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000aec:	230f      	movs	r3, #15
 8000aee:	18fb      	adds	r3, r7, r3
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000af4:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <HAL_InitTick+0x88>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d02b      	beq.n	8000b54 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000afc:	4b1c      	ldr	r3, [pc, #112]	@ (8000b70 <HAL_InitTick+0x8c>)
 8000afe:	681c      	ldr	r4, [r3, #0]
 8000b00:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <HAL_InitTick+0x88>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	0019      	movs	r1, r3
 8000b06:	23fa      	movs	r3, #250	@ 0xfa
 8000b08:	0098      	lsls	r0, r3, #2
 8000b0a:	f7ff fafd 	bl	8000108 <__udivsi3>
 8000b0e:	0003      	movs	r3, r0
 8000b10:	0019      	movs	r1, r3
 8000b12:	0020      	movs	r0, r4
 8000b14:	f7ff faf8 	bl	8000108 <__udivsi3>
 8000b18:	0003      	movs	r3, r0
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f000 f935 	bl	8000d8a <HAL_SYSTICK_Config>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d112      	bne.n	8000b4a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	2b03      	cmp	r3, #3
 8000b28:	d80a      	bhi.n	8000b40 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b2a:	6879      	ldr	r1, [r7, #4]
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	425b      	negs	r3, r3
 8000b30:	2200      	movs	r2, #0
 8000b32:	0018      	movs	r0, r3
 8000b34:	f000 f904 	bl	8000d40 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b38:	4b0e      	ldr	r3, [pc, #56]	@ (8000b74 <HAL_InitTick+0x90>)
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	e00d      	b.n	8000b5c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b40:	230f      	movs	r3, #15
 8000b42:	18fb      	adds	r3, r7, r3
 8000b44:	2201      	movs	r2, #1
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e008      	b.n	8000b5c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b4a:	230f      	movs	r3, #15
 8000b4c:	18fb      	adds	r3, r7, r3
 8000b4e:	2201      	movs	r2, #1
 8000b50:	701a      	strb	r2, [r3, #0]
 8000b52:	e003      	b.n	8000b5c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b54:	230f      	movs	r3, #15
 8000b56:	18fb      	adds	r3, r7, r3
 8000b58:	2201      	movs	r2, #1
 8000b5a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	18fb      	adds	r3, r7, r3
 8000b60:	781b      	ldrb	r3, [r3, #0]
}
 8000b62:	0018      	movs	r0, r3
 8000b64:	46bd      	mov	sp, r7
 8000b66:	b005      	add	sp, #20
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	2000000c 	.word	0x2000000c
 8000b70:	20000004 	.word	0x20000004
 8000b74:	20000008 	.word	0x20000008

08000b78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b7c:	4b05      	ldr	r3, [pc, #20]	@ (8000b94 <HAL_IncTick+0x1c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	001a      	movs	r2, r3
 8000b82:	4b05      	ldr	r3, [pc, #20]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	18d2      	adds	r2, r2, r3
 8000b88:	4b03      	ldr	r3, [pc, #12]	@ (8000b98 <HAL_IncTick+0x20>)
 8000b8a:	601a      	str	r2, [r3, #0]
}
 8000b8c:	46c0      	nop			@ (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	2000000c 	.word	0x2000000c
 8000b98:	20000118 	.word	0x20000118

08000b9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ba0:	4b02      	ldr	r3, [pc, #8]	@ (8000bac <HAL_GetTick+0x10>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	46c0      	nop			@ (mov r8, r8)
 8000bac:	20000118 	.word	0x20000118

08000bb0 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000bb4:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <HAL_SuspendTick+0x18>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	4b03      	ldr	r3, [pc, #12]	@ (8000bc8 <HAL_SuspendTick+0x18>)
 8000bba:	2102      	movs	r1, #2
 8000bbc:	438a      	bics	r2, r1
 8000bbe:	601a      	str	r2, [r3, #0]
}
 8000bc0:	46c0      	nop			@ (mov r8, r8)
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	46c0      	nop			@ (mov r8, r8)
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8000bd0:	4b04      	ldr	r3, [pc, #16]	@ (8000be4 <HAL_ResumeTick+0x18>)
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	4b03      	ldr	r3, [pc, #12]	@ (8000be4 <HAL_ResumeTick+0x18>)
 8000bd6:	2102      	movs	r1, #2
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	601a      	str	r2, [r3, #0]
}
 8000bdc:	46c0      	nop			@ (mov r8, r8)
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			@ (mov r8, r8)
 8000be4:	e000e010 	.word	0xe000e010

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	0002      	movs	r2, r0
 8000bf0:	1dfb      	adds	r3, r7, #7
 8000bf2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bf4:	1dfb      	adds	r3, r7, #7
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bfa:	d809      	bhi.n	8000c10 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfc:	1dfb      	adds	r3, r7, #7
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	231f      	movs	r3, #31
 8000c04:	401a      	ands	r2, r3
 8000c06:	4b04      	ldr	r3, [pc, #16]	@ (8000c18 <__NVIC_EnableIRQ+0x30>)
 8000c08:	2101      	movs	r1, #1
 8000c0a:	4091      	lsls	r1, r2
 8000c0c:	000a      	movs	r2, r1
 8000c0e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c10:	46c0      	nop			@ (mov r8, r8)
 8000c12:	46bd      	mov	sp, r7
 8000c14:	b002      	add	sp, #8
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b590      	push	{r4, r7, lr}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	0002      	movs	r2, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c2a:	1dfb      	adds	r3, r7, #7
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c30:	d828      	bhi.n	8000c84 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c32:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf0 <__NVIC_SetPriority+0xd4>)
 8000c34:	1dfb      	adds	r3, r7, #7
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	b25b      	sxtb	r3, r3
 8000c3a:	089b      	lsrs	r3, r3, #2
 8000c3c:	33c0      	adds	r3, #192	@ 0xc0
 8000c3e:	009b      	lsls	r3, r3, #2
 8000c40:	589b      	ldr	r3, [r3, r2]
 8000c42:	1dfa      	adds	r2, r7, #7
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	0011      	movs	r1, r2
 8000c48:	2203      	movs	r2, #3
 8000c4a:	400a      	ands	r2, r1
 8000c4c:	00d2      	lsls	r2, r2, #3
 8000c4e:	21ff      	movs	r1, #255	@ 0xff
 8000c50:	4091      	lsls	r1, r2
 8000c52:	000a      	movs	r2, r1
 8000c54:	43d2      	mvns	r2, r2
 8000c56:	401a      	ands	r2, r3
 8000c58:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	019b      	lsls	r3, r3, #6
 8000c5e:	22ff      	movs	r2, #255	@ 0xff
 8000c60:	401a      	ands	r2, r3
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	0018      	movs	r0, r3
 8000c68:	2303      	movs	r3, #3
 8000c6a:	4003      	ands	r3, r0
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c70:	481f      	ldr	r0, [pc, #124]	@ (8000cf0 <__NVIC_SetPriority+0xd4>)
 8000c72:	1dfb      	adds	r3, r7, #7
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	b25b      	sxtb	r3, r3
 8000c78:	089b      	lsrs	r3, r3, #2
 8000c7a:	430a      	orrs	r2, r1
 8000c7c:	33c0      	adds	r3, #192	@ 0xc0
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c82:	e031      	b.n	8000ce8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c84:	4a1b      	ldr	r2, [pc, #108]	@ (8000cf4 <__NVIC_SetPriority+0xd8>)
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	0019      	movs	r1, r3
 8000c8c:	230f      	movs	r3, #15
 8000c8e:	400b      	ands	r3, r1
 8000c90:	3b08      	subs	r3, #8
 8000c92:	089b      	lsrs	r3, r3, #2
 8000c94:	3306      	adds	r3, #6
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	18d3      	adds	r3, r2, r3
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1dfa      	adds	r2, r7, #7
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	0011      	movs	r1, r2
 8000ca4:	2203      	movs	r2, #3
 8000ca6:	400a      	ands	r2, r1
 8000ca8:	00d2      	lsls	r2, r2, #3
 8000caa:	21ff      	movs	r1, #255	@ 0xff
 8000cac:	4091      	lsls	r1, r2
 8000cae:	000a      	movs	r2, r1
 8000cb0:	43d2      	mvns	r2, r2
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	019b      	lsls	r3, r3, #6
 8000cba:	22ff      	movs	r2, #255	@ 0xff
 8000cbc:	401a      	ands	r2, r3
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	0018      	movs	r0, r3
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	4003      	ands	r3, r0
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <__NVIC_SetPriority+0xd8>)
 8000cce:	1dfb      	adds	r3, r7, #7
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	001c      	movs	r4, r3
 8000cd4:	230f      	movs	r3, #15
 8000cd6:	4023      	ands	r3, r4
 8000cd8:	3b08      	subs	r3, #8
 8000cda:	089b      	lsrs	r3, r3, #2
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	3306      	adds	r3, #6
 8000ce0:	009b      	lsls	r3, r3, #2
 8000ce2:	18c3      	adds	r3, r0, r3
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	601a      	str	r2, [r3, #0]
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b003      	add	sp, #12
 8000cee:	bd90      	pop	{r4, r7, pc}
 8000cf0:	e000e100 	.word	0xe000e100
 8000cf4:	e000ed00 	.word	0xe000ed00

08000cf8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	1e5a      	subs	r2, r3, #1
 8000d04:	2380      	movs	r3, #128	@ 0x80
 8000d06:	045b      	lsls	r3, r3, #17
 8000d08:	429a      	cmp	r2, r3
 8000d0a:	d301      	bcc.n	8000d10 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	e010      	b.n	8000d32 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <SysTick_Config+0x44>)
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	3a01      	subs	r2, #1
 8000d16:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d18:	2301      	movs	r3, #1
 8000d1a:	425b      	negs	r3, r3
 8000d1c:	2103      	movs	r1, #3
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f7ff ff7c 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d24:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <SysTick_Config+0x44>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d2a:	4b04      	ldr	r3, [pc, #16]	@ (8000d3c <SysTick_Config+0x44>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			@ (mov r8, r8)
 8000d3c:	e000e010 	.word	0xe000e010

08000d40 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	187b      	adds	r3, r7, r1
 8000d4e:	1c02      	adds	r2, r0, #0
 8000d50:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	187b      	adds	r3, r7, r1
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	b25b      	sxtb	r3, r3
 8000d5a:	0011      	movs	r1, r2
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	f7ff ff5d 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d62:	46c0      	nop			@ (mov r8, r8)
 8000d64:	46bd      	mov	sp, r7
 8000d66:	b004      	add	sp, #16
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b082      	sub	sp, #8
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	0002      	movs	r2, r0
 8000d72:	1dfb      	adds	r3, r7, #7
 8000d74:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d76:	1dfb      	adds	r3, r7, #7
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b25b      	sxtb	r3, r3
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	f7ff ff33 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d82:	46c0      	nop			@ (mov r8, r8)
 8000d84:	46bd      	mov	sp, r7
 8000d86:	b002      	add	sp, #8
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b082      	sub	sp, #8
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	0018      	movs	r0, r3
 8000d96:	f7ff ffaf 	bl	8000cf8 <SysTick_Config>
 8000d9a:	0003      	movs	r3, r0
}
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	b002      	add	sp, #8
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e050      	b.n	8000e58 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2225      	movs	r2, #37	@ 0x25
 8000dba:	5c9b      	ldrb	r3, [r3, r2]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b02      	cmp	r3, #2
 8000dc0:	d008      	beq.n	8000dd4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2204      	movs	r2, #4
 8000dc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2224      	movs	r2, #36	@ 0x24
 8000dcc:	2100      	movs	r1, #0
 8000dce:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	e041      	b.n	8000e58 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	210e      	movs	r1, #14
 8000de0:	438a      	bics	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dee:	491c      	ldr	r1, [pc, #112]	@ (8000e60 <HAL_DMA_Abort+0xbc>)
 8000df0:	400a      	ands	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	438a      	bics	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000e04:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <HAL_DMA_Abort+0xc0>)
 8000e06:	6859      	ldr	r1, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0c:	221c      	movs	r2, #28
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2201      	movs	r2, #1
 8000e12:	409a      	lsls	r2, r3
 8000e14:	4b13      	ldr	r3, [pc, #76]	@ (8000e64 <HAL_DMA_Abort+0xc0>)
 8000e16:	430a      	orrs	r2, r1
 8000e18:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e1e:	687a      	ldr	r2, [r7, #4]
 8000e20:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e22:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d00c      	beq.n	8000e46 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e36:	490a      	ldr	r1, [pc, #40]	@ (8000e60 <HAL_DMA_Abort+0xbc>)
 8000e38:	400a      	ands	r2, r1
 8000e3a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000e44:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2225      	movs	r2, #37	@ 0x25
 8000e4a:	2101      	movs	r1, #1
 8000e4c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2224      	movs	r2, #36	@ 0x24
 8000e52:	2100      	movs	r1, #0
 8000e54:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e56:	2300      	movs	r3, #0
}
 8000e58:	0018      	movs	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	b002      	add	sp, #8
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	fffffeff 	.word	0xfffffeff
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e70:	230f      	movs	r3, #15
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	2200      	movs	r2, #0
 8000e76:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2224      	movs	r2, #36	@ 0x24
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2224      	movs	r2, #36	@ 0x24
 8000e84:	5c9b      	ldrb	r3, [r3, r2]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d101      	bne.n	8000e8e <HAL_DMA_Abort_IT+0x26>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e05e      	b.n	8000f4c <HAL_DMA_Abort_IT+0xe4>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2224      	movs	r2, #36	@ 0x24
 8000e92:	2101      	movs	r1, #1
 8000e94:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2225      	movs	r2, #37	@ 0x25
 8000e9a:	5c9b      	ldrb	r3, [r3, r2]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b02      	cmp	r3, #2
 8000ea0:	d007      	beq.n	8000eb2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ea8:	230f      	movs	r3, #15
 8000eaa:	18fb      	adds	r3, r7, r3
 8000eac:	2201      	movs	r2, #1
 8000eae:	701a      	strb	r2, [r3, #0]
 8000eb0:	e049      	b.n	8000f46 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	210e      	movs	r1, #14
 8000ebe:	438a      	bics	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2101      	movs	r1, #1
 8000ece:	438a      	bics	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	491d      	ldr	r1, [pc, #116]	@ (8000f54 <HAL_DMA_Abort_IT+0xec>)
 8000ede:	400a      	ands	r2, r1
 8000ee0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000ee2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f58 <HAL_DMA_Abort_IT+0xf0>)
 8000ee4:	6859      	ldr	r1, [r3, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	221c      	movs	r2, #28
 8000eec:	4013      	ands	r3, r2
 8000eee:	2201      	movs	r2, #1
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	4b19      	ldr	r3, [pc, #100]	@ (8000f58 <HAL_DMA_Abort_IT+0xf0>)
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000f00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d00c      	beq.n	8000f24 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f14:	490f      	ldr	r1, [pc, #60]	@ (8000f54 <HAL_DMA_Abort_IT+0xec>)
 8000f16:	400a      	ands	r2, r1
 8000f18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2225      	movs	r2, #37	@ 0x25
 8000f28:	2101      	movs	r1, #1
 8000f2a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2224      	movs	r2, #36	@ 0x24
 8000f30:	2100      	movs	r1, #0
 8000f32:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d004      	beq.n	8000f46 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	0010      	movs	r0, r2
 8000f44:	4798      	blx	r3
    }
  }
  return status;
 8000f46:	230f      	movs	r3, #15
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	781b      	ldrb	r3, [r3, #0]
}
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	b004      	add	sp, #16
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	fffffeff 	.word	0xfffffeff
 8000f58:	40020000 	.word	0x40020000

08000f5c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f66:	2300      	movs	r3, #0
 8000f68:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f6a:	e14d      	b.n	8001208 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2101      	movs	r1, #1
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4091      	lsls	r1, r2
 8000f76:	000a      	movs	r2, r1
 8000f78:	4013      	ands	r3, r2
 8000f7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d100      	bne.n	8000f84 <HAL_GPIO_Init+0x28>
 8000f82:	e13e      	b.n	8001202 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x38>
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b12      	cmp	r3, #18
 8000f92:	d125      	bne.n	8000fe0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	08da      	lsrs	r2, r3, #3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3208      	adds	r2, #8
 8000f9c:	0092      	lsls	r2, r2, #2
 8000f9e:	58d3      	ldr	r3, [r2, r3]
 8000fa0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2207      	movs	r2, #7
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	009b      	lsls	r3, r3, #2
 8000faa:	220f      	movs	r2, #15
 8000fac:	409a      	lsls	r2, r3
 8000fae:	0013      	movs	r3, r2
 8000fb0:	43da      	mvns	r2, r3
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000fb8:	683b      	ldr	r3, [r7, #0]
 8000fba:	691b      	ldr	r3, [r3, #16]
 8000fbc:	220f      	movs	r2, #15
 8000fbe:	401a      	ands	r2, r3
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2107      	movs	r1, #7
 8000fc4:	400b      	ands	r3, r1
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	409a      	lsls	r2, r3
 8000fca:	0013      	movs	r3, r2
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	08da      	lsrs	r2, r3, #3
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3208      	adds	r2, #8
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	6979      	ldr	r1, [r7, #20]
 8000fde:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	005b      	lsls	r3, r3, #1
 8000fea:	2203      	movs	r2, #3
 8000fec:	409a      	lsls	r2, r3
 8000fee:	0013      	movs	r3, r2
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	401a      	ands	r2, r3
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	409a      	lsls	r2, r3
 8001006:	0013      	movs	r3, r2
 8001008:	697a      	ldr	r2, [r7, #20]
 800100a:	4313      	orrs	r3, r2
 800100c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	697a      	ldr	r2, [r7, #20]
 8001012:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d00b      	beq.n	8001034 <HAL_GPIO_Init+0xd8>
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b02      	cmp	r3, #2
 8001022:	d007      	beq.n	8001034 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001028:	2b11      	cmp	r3, #17
 800102a:	d003      	beq.n	8001034 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b12      	cmp	r3, #18
 8001032:	d130      	bne.n	8001096 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	689b      	ldr	r3, [r3, #8]
 8001038:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	005b      	lsls	r3, r3, #1
 800103e:	2203      	movs	r2, #3
 8001040:	409a      	lsls	r2, r3
 8001042:	0013      	movs	r3, r2
 8001044:	43da      	mvns	r2, r3
 8001046:	697b      	ldr	r3, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	68da      	ldr	r2, [r3, #12]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	409a      	lsls	r2, r3
 8001056:	0013      	movs	r3, r2
 8001058:	697a      	ldr	r2, [r7, #20]
 800105a:	4313      	orrs	r3, r2
 800105c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	697a      	ldr	r2, [r7, #20]
 8001062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800106a:	2201      	movs	r2, #1
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	409a      	lsls	r2, r3
 8001070:	0013      	movs	r3, r2
 8001072:	43da      	mvns	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	4013      	ands	r3, r2
 8001078:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	091b      	lsrs	r3, r3, #4
 8001080:	2201      	movs	r2, #1
 8001082:	401a      	ands	r2, r3
 8001084:	693b      	ldr	r3, [r7, #16]
 8001086:	409a      	lsls	r2, r3
 8001088:	0013      	movs	r3, r2
 800108a:	697a      	ldr	r2, [r7, #20]
 800108c:	4313      	orrs	r3, r2
 800108e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	697a      	ldr	r2, [r7, #20]
 8001094:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b03      	cmp	r3, #3
 800109c:	d017      	beq.n	80010ce <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	409a      	lsls	r2, r3
 80010ac:	0013      	movs	r3, r2
 80010ae:	43da      	mvns	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	4013      	ands	r3, r2
 80010b4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689a      	ldr	r2, [r3, #8]
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	409a      	lsls	r2, r3
 80010c0:	0013      	movs	r3, r2
 80010c2:	697a      	ldr	r2, [r7, #20]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	697a      	ldr	r2, [r7, #20]
 80010cc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	2380      	movs	r3, #128	@ 0x80
 80010d4:	055b      	lsls	r3, r3, #21
 80010d6:	4013      	ands	r3, r2
 80010d8:	d100      	bne.n	80010dc <HAL_GPIO_Init+0x180>
 80010da:	e092      	b.n	8001202 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80010dc:	4a50      	ldr	r2, [pc, #320]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	089b      	lsrs	r3, r3, #2
 80010e2:	3318      	adds	r3, #24
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	589b      	ldr	r3, [r3, r2]
 80010e8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	2203      	movs	r2, #3
 80010ee:	4013      	ands	r3, r2
 80010f0:	00db      	lsls	r3, r3, #3
 80010f2:	220f      	movs	r2, #15
 80010f4:	409a      	lsls	r2, r3
 80010f6:	0013      	movs	r3, r2
 80010f8:	43da      	mvns	r2, r3
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	4013      	ands	r3, r2
 80010fe:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	23a0      	movs	r3, #160	@ 0xa0
 8001104:	05db      	lsls	r3, r3, #23
 8001106:	429a      	cmp	r2, r3
 8001108:	d013      	beq.n	8001132 <HAL_GPIO_Init+0x1d6>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a45      	ldr	r2, [pc, #276]	@ (8001224 <HAL_GPIO_Init+0x2c8>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d00d      	beq.n	800112e <HAL_GPIO_Init+0x1d2>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a44      	ldr	r2, [pc, #272]	@ (8001228 <HAL_GPIO_Init+0x2cc>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d007      	beq.n	800112a <HAL_GPIO_Init+0x1ce>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a43      	ldr	r2, [pc, #268]	@ (800122c <HAL_GPIO_Init+0x2d0>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d101      	bne.n	8001126 <HAL_GPIO_Init+0x1ca>
 8001122:	2305      	movs	r3, #5
 8001124:	e006      	b.n	8001134 <HAL_GPIO_Init+0x1d8>
 8001126:	2306      	movs	r3, #6
 8001128:	e004      	b.n	8001134 <HAL_GPIO_Init+0x1d8>
 800112a:	2302      	movs	r3, #2
 800112c:	e002      	b.n	8001134 <HAL_GPIO_Init+0x1d8>
 800112e:	2301      	movs	r3, #1
 8001130:	e000      	b.n	8001134 <HAL_GPIO_Init+0x1d8>
 8001132:	2300      	movs	r3, #0
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	2103      	movs	r1, #3
 8001138:	400a      	ands	r2, r1
 800113a:	00d2      	lsls	r2, r2, #3
 800113c:	4093      	lsls	r3, r2
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	4313      	orrs	r3, r2
 8001142:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001144:	4936      	ldr	r1, [pc, #216]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 8001146:	693b      	ldr	r3, [r7, #16]
 8001148:	089b      	lsrs	r3, r3, #2
 800114a:	3318      	adds	r3, #24
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001152:	4a33      	ldr	r2, [pc, #204]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 8001154:	2380      	movs	r3, #128	@ 0x80
 8001156:	58d3      	ldr	r3, [r2, r3]
 8001158:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	43da      	mvns	r2, r3
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	4013      	ands	r3, r2
 8001162:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	2380      	movs	r3, #128	@ 0x80
 800116a:	025b      	lsls	r3, r3, #9
 800116c:	4013      	ands	r3, r2
 800116e:	d003      	beq.n	8001178 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001170:	697a      	ldr	r2, [r7, #20]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	4313      	orrs	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001178:	4929      	ldr	r1, [pc, #164]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 800117a:	2280      	movs	r2, #128	@ 0x80
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001180:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 8001182:	2384      	movs	r3, #132	@ 0x84
 8001184:	58d3      	ldr	r3, [r2, r3]
 8001186:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	43da      	mvns	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	4013      	ands	r3, r2
 8001190:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	2380      	movs	r3, #128	@ 0x80
 8001198:	029b      	lsls	r3, r3, #10
 800119a:	4013      	ands	r3, r2
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80011a6:	491e      	ldr	r1, [pc, #120]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 80011a8:	2284      	movs	r2, #132	@ 0x84
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80011ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	43da      	mvns	r2, r3
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	4013      	ands	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685a      	ldr	r2, [r3, #4]
 80011c2:	2380      	movs	r3, #128	@ 0x80
 80011c4:	035b      	lsls	r3, r3, #13
 80011c6:	4013      	ands	r3, r2
 80011c8:	d003      	beq.n	80011d2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80011d2:	4b13      	ldr	r3, [pc, #76]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80011d8:	4b11      	ldr	r3, [pc, #68]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	43da      	mvns	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	4013      	ands	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685a      	ldr	r2, [r3, #4]
 80011ec:	2380      	movs	r3, #128	@ 0x80
 80011ee:	039b      	lsls	r3, r3, #14
 80011f0:	4013      	ands	r3, r2
 80011f2:	d003      	beq.n	80011fc <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80011f4:	697a      	ldr	r2, [r7, #20]
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	4313      	orrs	r3, r2
 80011fa:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_GPIO_Init+0x2c4>)
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	3301      	adds	r3, #1
 8001206:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	40da      	lsrs	r2, r3
 8001210:	1e13      	subs	r3, r2, #0
 8001212:	d000      	beq.n	8001216 <HAL_GPIO_Init+0x2ba>
 8001214:	e6aa      	b.n	8000f6c <HAL_GPIO_Init+0x10>
  }
}
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	46c0      	nop			@ (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b006      	add	sp, #24
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021800 	.word	0x40021800
 8001224:	50000400 	.word	0x50000400
 8001228:	50000800 	.word	0x50000800
 800122c:	50001400 	.word	0x50001400

08001230 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b084      	sub	sp, #16
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	000a      	movs	r2, r1
 800123a:	1cbb      	adds	r3, r7, #2
 800123c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	1cba      	adds	r2, r7, #2
 8001244:	8812      	ldrh	r2, [r2, #0]
 8001246:	4013      	ands	r3, r2
 8001248:	d004      	beq.n	8001254 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800124a:	230f      	movs	r3, #15
 800124c:	18fb      	adds	r3, r7, r3
 800124e:	2201      	movs	r2, #1
 8001250:	701a      	strb	r2, [r3, #0]
 8001252:	e003      	b.n	800125c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001254:	230f      	movs	r3, #15
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	781b      	ldrb	r3, [r3, #0]
}
 8001262:	0018      	movs	r0, r3
 8001264:	46bd      	mov	sp, r7
 8001266:	b004      	add	sp, #16
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	0002      	movs	r2, r0
 8001274:	1dbb      	adds	r3, r7, #6
 8001276:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001278:	4b10      	ldr	r3, [pc, #64]	@ (80012bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	1dba      	adds	r2, r7, #6
 800127e:	8812      	ldrh	r2, [r2, #0]
 8001280:	4013      	ands	r3, r2
 8001282:	d008      	beq.n	8001296 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001284:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001286:	1dba      	adds	r2, r7, #6
 8001288:	8812      	ldrh	r2, [r2, #0]
 800128a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800128c:	1dbb      	adds	r3, r7, #6
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	0018      	movs	r0, r3
 8001292:	f7ff fa9d 	bl	80007d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001298:	691b      	ldr	r3, [r3, #16]
 800129a:	1dba      	adds	r2, r7, #6
 800129c:	8812      	ldrh	r2, [r2, #0]
 800129e:	4013      	ands	r3, r2
 80012a0:	d008      	beq.n	80012b4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80012a2:	4b06      	ldr	r3, [pc, #24]	@ (80012bc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80012a4:	1dba      	adds	r2, r7, #6
 80012a6:	8812      	ldrh	r2, [r2, #0]
 80012a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80012aa:	1dbb      	adds	r3, r7, #6
 80012ac:	881b      	ldrh	r3, [r3, #0]
 80012ae:	0018      	movs	r0, r3
 80012b0:	f7ff fa9e 	bl	80007f0 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80012b4:	46c0      	nop			@ (mov r8, r8)
 80012b6:	46bd      	mov	sp, r7
 80012b8:	b002      	add	sp, #8
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	40021800 	.word	0x40021800

080012c0 <HAL_PWR_EnterSTOPMode>:
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop 0 mode with WFE
  *                                         instruction.
  * @retval None
  */
void HAL_PWR_EnterSTOPMode(uint32_t Regulator, uint8_t STOPEntry)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	000a      	movs	r2, r1
 80012ca:	1cfb      	adds	r3, r7, #3
 80012cc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_STOP_ENTRY(STOPEntry));

  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP0);
 80012ce:	4b0f      	ldr	r3, [pc, #60]	@ (800130c <HAL_PWR_EnterSTOPMode+0x4c>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b0e      	ldr	r3, [pc, #56]	@ (800130c <HAL_PWR_EnterSTOPMode+0x4c>)
 80012d4:	2107      	movs	r1, #7
 80012d6:	438a      	bics	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012da:	4b0d      	ldr	r3, [pc, #52]	@ (8001310 <HAL_PWR_EnterSTOPMode+0x50>)
 80012dc:	691a      	ldr	r2, [r3, #16]
 80012de:	4b0c      	ldr	r3, [pc, #48]	@ (8001310 <HAL_PWR_EnterSTOPMode+0x50>)
 80012e0:	2104      	movs	r1, #4
 80012e2:	430a      	orrs	r2, r1
 80012e4:	611a      	str	r2, [r3, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 80012e6:	1cfb      	adds	r3, r7, #3
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d101      	bne.n	80012f2 <HAL_PWR_EnterSTOPMode+0x32>
  {
    /* Request Wait For Interrupt */
    __WFI();
 80012ee:	bf30      	wfi
 80012f0:	e002      	b.n	80012f8 <HAL_PWR_EnterSTOPMode+0x38>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80012f2:	bf40      	sev
    __WFE();
 80012f4:	bf20      	wfe
    __WFE();
 80012f6:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80012f8:	4b05      	ldr	r3, [pc, #20]	@ (8001310 <HAL_PWR_EnterSTOPMode+0x50>)
 80012fa:	691a      	ldr	r2, [r3, #16]
 80012fc:	4b04      	ldr	r3, [pc, #16]	@ (8001310 <HAL_PWR_EnterSTOPMode+0x50>)
 80012fe:	2104      	movs	r1, #4
 8001300:	438a      	bics	r2, r1
 8001302:	611a      	str	r2, [r3, #16]
}
 8001304:	46c0      	nop			@ (mov r8, r8)
 8001306:	46bd      	mov	sp, r7
 8001308:	b002      	add	sp, #8
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40007000 	.word	0x40007000
 8001310:	e000ed00 	.word	0xe000ed00

08001314 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1d0      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2201      	movs	r2, #1
 800132c:	4013      	ands	r3, r2
 800132e:	d100      	bne.n	8001332 <HAL_RCC_OscConfig+0x1e>
 8001330:	e069      	b.n	8001406 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001332:	4bc8      	ldr	r3, [pc, #800]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	2238      	movs	r2, #56	@ 0x38
 8001338:	4013      	ands	r3, r2
 800133a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	2b08      	cmp	r3, #8
 8001340:	d105      	bne.n	800134e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d15d      	bne.n	8001406 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e1bc      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	2380      	movs	r3, #128	@ 0x80
 8001354:	025b      	lsls	r3, r3, #9
 8001356:	429a      	cmp	r2, r3
 8001358:	d107      	bne.n	800136a <HAL_RCC_OscConfig+0x56>
 800135a:	4bbe      	ldr	r3, [pc, #760]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4bbd      	ldr	r3, [pc, #756]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001360:	2180      	movs	r1, #128	@ 0x80
 8001362:	0249      	lsls	r1, r1, #9
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	e020      	b.n	80013ac <HAL_RCC_OscConfig+0x98>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	23a0      	movs	r3, #160	@ 0xa0
 8001370:	02db      	lsls	r3, r3, #11
 8001372:	429a      	cmp	r2, r3
 8001374:	d10e      	bne.n	8001394 <HAL_RCC_OscConfig+0x80>
 8001376:	4bb7      	ldr	r3, [pc, #732]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	4bb6      	ldr	r3, [pc, #728]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800137c:	2180      	movs	r1, #128	@ 0x80
 800137e:	02c9      	lsls	r1, r1, #11
 8001380:	430a      	orrs	r2, r1
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	4bb3      	ldr	r3, [pc, #716]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	4bb2      	ldr	r3, [pc, #712]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800138a:	2180      	movs	r1, #128	@ 0x80
 800138c:	0249      	lsls	r1, r1, #9
 800138e:	430a      	orrs	r2, r1
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	e00b      	b.n	80013ac <HAL_RCC_OscConfig+0x98>
 8001394:	4baf      	ldr	r3, [pc, #700]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4bae      	ldr	r3, [pc, #696]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800139a:	49af      	ldr	r1, [pc, #700]	@ (8001658 <HAL_RCC_OscConfig+0x344>)
 800139c:	400a      	ands	r2, r1
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	4bac      	ldr	r3, [pc, #688]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4bab      	ldr	r3, [pc, #684]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80013a6:	49ad      	ldr	r1, [pc, #692]	@ (800165c <HAL_RCC_OscConfig+0x348>)
 80013a8:	400a      	ands	r2, r1
 80013aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d014      	beq.n	80013de <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fbf2 	bl	8000b9c <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80013be:	f7ff fbed 	bl	8000b9c <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b64      	cmp	r3, #100	@ 0x64
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e17b      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d0:	4ba0      	ldr	r3, [pc, #640]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	029b      	lsls	r3, r3, #10
 80013d8:	4013      	ands	r3, r2
 80013da:	d0f0      	beq.n	80013be <HAL_RCC_OscConfig+0xaa>
 80013dc:	e013      	b.n	8001406 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013de:	f7ff fbdd 	bl	8000b9c <HAL_GetTick>
 80013e2:	0003      	movs	r3, r0
 80013e4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013e6:	e008      	b.n	80013fa <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80013e8:	f7ff fbd8 	bl	8000b9c <HAL_GetTick>
 80013ec:	0002      	movs	r2, r0
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	2b64      	cmp	r3, #100	@ 0x64
 80013f4:	d901      	bls.n	80013fa <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80013f6:	2303      	movs	r3, #3
 80013f8:	e166      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80013fa:	4b96      	ldr	r3, [pc, #600]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	2380      	movs	r3, #128	@ 0x80
 8001400:	029b      	lsls	r3, r3, #10
 8001402:	4013      	ands	r3, r2
 8001404:	d1f0      	bne.n	80013e8 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	2202      	movs	r2, #2
 800140c:	4013      	ands	r3, r2
 800140e:	d100      	bne.n	8001412 <HAL_RCC_OscConfig+0xfe>
 8001410:	e086      	b.n	8001520 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001412:	4b90      	ldr	r3, [pc, #576]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001414:	689b      	ldr	r3, [r3, #8]
 8001416:	2238      	movs	r2, #56	@ 0x38
 8001418:	4013      	ands	r3, r2
 800141a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d12f      	bne.n	8001482 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	68db      	ldr	r3, [r3, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d101      	bne.n	800142e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e14c      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b89      	ldr	r3, [pc, #548]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	4a8b      	ldr	r2, [pc, #556]	@ (8001660 <HAL_RCC_OscConfig+0x34c>)
 8001434:	4013      	ands	r3, r2
 8001436:	0019      	movs	r1, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	695b      	ldr	r3, [r3, #20]
 800143c:	021a      	lsls	r2, r3, #8
 800143e:	4b85      	ldr	r3, [pc, #532]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001440:	430a      	orrs	r2, r1
 8001442:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d112      	bne.n	8001470 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800144a:	4b82      	ldr	r3, [pc, #520]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a85      	ldr	r2, [pc, #532]	@ (8001664 <HAL_RCC_OscConfig+0x350>)
 8001450:	4013      	ands	r3, r2
 8001452:	0019      	movs	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	691a      	ldr	r2, [r3, #16]
 8001458:	4b7e      	ldr	r3, [pc, #504]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800145a:	430a      	orrs	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800145e:	4b7d      	ldr	r3, [pc, #500]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	0adb      	lsrs	r3, r3, #11
 8001464:	2207      	movs	r2, #7
 8001466:	4013      	ands	r3, r2
 8001468:	4a7f      	ldr	r2, [pc, #508]	@ (8001668 <HAL_RCC_OscConfig+0x354>)
 800146a:	40da      	lsrs	r2, r3
 800146c:	4b7f      	ldr	r3, [pc, #508]	@ (800166c <HAL_RCC_OscConfig+0x358>)
 800146e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001470:	4b7f      	ldr	r3, [pc, #508]	@ (8001670 <HAL_RCC_OscConfig+0x35c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	0018      	movs	r0, r3
 8001476:	f7ff fb35 	bl	8000ae4 <HAL_InitTick>
 800147a:	1e03      	subs	r3, r0, #0
 800147c:	d050      	beq.n	8001520 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e122      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d030      	beq.n	80014ec <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800148a:	4b72      	ldr	r3, [pc, #456]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a75      	ldr	r2, [pc, #468]	@ (8001664 <HAL_RCC_OscConfig+0x350>)
 8001490:	4013      	ands	r3, r2
 8001492:	0019      	movs	r1, r3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	691a      	ldr	r2, [r3, #16]
 8001498:	4b6e      	ldr	r3, [pc, #440]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800149a:	430a      	orrs	r2, r1
 800149c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800149e:	4b6d      	ldr	r3, [pc, #436]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80014a4:	2180      	movs	r1, #128	@ 0x80
 80014a6:	0049      	lsls	r1, r1, #1
 80014a8:	430a      	orrs	r2, r1
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb76 	bl	8000b9c <HAL_GetTick>
 80014b0:	0003      	movs	r3, r0
 80014b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fb71 	bl	8000b9c <HAL_GetTick>
 80014ba:	0002      	movs	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0ff      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	4b62      	ldr	r3, [pc, #392]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	2380      	movs	r3, #128	@ 0x80
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	4013      	ands	r3, r2
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b5f      	ldr	r3, [pc, #380]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a61      	ldr	r2, [pc, #388]	@ (8001660 <HAL_RCC_OscConfig+0x34c>)
 80014da:	4013      	ands	r3, r2
 80014dc:	0019      	movs	r1, r3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	021a      	lsls	r2, r3, #8
 80014e4:	4b5b      	ldr	r3, [pc, #364]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80014e6:	430a      	orrs	r2, r1
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	e019      	b.n	8001520 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80014ec:	4b59      	ldr	r3, [pc, #356]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4b58      	ldr	r3, [pc, #352]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80014f2:	4960      	ldr	r1, [pc, #384]	@ (8001674 <HAL_RCC_OscConfig+0x360>)
 80014f4:	400a      	ands	r2, r1
 80014f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fb50 	bl	8000b9c <HAL_GetTick>
 80014fc:	0003      	movs	r3, r0
 80014fe:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001500:	e008      	b.n	8001514 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001502:	f7ff fb4b 	bl	8000b9c <HAL_GetTick>
 8001506:	0002      	movs	r2, r0
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	1ad3      	subs	r3, r2, r3
 800150c:	2b02      	cmp	r3, #2
 800150e:	d901      	bls.n	8001514 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001510:	2303      	movs	r3, #3
 8001512:	e0d9      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001514:	4b4f      	ldr	r3, [pc, #316]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	@ 0x80
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4013      	ands	r3, r2
 800151e:	d1f0      	bne.n	8001502 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2208      	movs	r2, #8
 8001526:	4013      	ands	r3, r2
 8001528:	d042      	beq.n	80015b0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800152a:	4b4a      	ldr	r3, [pc, #296]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2238      	movs	r2, #56	@ 0x38
 8001530:	4013      	ands	r3, r2
 8001532:	2b18      	cmp	r3, #24
 8001534:	d105      	bne.n	8001542 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	699b      	ldr	r3, [r3, #24]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d138      	bne.n	80015b0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e0c2      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	699b      	ldr	r3, [r3, #24]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d019      	beq.n	800157e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800154a:	4b42      	ldr	r3, [pc, #264]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800154c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800154e:	4b41      	ldr	r3, [pc, #260]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001556:	f7ff fb21 	bl	8000b9c <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001560:	f7ff fb1c 	bl	8000b9c <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e0aa      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001572:	4b38      	ldr	r3, [pc, #224]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001574:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d0f1      	beq.n	8001560 <HAL_RCC_OscConfig+0x24c>
 800157c:	e018      	b.n	80015b0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800157e:	4b35      	ldr	r3, [pc, #212]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001580:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001582:	4b34      	ldr	r3, [pc, #208]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001584:	2101      	movs	r1, #1
 8001586:	438a      	bics	r2, r1
 8001588:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800158a:	f7ff fb07 	bl	8000b9c <HAL_GetTick>
 800158e:	0003      	movs	r3, r0
 8001590:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001594:	f7ff fb02 	bl	8000b9c <HAL_GetTick>
 8001598:	0002      	movs	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e090      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80015a6:	4b2b      	ldr	r3, [pc, #172]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80015a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015aa:	2202      	movs	r2, #2
 80015ac:	4013      	ands	r3, r2
 80015ae:	d1f1      	bne.n	8001594 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2204      	movs	r2, #4
 80015b6:	4013      	ands	r3, r2
 80015b8:	d100      	bne.n	80015bc <HAL_RCC_OscConfig+0x2a8>
 80015ba:	e084      	b.n	80016c6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015bc:	230f      	movs	r3, #15
 80015be:	18fb      	adds	r3, r7, r3
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80015c4:	4b23      	ldr	r3, [pc, #140]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	2238      	movs	r2, #56	@ 0x38
 80015ca:	4013      	ands	r3, r2
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d106      	bne.n	80015de <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d000      	beq.n	80015da <HAL_RCC_OscConfig+0x2c6>
 80015d8:	e075      	b.n	80016c6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e074      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d106      	bne.n	80015f4 <HAL_RCC_OscConfig+0x2e0>
 80015e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80015e8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80015ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80015ec:	2101      	movs	r1, #1
 80015ee:	430a      	orrs	r2, r1
 80015f0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80015f2:	e01c      	b.n	800162e <HAL_RCC_OscConfig+0x31a>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	2b05      	cmp	r3, #5
 80015fa:	d10c      	bne.n	8001616 <HAL_RCC_OscConfig+0x302>
 80015fc:	4b15      	ldr	r3, [pc, #84]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 80015fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001600:	4b14      	ldr	r3, [pc, #80]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001602:	2104      	movs	r1, #4
 8001604:	430a      	orrs	r2, r1
 8001606:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001608:	4b12      	ldr	r3, [pc, #72]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800160a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800160c:	4b11      	ldr	r3, [pc, #68]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800160e:	2101      	movs	r1, #1
 8001610:	430a      	orrs	r2, r1
 8001612:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001614:	e00b      	b.n	800162e <HAL_RCC_OscConfig+0x31a>
 8001616:	4b0f      	ldr	r3, [pc, #60]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001618:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800161a:	4b0e      	ldr	r3, [pc, #56]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 800161c:	2101      	movs	r1, #1
 800161e:	438a      	bics	r2, r1
 8001620:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001622:	4b0c      	ldr	r3, [pc, #48]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001624:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001626:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <HAL_RCC_OscConfig+0x340>)
 8001628:	2104      	movs	r1, #4
 800162a:	438a      	bics	r2, r1
 800162c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d028      	beq.n	8001688 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fab1 	bl	8000b9c <HAL_GetTick>
 800163a:	0003      	movs	r3, r0
 800163c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800163e:	e01d      	b.n	800167c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001640:	f7ff faac 	bl	8000b9c <HAL_GetTick>
 8001644:	0002      	movs	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	4a0b      	ldr	r2, [pc, #44]	@ (8001678 <HAL_RCC_OscConfig+0x364>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d915      	bls.n	800167c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001650:	2303      	movs	r3, #3
 8001652:	e039      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
 8001654:	40021000 	.word	0x40021000
 8001658:	fffeffff 	.word	0xfffeffff
 800165c:	fffbffff 	.word	0xfffbffff
 8001660:	ffff80ff 	.word	0xffff80ff
 8001664:	ffffc7ff 	.word	0xffffc7ff
 8001668:	02dc6c00 	.word	0x02dc6c00
 800166c:	20000004 	.word	0x20000004
 8001670:	20000008 	.word	0x20000008
 8001674:	fffffeff 	.word	0xfffffeff
 8001678:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800167c:	4b14      	ldr	r3, [pc, #80]	@ (80016d0 <HAL_RCC_OscConfig+0x3bc>)
 800167e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001680:	2202      	movs	r2, #2
 8001682:	4013      	ands	r3, r2
 8001684:	d0dc      	beq.n	8001640 <HAL_RCC_OscConfig+0x32c>
 8001686:	e013      	b.n	80016b0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fa88 	bl	8000b9c <HAL_GetTick>
 800168c:	0003      	movs	r3, r0
 800168e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001690:	e009      	b.n	80016a6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001692:	f7ff fa83 	bl	8000b9c <HAL_GetTick>
 8001696:	0002      	movs	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_RCC_OscConfig+0x3c0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e010      	b.n	80016c8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <HAL_RCC_OscConfig+0x3bc>)
 80016a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b05      	ldr	r3, [pc, #20]	@ (80016d0 <HAL_RCC_OscConfig+0x3bc>)
 80016bc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80016be:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <HAL_RCC_OscConfig+0x3bc>)
 80016c0:	4905      	ldr	r1, [pc, #20]	@ (80016d8 <HAL_RCC_OscConfig+0x3c4>)
 80016c2:	400a      	ands	r2, r1
 80016c4:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	0018      	movs	r0, r3
 80016ca:	46bd      	mov	sp, r7
 80016cc:	b006      	add	sp, #24
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40021000 	.word	0x40021000
 80016d4:	00001388 	.word	0x00001388
 80016d8:	efffffff 	.word	0xefffffff

080016dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d101      	bne.n	80016f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e0df      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016f0:	4b71      	ldr	r3, [pc, #452]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2207      	movs	r2, #7
 80016f6:	4013      	ands	r3, r2
 80016f8:	683a      	ldr	r2, [r7, #0]
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d91e      	bls.n	800173c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016fe:	4b6e      	ldr	r3, [pc, #440]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2207      	movs	r2, #7
 8001704:	4393      	bics	r3, r2
 8001706:	0019      	movs	r1, r3
 8001708:	4b6b      	ldr	r3, [pc, #428]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 800170a:	683a      	ldr	r2, [r7, #0]
 800170c:	430a      	orrs	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001710:	f7ff fa44 	bl	8000b9c <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001718:	e009      	b.n	800172e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800171a:	f7ff fa3f 	bl	8000b9c <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	4a65      	ldr	r2, [pc, #404]	@ (80018bc <HAL_RCC_ClockConfig+0x1e0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d901      	bls.n	800172e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e0c0      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800172e:	4b62      	ldr	r3, [pc, #392]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	2207      	movs	r2, #7
 8001734:	4013      	ands	r3, r2
 8001736:	683a      	ldr	r2, [r7, #0]
 8001738:	429a      	cmp	r2, r3
 800173a:	d1ee      	bne.n	800171a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	2202      	movs	r2, #2
 8001742:	4013      	ands	r3, r2
 8001744:	d017      	beq.n	8001776 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2204      	movs	r2, #4
 800174c:	4013      	ands	r3, r2
 800174e:	d008      	beq.n	8001762 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001750:	4b5b      	ldr	r3, [pc, #364]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	4a5b      	ldr	r2, [pc, #364]	@ (80018c4 <HAL_RCC_ClockConfig+0x1e8>)
 8001756:	401a      	ands	r2, r3
 8001758:	4b59      	ldr	r3, [pc, #356]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 800175a:	21b0      	movs	r1, #176	@ 0xb0
 800175c:	0109      	lsls	r1, r1, #4
 800175e:	430a      	orrs	r2, r1
 8001760:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001762:	4b57      	ldr	r3, [pc, #348]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 8001764:	689b      	ldr	r3, [r3, #8]
 8001766:	4a58      	ldr	r2, [pc, #352]	@ (80018c8 <HAL_RCC_ClockConfig+0x1ec>)
 8001768:	4013      	ands	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	4b53      	ldr	r3, [pc, #332]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2201      	movs	r2, #1
 800177c:	4013      	ands	r3, r2
 800177e:	d04b      	beq.n	8001818 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d107      	bne.n	8001798 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001788:	4b4d      	ldr	r3, [pc, #308]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	2380      	movs	r3, #128	@ 0x80
 800178e:	029b      	lsls	r3, r3, #10
 8001790:	4013      	ands	r3, r2
 8001792:	d11f      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e08b      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d107      	bne.n	80017b0 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017a0:	4b47      	ldr	r3, [pc, #284]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	2380      	movs	r3, #128	@ 0x80
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	4013      	ands	r3, r2
 80017aa:	d113      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e07f      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b03      	cmp	r3, #3
 80017b6:	d106      	bne.n	80017c6 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017b8:	4b41      	ldr	r3, [pc, #260]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 80017ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017bc:	2202      	movs	r2, #2
 80017be:	4013      	ands	r3, r2
 80017c0:	d108      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e074      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80017c6:	4b3e      	ldr	r3, [pc, #248]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 80017c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d101      	bne.n	80017d4 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e06d      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80017d4:	4b3a      	ldr	r3, [pc, #232]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2207      	movs	r2, #7
 80017da:	4393      	bics	r3, r2
 80017dc:	0019      	movs	r1, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4b37      	ldr	r3, [pc, #220]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 80017e4:	430a      	orrs	r2, r1
 80017e6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017e8:	f7ff f9d8 	bl	8000b9c <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017f0:	e009      	b.n	8001806 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80017f2:	f7ff f9d3 	bl	8000b9c <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	4a2f      	ldr	r2, [pc, #188]	@ (80018bc <HAL_RCC_ClockConfig+0x1e0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d901      	bls.n	8001806 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001802:	2303      	movs	r3, #3
 8001804:	e054      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001806:	4b2e      	ldr	r3, [pc, #184]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2238      	movs	r2, #56	@ 0x38
 800180c:	401a      	ands	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	00db      	lsls	r3, r3, #3
 8001814:	429a      	cmp	r2, r3
 8001816:	d1ec      	bne.n	80017f2 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2207      	movs	r2, #7
 800181e:	4013      	ands	r3, r2
 8001820:	683a      	ldr	r2, [r7, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d21e      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001826:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2207      	movs	r2, #7
 800182c:	4393      	bics	r3, r2
 800182e:	0019      	movs	r1, r3
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	430a      	orrs	r2, r1
 8001836:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001838:	f7ff f9b0 	bl	8000b9c <HAL_GetTick>
 800183c:	0003      	movs	r3, r0
 800183e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001840:	e009      	b.n	8001856 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001842:	f7ff f9ab 	bl	8000b9c <HAL_GetTick>
 8001846:	0002      	movs	r2, r0
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	4a1b      	ldr	r2, [pc, #108]	@ (80018bc <HAL_RCC_ClockConfig+0x1e0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e02c      	b.n	80018b0 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001856:	4b18      	ldr	r3, [pc, #96]	@ (80018b8 <HAL_RCC_ClockConfig+0x1dc>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	2207      	movs	r2, #7
 800185c:	4013      	ands	r3, r2
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	429a      	cmp	r2, r3
 8001862:	d1ee      	bne.n	8001842 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2204      	movs	r2, #4
 800186a:	4013      	ands	r3, r2
 800186c:	d009      	beq.n	8001882 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800186e:	4b14      	ldr	r3, [pc, #80]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 8001870:	689b      	ldr	r3, [r3, #8]
 8001872:	4a16      	ldr	r2, [pc, #88]	@ (80018cc <HAL_RCC_ClockConfig+0x1f0>)
 8001874:	4013      	ands	r3, r2
 8001876:	0019      	movs	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691a      	ldr	r2, [r3, #16]
 800187c:	4b10      	ldr	r3, [pc, #64]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 800187e:	430a      	orrs	r2, r1
 8001880:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001882:	f000 f82b 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8001886:	0001      	movs	r1, r0
 8001888:	4b0d      	ldr	r3, [pc, #52]	@ (80018c0 <HAL_RCC_ClockConfig+0x1e4>)
 800188a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800188c:	0a1b      	lsrs	r3, r3, #8
 800188e:	220f      	movs	r2, #15
 8001890:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001892:	4b0f      	ldr	r3, [pc, #60]	@ (80018d0 <HAL_RCC_ClockConfig+0x1f4>)
 8001894:	0092      	lsls	r2, r2, #2
 8001896:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001898:	221f      	movs	r2, #31
 800189a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800189c:	000a      	movs	r2, r1
 800189e:	40da      	lsrs	r2, r3
 80018a0:	4b0c      	ldr	r3, [pc, #48]	@ (80018d4 <HAL_RCC_ClockConfig+0x1f8>)
 80018a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80018a4:	4b0c      	ldr	r3, [pc, #48]	@ (80018d8 <HAL_RCC_ClockConfig+0x1fc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	0018      	movs	r0, r3
 80018aa:	f7ff f91b 	bl	8000ae4 <HAL_InitTick>
 80018ae:	0003      	movs	r3, r0
}
 80018b0:	0018      	movs	r0, r3
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b004      	add	sp, #16
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40022000 	.word	0x40022000
 80018bc:	00001388 	.word	0x00001388
 80018c0:	40021000 	.word	0x40021000
 80018c4:	ffff84ff 	.word	0xffff84ff
 80018c8:	fffff0ff 	.word	0xfffff0ff
 80018cc:	ffff8fff 	.word	0xffff8fff
 80018d0:	0800373c 	.word	0x0800373c
 80018d4:	20000004 	.word	0x20000004
 80018d8:	20000008 	.word	0x20000008

080018dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x78>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	2238      	movs	r2, #56	@ 0x38
 80018e8:	4013      	ands	r3, r2
 80018ea:	d10f      	bne.n	800190c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x78>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	0adb      	lsrs	r3, r3, #11
 80018f2:	2207      	movs	r2, #7
 80018f4:	4013      	ands	r3, r2
 80018f6:	2201      	movs	r2, #1
 80018f8:	409a      	lsls	r2, r3
 80018fa:	0013      	movs	r3, r2
 80018fc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80018fe:	6839      	ldr	r1, [r7, #0]
 8001900:	4815      	ldr	r0, [pc, #84]	@ (8001958 <HAL_RCC_GetSysClockFreq+0x7c>)
 8001902:	f7fe fc01 	bl	8000108 <__udivsi3>
 8001906:	0003      	movs	r3, r0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	e01e      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800190c:	4b11      	ldr	r3, [pc, #68]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x78>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	2238      	movs	r2, #56	@ 0x38
 8001912:	4013      	ands	r3, r2
 8001914:	2b08      	cmp	r3, #8
 8001916:	d102      	bne.n	800191e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001918:	4b10      	ldr	r3, [pc, #64]	@ (800195c <HAL_RCC_GetSysClockFreq+0x80>)
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	e015      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x78>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2238      	movs	r2, #56	@ 0x38
 8001924:	4013      	ands	r3, r2
 8001926:	2b20      	cmp	r3, #32
 8001928:	d103      	bne.n	8001932 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800192a:	2380      	movs	r3, #128	@ 0x80
 800192c:	021b      	lsls	r3, r3, #8
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e00b      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001932:	4b08      	ldr	r3, [pc, #32]	@ (8001954 <HAL_RCC_GetSysClockFreq+0x78>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	2238      	movs	r2, #56	@ 0x38
 8001938:	4013      	ands	r3, r2
 800193a:	2b18      	cmp	r3, #24
 800193c:	d103      	bne.n	8001946 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800193e:	23fa      	movs	r3, #250	@ 0xfa
 8001940:	01db      	lsls	r3, r3, #7
 8001942:	607b      	str	r3, [r7, #4]
 8001944:	e001      	b.n	800194a <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800194a:	687b      	ldr	r3, [r7, #4]
}
 800194c:	0018      	movs	r0, r3
 800194e:	46bd      	mov	sp, r7
 8001950:	b002      	add	sp, #8
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000
 8001958:	02dc6c00 	.word	0x02dc6c00
 800195c:	007a1200 	.word	0x007a1200

08001960 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001964:	f7ff ffba 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8001968:	0001      	movs	r1, r0
 800196a:	4b09      	ldr	r3, [pc, #36]	@ (8001990 <HAL_RCC_GetHCLKFreq+0x30>)
 800196c:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	220f      	movs	r2, #15
 8001972:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001974:	4b07      	ldr	r3, [pc, #28]	@ (8001994 <HAL_RCC_GetHCLKFreq+0x34>)
 8001976:	0092      	lsls	r2, r2, #2
 8001978:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800197a:	221f      	movs	r2, #31
 800197c:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800197e:	000a      	movs	r2, r1
 8001980:	40da      	lsrs	r2, r3
 8001982:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <HAL_RCC_GetHCLKFreq+0x38>)
 8001984:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <HAL_RCC_GetHCLKFreq+0x38>)
 8001988:	681b      	ldr	r3, [r3, #0]
}
 800198a:	0018      	movs	r0, r3
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	0800373c 	.word	0x0800373c
 8001998:	20000004 	.word	0x20000004

0800199c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80019a0:	f7ff ffde 	bl	8001960 <HAL_RCC_GetHCLKFreq>
 80019a4:	0001      	movs	r1, r0
 80019a6:	4b07      	ldr	r3, [pc, #28]	@ (80019c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	0b1b      	lsrs	r3, r3, #12
 80019ac:	2207      	movs	r2, #7
 80019ae:	401a      	ands	r2, r3
 80019b0:	4b05      	ldr	r3, [pc, #20]	@ (80019c8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	58d3      	ldr	r3, [r2, r3]
 80019b6:	221f      	movs	r2, #31
 80019b8:	4013      	ands	r3, r2
 80019ba:	40d9      	lsrs	r1, r3
 80019bc:	000b      	movs	r3, r1
}
 80019be:	0018      	movs	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	40021000 	.word	0x40021000
 80019c8:	0800377c 	.word	0x0800377c

080019cc <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80019d4:	2313      	movs	r3, #19
 80019d6:	18fb      	adds	r3, r7, r3
 80019d8:	2200      	movs	r2, #0
 80019da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80019dc:	2312      	movs	r3, #18
 80019de:	18fb      	adds	r3, r7, r3
 80019e0:	2200      	movs	r2, #0
 80019e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2240      	movs	r2, #64	@ 0x40
 80019ea:	4013      	ands	r3, r2
 80019ec:	d100      	bne.n	80019f0 <HAL_RCCEx_PeriphCLKConfig+0x24>
 80019ee:	e079      	b.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019f0:	2011      	movs	r0, #17
 80019f2:	183b      	adds	r3, r7, r0
 80019f4:	2200      	movs	r2, #0
 80019f6:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019f8:	4b63      	ldr	r3, [pc, #396]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019fc:	2380      	movs	r3, #128	@ 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	4013      	ands	r3, r2
 8001a02:	d110      	bne.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	4b60      	ldr	r3, [pc, #384]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a06:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a08:	4b5f      	ldr	r3, [pc, #380]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a0a:	2180      	movs	r1, #128	@ 0x80
 8001a0c:	0549      	lsls	r1, r1, #21
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a12:	4b5d      	ldr	r3, [pc, #372]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a16:	2380      	movs	r3, #128	@ 0x80
 8001a18:	055b      	lsls	r3, r3, #21
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a20:	183b      	adds	r3, r7, r0
 8001a22:	2201      	movs	r2, #1
 8001a24:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001a26:	4b58      	ldr	r3, [pc, #352]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a28:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a2a:	23c0      	movs	r3, #192	@ 0xc0
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4013      	ands	r3, r2
 8001a30:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d019      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	697a      	ldr	r2, [r7, #20]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d014      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8001a42:	4b51      	ldr	r3, [pc, #324]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a46:	4a51      	ldr	r2, [pc, #324]	@ (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001a48:	4013      	ands	r3, r2
 8001a4a:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001a4c:	4b4e      	ldr	r3, [pc, #312]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a4e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a50:	4b4d      	ldr	r3, [pc, #308]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a52:	2180      	movs	r1, #128	@ 0x80
 8001a54:	0249      	lsls	r1, r1, #9
 8001a56:	430a      	orrs	r2, r1
 8001a58:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001a5a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a5c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a60:	494b      	ldr	r1, [pc, #300]	@ (8001b90 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8001a62:	400a      	ands	r2, r1
 8001a64:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001a66:	4b48      	ldr	r3, [pc, #288]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a68:	697a      	ldr	r2, [r7, #20]
 8001a6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	4013      	ands	r3, r2
 8001a72:	d016      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a74:	f7ff f892 	bl	8000b9c <HAL_GetTick>
 8001a78:	0003      	movs	r3, r0
 8001a7a:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a7c:	e00c      	b.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a7e:	f7ff f88d 	bl	8000b9c <HAL_GetTick>
 8001a82:	0002      	movs	r2, r0
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	4a42      	ldr	r2, [pc, #264]	@ (8001b94 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d904      	bls.n	8001a98 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 8001a8e:	2313      	movs	r3, #19
 8001a90:	18fb      	adds	r3, r7, r3
 8001a92:	2203      	movs	r2, #3
 8001a94:	701a      	strb	r2, [r3, #0]
          break;
 8001a96:	e004      	b.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a98:	4b3b      	ldr	r3, [pc, #236]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9c:	2202      	movs	r2, #2
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	d0ed      	beq.n	8001a7e <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 8001aa2:	2313      	movs	r3, #19
 8001aa4:	18fb      	adds	r3, r7, r3
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d10a      	bne.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001aac:	4b36      	ldr	r3, [pc, #216]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001aae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab0:	4a36      	ldr	r2, [pc, #216]	@ (8001b8c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699a      	ldr	r2, [r3, #24]
 8001aba:	4b33      	ldr	r3, [pc, #204]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001abc:	430a      	orrs	r2, r1
 8001abe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001ac0:	e005      	b.n	8001ace <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ac2:	2312      	movs	r3, #18
 8001ac4:	18fb      	adds	r3, r7, r3
 8001ac6:	2213      	movs	r2, #19
 8001ac8:	18ba      	adds	r2, r7, r2
 8001aca:	7812      	ldrb	r2, [r2, #0]
 8001acc:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001ace:	2311      	movs	r3, #17
 8001ad0:	18fb      	adds	r3, r7, r3
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ad8:	4b2b      	ldr	r3, [pc, #172]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ada:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001adc:	4b2a      	ldr	r3, [pc, #168]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001ade:	492e      	ldr	r1, [pc, #184]	@ (8001b98 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001ae0:	400a      	ands	r2, r1
 8001ae2:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	2201      	movs	r2, #1
 8001aea:	4013      	ands	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001aee:	4b26      	ldr	r3, [pc, #152]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001af0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001af2:	2203      	movs	r2, #3
 8001af4:	4393      	bics	r3, r2
 8001af6:	0019      	movs	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	689a      	ldr	r2, [r3, #8]
 8001afc:	4b22      	ldr	r3, [pc, #136]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001afe:	430a      	orrs	r2, r1
 8001b00:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2202      	movs	r2, #2
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d009      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b10:	4a22      	ldr	r2, [pc, #136]	@ (8001b9c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	0019      	movs	r1, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2220      	movs	r2, #32
 8001b26:	4013      	ands	r3, r2
 8001b28:	d008      	beq.n	8001b3c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001b2a:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	0899      	lsrs	r1, r3, #2
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	695a      	ldr	r2, [r3, #20]
 8001b36:	4b14      	ldr	r3, [pc, #80]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2204      	movs	r2, #4
 8001b42:	4013      	ands	r3, r2
 8001b44:	d009      	beq.n	8001b5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001b46:	4b10      	ldr	r3, [pc, #64]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b4a:	4a15      	ldr	r2, [pc, #84]	@ (8001ba0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	0019      	movs	r1, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691a      	ldr	r2, [r3, #16]
 8001b54:	4b0c      	ldr	r3, [pc, #48]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b56:	430a      	orrs	r2, r1
 8001b58:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2280      	movs	r2, #128	@ 0x80
 8001b60:	4013      	ands	r3, r2
 8001b62:	d009      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001b64:	4b08      	ldr	r3, [pc, #32]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	22e0      	movs	r2, #224	@ 0xe0
 8001b6a:	4393      	bics	r3, r2
 8001b6c:	0019      	movs	r1, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4b05      	ldr	r3, [pc, #20]	@ (8001b88 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001b74:	430a      	orrs	r2, r1
 8001b76:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001b78:	2312      	movs	r3, #18
 8001b7a:	18fb      	adds	r3, r7, r3
 8001b7c:	781b      	ldrb	r3, [r3, #0]
}
 8001b7e:	0018      	movs	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	b006      	add	sp, #24
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	46c0      	nop			@ (mov r8, r8)
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	fffffcff 	.word	0xfffffcff
 8001b90:	fffeffff 	.word	0xfffeffff
 8001b94:	00001388 	.word	0x00001388
 8001b98:	efffffff 	.word	0xefffffff
 8001b9c:	ffffcfff 	.word	0xffffcfff
 8001ba0:	ffff3fff 	.word	0xffff3fff

08001ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e04a      	b.n	8001c4c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	223d      	movs	r2, #61	@ 0x3d
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d107      	bne.n	8001bd2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	223c      	movs	r2, #60	@ 0x3c
 8001bc6:	2100      	movs	r1, #0
 8001bc8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	0018      	movs	r0, r3
 8001bce:	f7fe fe5b 	bl	8000888 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223d      	movs	r2, #61	@ 0x3d
 8001bd6:	2102      	movs	r1, #2
 8001bd8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3304      	adds	r3, #4
 8001be2:	0019      	movs	r1, r3
 8001be4:	0010      	movs	r0, r2
 8001be6:	f000 f9ab 	bl	8001f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2248      	movs	r2, #72	@ 0x48
 8001bee:	2101      	movs	r1, #1
 8001bf0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	223e      	movs	r2, #62	@ 0x3e
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	223f      	movs	r2, #63	@ 0x3f
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2240      	movs	r2, #64	@ 0x40
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2241      	movs	r2, #65	@ 0x41
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2242      	movs	r2, #66	@ 0x42
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2243      	movs	r2, #67	@ 0x43
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2244      	movs	r2, #68	@ 0x44
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2245      	movs	r2, #69	@ 0x45
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2246      	movs	r2, #70	@ 0x46
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2247      	movs	r2, #71	@ 0x47
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	223d      	movs	r2, #61	@ 0x3d
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	0018      	movs	r0, r3
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	b002      	add	sp, #8
 8001c52:	bd80      	pop	{r7, pc}

08001c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	223d      	movs	r2, #61	@ 0x3d
 8001c60:	5c9b      	ldrb	r3, [r3, r2]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d001      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e037      	b.n	8001cdc <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	223d      	movs	r2, #61	@ 0x3d
 8001c70:	2102      	movs	r1, #2
 8001c72:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2101      	movs	r1, #1
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_TIM_Base_Start_IT+0x90>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0x44>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <HAL_TIM_Base_Start_IT+0x94>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d116      	bne.n	8001cc6 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <HAL_TIM_Base_Start_IT+0x98>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d016      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x84>
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d011      	beq.n	8001cd8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	e008      	b.n	8001cd8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e000      	b.n	8001cda <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	00010007 	.word	0x00010007

08001cf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	d021      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2202      	movs	r2, #2
 8001d14:	4013      	ands	r3, r2
 8001d16:	d01d      	beq.n	8001d54 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2203      	movs	r2, #3
 8001d1e:	4252      	negs	r2, r2
 8001d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	2203      	movs	r2, #3
 8001d30:	4013      	ands	r3, r2
 8001d32:	d004      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	0018      	movs	r0, r3
 8001d38:	f000 f8ea 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e007      	b.n	8001d4e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	0018      	movs	r0, r3
 8001d42:	f000 f8dd 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f8e9 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2204      	movs	r2, #4
 8001d58:	4013      	ands	r3, r2
 8001d5a:	d022      	beq.n	8001da2 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2204      	movs	r2, #4
 8001d60:	4013      	ands	r3, r2
 8001d62:	d01e      	beq.n	8001da2 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2205      	movs	r2, #5
 8001d6a:	4252      	negs	r2, r2
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699a      	ldr	r2, [r3, #24]
 8001d7a:	23c0      	movs	r3, #192	@ 0xc0
 8001d7c:	009b      	lsls	r3, r3, #2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	d004      	beq.n	8001d8c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 f8c3 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001d8a:	e007      	b.n	8001d9c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	0018      	movs	r0, r3
 8001d90:	f000 f8b6 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	0018      	movs	r0, r3
 8001d98:	f000 f8c2 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	2208      	movs	r2, #8
 8001da6:	4013      	ands	r3, r2
 8001da8:	d021      	beq.n	8001dee <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2208      	movs	r2, #8
 8001dae:	4013      	ands	r3, r2
 8001db0:	d01d      	beq.n	8001dee <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	2209      	movs	r2, #9
 8001db8:	4252      	negs	r2, r2
 8001dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2204      	movs	r2, #4
 8001dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	69db      	ldr	r3, [r3, #28]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	d004      	beq.n	8001dd8 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	0018      	movs	r0, r3
 8001dd2:	f000 f89d 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001dd6:	e007      	b.n	8001de8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f890 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	0018      	movs	r0, r3
 8001de4:	f000 f89c 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dee:	68bb      	ldr	r3, [r7, #8]
 8001df0:	2210      	movs	r2, #16
 8001df2:	4013      	ands	r3, r2
 8001df4:	d022      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2210      	movs	r2, #16
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d01e      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2211      	movs	r2, #17
 8001e04:	4252      	negs	r2, r2
 8001e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2208      	movs	r2, #8
 8001e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	69da      	ldr	r2, [r3, #28]
 8001e14:	23c0      	movs	r3, #192	@ 0xc0
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d004      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	0018      	movs	r0, r3
 8001e20:	f000 f876 	bl	8001f10 <HAL_TIM_IC_CaptureCallback>
 8001e24:	e007      	b.n	8001e36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f000 f869 	bl	8001f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 f875 	bl	8001f20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	4013      	ands	r3, r2
 8001e42:	d00c      	beq.n	8001e5e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2201      	movs	r2, #1
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d008      	beq.n	8001e5e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2202      	movs	r2, #2
 8001e52:	4252      	negs	r2, r2
 8001e54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	0018      	movs	r0, r3
 8001e5a:	f7fe fcd9 	bl	8000810 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	2280      	movs	r2, #128	@ 0x80
 8001e62:	4013      	ands	r3, r2
 8001e64:	d104      	bne.n	8001e70 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001e66:	68ba      	ldr	r2, [r7, #8]
 8001e68:	2380      	movs	r3, #128	@ 0x80
 8001e6a:	019b      	lsls	r3, r3, #6
 8001e6c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001e6e:	d00b      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2280      	movs	r2, #128	@ 0x80
 8001e74:	4013      	ands	r3, r2
 8001e76:	d007      	beq.n	8001e88 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <HAL_TIM_IRQHandler+0x208>)
 8001e7e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	0018      	movs	r0, r3
 8001e84:	f000 f8de 	bl	8002044 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001e88:	68ba      	ldr	r2, [r7, #8]
 8001e8a:	2380      	movs	r3, #128	@ 0x80
 8001e8c:	005b      	lsls	r3, r3, #1
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d00b      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2280      	movs	r2, #128	@ 0x80
 8001e96:	4013      	ands	r3, r2
 8001e98:	d007      	beq.n	8001eaa <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_TIM_IRQHandler+0x20c>)
 8001ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	f000 f8d5 	bl	8002054 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2240      	movs	r2, #64	@ 0x40
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d00c      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2240      	movs	r2, #64	@ 0x40
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d008      	beq.n	8001ecc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2241      	movs	r2, #65	@ 0x41
 8001ec0:	4252      	negs	r2, r2
 8001ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f000 f832 	bl	8001f30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	2220      	movs	r2, #32
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	d00c      	beq.n	8001eee <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	2220      	movs	r2, #32
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d008      	beq.n	8001eee <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2221      	movs	r2, #33	@ 0x21
 8001ee2:	4252      	negs	r2, r2
 8001ee4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	0018      	movs	r0, r3
 8001eea:	f000 f8a3 	bl	8002034 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001eee:	46c0      	nop			@ (mov r8, r8)
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	b004      	add	sp, #16
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	ffffdf7f 	.word	0xffffdf7f
 8001efc:	fffffeff 	.word	0xfffffeff

08001f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f08:	46c0      	nop			@ (mov r8, r8)
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	b002      	add	sp, #8
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f18:	46c0      	nop			@ (mov r8, r8)
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	b002      	add	sp, #8
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f28:	46c0      	nop			@ (mov r8, r8)
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b002      	add	sp, #8
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f38:	46c0      	nop			@ (mov r8, r8)
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	b002      	add	sp, #8
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4a32      	ldr	r2, [pc, #200]	@ (800201c <TIM_Base_SetConfig+0xdc>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d003      	beq.n	8001f60 <TIM_Base_SetConfig+0x20>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	4a31      	ldr	r2, [pc, #196]	@ (8002020 <TIM_Base_SetConfig+0xe0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d108      	bne.n	8001f72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	2270      	movs	r2, #112	@ 0x70
 8001f64:	4393      	bics	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	68fa      	ldr	r2, [r7, #12]
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a29      	ldr	r2, [pc, #164]	@ (800201c <TIM_Base_SetConfig+0xdc>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00f      	beq.n	8001f9a <TIM_Base_SetConfig+0x5a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a28      	ldr	r2, [pc, #160]	@ (8002020 <TIM_Base_SetConfig+0xe0>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <TIM_Base_SetConfig+0x5a>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <TIM_Base_SetConfig+0xe4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <TIM_Base_SetConfig+0x5a>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a26      	ldr	r2, [pc, #152]	@ (8002028 <TIM_Base_SetConfig+0xe8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <TIM_Base_SetConfig+0x5a>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a25      	ldr	r2, [pc, #148]	@ (800202c <TIM_Base_SetConfig+0xec>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d108      	bne.n	8001fac <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a24      	ldr	r2, [pc, #144]	@ (8002030 <TIM_Base_SetConfig+0xf0>)
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68db      	ldr	r3, [r3, #12]
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2280      	movs	r2, #128	@ 0x80
 8001fb0:	4393      	bics	r3, r2
 8001fb2:	001a      	movs	r2, r3
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	68fa      	ldr	r2, [r7, #12]
 8001fc0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a11      	ldr	r2, [pc, #68]	@ (800201c <TIM_Base_SetConfig+0xdc>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <TIM_Base_SetConfig+0xaa>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a12      	ldr	r2, [pc, #72]	@ (8002028 <TIM_Base_SetConfig+0xe8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d003      	beq.n	8001fea <TIM_Base_SetConfig+0xaa>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a11      	ldr	r2, [pc, #68]	@ (800202c <TIM_Base_SetConfig+0xec>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d103      	bne.n	8001ff2 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	4013      	ands	r3, r2
 8002000:	2b01      	cmp	r3, #1
 8002002:	d106      	bne.n	8002012 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	691b      	ldr	r3, [r3, #16]
 8002008:	2201      	movs	r2, #1
 800200a:	4393      	bics	r3, r2
 800200c:	001a      	movs	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
  }
}
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b004      	add	sp, #16
 8002018:	bd80      	pop	{r7, pc}
 800201a:	46c0      	nop			@ (mov r8, r8)
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40000400 	.word	0x40000400
 8002024:	40002000 	.word	0x40002000
 8002028:	40014400 	.word	0x40014400
 800202c:	40014800 	.word	0x40014800
 8002030:	fffffcff 	.word	0xfffffcff

08002034 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800203c:	46c0      	nop			@ (mov r8, r8)
 800203e:	46bd      	mov	sp, r7
 8002040:	b002      	add	sp, #8
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800204c:	46c0      	nop			@ (mov r8, r8)
 800204e:	46bd      	mov	sp, r7
 8002050:	b002      	add	sp, #8
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800205c:	46c0      	nop			@ (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b002      	add	sp, #8
 8002062:	bd80      	pop	{r7, pc}

08002064 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d101      	bne.n	8002076 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	e04e      	b.n	8002114 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2288      	movs	r2, #136	@ 0x88
 800207a:	589b      	ldr	r3, [r3, r2]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d107      	bne.n	8002090 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2284      	movs	r2, #132	@ 0x84
 8002084:	2100      	movs	r1, #0
 8002086:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0018      	movs	r0, r3
 800208c:	f7fe fc24 	bl	80008d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2288      	movs	r2, #136	@ 0x88
 8002094:	2124      	movs	r1, #36	@ 0x24
 8002096:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	2101      	movs	r1, #1
 80020a4:	438a      	bics	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d003      	beq.n	80020b8 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	0018      	movs	r0, r3
 80020b4:	f000 fdbc 	bl	8002c30 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 fc3a 	bl	8002934 <UART_SetConfig>
 80020c0:	0003      	movs	r3, r0
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e024      	b.n	8002114 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	685a      	ldr	r2, [r3, #4]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4911      	ldr	r1, [pc, #68]	@ (800211c <HAL_HalfDuplex_Init+0xb8>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	689a      	ldr	r2, [r3, #8]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2122      	movs	r1, #34	@ 0x22
 80020e6:	438a      	bics	r2, r1
 80020e8:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2108      	movs	r1, #8
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	430a      	orrs	r2, r1
 8002108:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	0018      	movs	r0, r3
 800210e:	f000 fe43 	bl	8002d98 <UART_CheckIdleState>
 8002112:	0003      	movs	r3, r0
}
 8002114:	0018      	movs	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}
 800211c:	ffffb7ff 	.word	0xffffb7ff

08002120 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08c      	sub	sp, #48	@ 0x30
 8002124:	af00      	add	r7, sp, #0
 8002126:	60f8      	str	r0, [r7, #12]
 8002128:	60b9      	str	r1, [r7, #8]
 800212a:	1dbb      	adds	r3, r7, #6
 800212c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2288      	movs	r2, #136	@ 0x88
 8002132:	589b      	ldr	r3, [r3, r2]
 8002134:	2b20      	cmp	r3, #32
 8002136:	d000      	beq.n	800213a <HAL_UART_Transmit_IT+0x1a>
 8002138:	e08d      	b.n	8002256 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d003      	beq.n	8002148 <HAL_UART_Transmit_IT+0x28>
 8002140:	1dbb      	adds	r3, r7, #6
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d101      	bne.n	800214c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e085      	b.n	8002258 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	2380      	movs	r3, #128	@ 0x80
 8002152:	015b      	lsls	r3, r3, #5
 8002154:	429a      	cmp	r2, r3
 8002156:	d109      	bne.n	800216c <HAL_UART_Transmit_IT+0x4c>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d105      	bne.n	800216c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	2201      	movs	r2, #1
 8002164:	4013      	ands	r3, r2
 8002166:	d001      	beq.n	800216c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e075      	b.n	8002258 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	68ba      	ldr	r2, [r7, #8]
 8002170:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1dba      	adds	r2, r7, #6
 8002176:	2154      	movs	r1, #84	@ 0x54
 8002178:	8812      	ldrh	r2, [r2, #0]
 800217a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	1dba      	adds	r2, r7, #6
 8002180:	2156      	movs	r1, #86	@ 0x56
 8002182:	8812      	ldrh	r2, [r2, #0]
 8002184:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2200      	movs	r2, #0
 800218a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2290      	movs	r2, #144	@ 0x90
 8002190:	2100      	movs	r1, #0
 8002192:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2288      	movs	r2, #136	@ 0x88
 8002198:	2121      	movs	r1, #33	@ 0x21
 800219a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	059b      	lsls	r3, r3, #22
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d12a      	bne.n	80021fe <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	2380      	movs	r3, #128	@ 0x80
 80021ae:	015b      	lsls	r3, r3, #5
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d107      	bne.n	80021c4 <HAL_UART_Transmit_IT+0xa4>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	691b      	ldr	r3, [r3, #16]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d103      	bne.n	80021c4 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4a28      	ldr	r2, [pc, #160]	@ (8002260 <HAL_UART_Transmit_IT+0x140>)
 80021c0:	679a      	str	r2, [r3, #120]	@ 0x78
 80021c2:	e002      	b.n	80021ca <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	4a27      	ldr	r2, [pc, #156]	@ (8002264 <HAL_UART_Transmit_IT+0x144>)
 80021c8:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80021ca:	f3ef 8310 	mrs	r3, PRIMASK
 80021ce:	61fb      	str	r3, [r7, #28]
  return(result);
 80021d0:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80021d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021d4:	2301      	movs	r3, #1
 80021d6:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f383 8810 	msr	PRIMASK, r3
}
 80021de:	46c0      	nop			@ (mov r8, r8)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2180      	movs	r1, #128	@ 0x80
 80021ec:	0409      	lsls	r1, r1, #16
 80021ee:	430a      	orrs	r2, r1
 80021f0:	609a      	str	r2, [r3, #8]
 80021f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	f383 8810 	msr	PRIMASK, r3
}
 80021fc:	e029      	b.n	8002252 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	689a      	ldr	r2, [r3, #8]
 8002202:	2380      	movs	r3, #128	@ 0x80
 8002204:	015b      	lsls	r3, r3, #5
 8002206:	429a      	cmp	r2, r3
 8002208:	d107      	bne.n	800221a <HAL_UART_Transmit_IT+0xfa>
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d103      	bne.n	800221a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	4a14      	ldr	r2, [pc, #80]	@ (8002268 <HAL_UART_Transmit_IT+0x148>)
 8002216:	679a      	str	r2, [r3, #120]	@ 0x78
 8002218:	e002      	b.n	8002220 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a13      	ldr	r2, [pc, #76]	@ (800226c <HAL_UART_Transmit_IT+0x14c>)
 800221e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002220:	f3ef 8310 	mrs	r3, PRIMASK
 8002224:	613b      	str	r3, [r7, #16]
  return(result);
 8002226:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002228:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800222a:	2301      	movs	r3, #1
 800222c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	f383 8810 	msr	PRIMASK, r3
}
 8002234:	46c0      	nop			@ (mov r8, r8)
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681a      	ldr	r2, [r3, #0]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2180      	movs	r1, #128	@ 0x80
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]
 8002246:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002248:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800224a:	69bb      	ldr	r3, [r7, #24]
 800224c:	f383 8810 	msr	PRIMASK, r3
}
 8002250:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8002252:	2300      	movs	r3, #0
 8002254:	e000      	b.n	8002258 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002256:	2302      	movs	r3, #2
  }
}
 8002258:	0018      	movs	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	b00c      	add	sp, #48	@ 0x30
 800225e:	bd80      	pop	{r7, pc}
 8002260:	0800331d 	.word	0x0800331d
 8002264:	08003231 	.word	0x08003231
 8002268:	08003173 	.word	0x08003173
 800226c:	080030bf 	.word	0x080030bf

08002270 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002270:	b5b0      	push	{r4, r5, r7, lr}
 8002272:	b0aa      	sub	sp, #168	@ 0xa8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	22a4      	movs	r2, #164	@ 0xa4
 8002280:	18b9      	adds	r1, r7, r2
 8002282:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	20a0      	movs	r0, #160	@ 0xa0
 800228c:	1839      	adds	r1, r7, r0
 800228e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	249c      	movs	r4, #156	@ 0x9c
 8002298:	1939      	adds	r1, r7, r4
 800229a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800229c:	0011      	movs	r1, r2
 800229e:	18bb      	adds	r3, r7, r2
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4aa2      	ldr	r2, [pc, #648]	@ (800252c <HAL_UART_IRQHandler+0x2bc>)
 80022a4:	4013      	ands	r3, r2
 80022a6:	2298      	movs	r2, #152	@ 0x98
 80022a8:	18bd      	adds	r5, r7, r2
 80022aa:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80022ac:	18bb      	adds	r3, r7, r2
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d11a      	bne.n	80022ea <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80022b4:	187b      	adds	r3, r7, r1
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2220      	movs	r2, #32
 80022ba:	4013      	ands	r3, r2
 80022bc:	d015      	beq.n	80022ea <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80022be:	183b      	adds	r3, r7, r0
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2220      	movs	r2, #32
 80022c4:	4013      	ands	r3, r2
 80022c6:	d105      	bne.n	80022d4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80022c8:	193b      	adds	r3, r7, r4
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	2380      	movs	r3, #128	@ 0x80
 80022ce:	055b      	lsls	r3, r3, #21
 80022d0:	4013      	ands	r3, r2
 80022d2:	d00a      	beq.n	80022ea <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d100      	bne.n	80022de <HAL_UART_IRQHandler+0x6e>
 80022dc:	e2fb      	b.n	80028d6 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	0010      	movs	r0, r2
 80022e6:	4798      	blx	r3
      }
      return;
 80022e8:	e2f5      	b.n	80028d6 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80022ea:	2398      	movs	r3, #152	@ 0x98
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d100      	bne.n	80022f6 <HAL_UART_IRQHandler+0x86>
 80022f4:	e122      	b.n	800253c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80022f6:	239c      	movs	r3, #156	@ 0x9c
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a8c      	ldr	r2, [pc, #560]	@ (8002530 <HAL_UART_IRQHandler+0x2c0>)
 80022fe:	4013      	ands	r3, r2
 8002300:	d106      	bne.n	8002310 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002302:	23a0      	movs	r3, #160	@ 0xa0
 8002304:	18fb      	adds	r3, r7, r3
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a8a      	ldr	r2, [pc, #552]	@ (8002534 <HAL_UART_IRQHandler+0x2c4>)
 800230a:	4013      	ands	r3, r2
 800230c:	d100      	bne.n	8002310 <HAL_UART_IRQHandler+0xa0>
 800230e:	e115      	b.n	800253c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002310:	23a4      	movs	r3, #164	@ 0xa4
 8002312:	18fb      	adds	r3, r7, r3
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	2201      	movs	r2, #1
 8002318:	4013      	ands	r3, r2
 800231a:	d012      	beq.n	8002342 <HAL_UART_IRQHandler+0xd2>
 800231c:	23a0      	movs	r3, #160	@ 0xa0
 800231e:	18fb      	adds	r3, r7, r3
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	2380      	movs	r3, #128	@ 0x80
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4013      	ands	r3, r2
 8002328:	d00b      	beq.n	8002342 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2290      	movs	r2, #144	@ 0x90
 8002336:	589b      	ldr	r3, [r3, r2]
 8002338:	2201      	movs	r2, #1
 800233a:	431a      	orrs	r2, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2190      	movs	r1, #144	@ 0x90
 8002340:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002342:	23a4      	movs	r3, #164	@ 0xa4
 8002344:	18fb      	adds	r3, r7, r3
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2202      	movs	r2, #2
 800234a:	4013      	ands	r3, r2
 800234c:	d011      	beq.n	8002372 <HAL_UART_IRQHandler+0x102>
 800234e:	239c      	movs	r3, #156	@ 0x9c
 8002350:	18fb      	adds	r3, r7, r3
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2201      	movs	r2, #1
 8002356:	4013      	ands	r3, r2
 8002358:	d00b      	beq.n	8002372 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2202      	movs	r2, #2
 8002360:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2290      	movs	r2, #144	@ 0x90
 8002366:	589b      	ldr	r3, [r3, r2]
 8002368:	2204      	movs	r2, #4
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2190      	movs	r1, #144	@ 0x90
 8002370:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002372:	23a4      	movs	r3, #164	@ 0xa4
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	2204      	movs	r2, #4
 800237a:	4013      	ands	r3, r2
 800237c:	d011      	beq.n	80023a2 <HAL_UART_IRQHandler+0x132>
 800237e:	239c      	movs	r3, #156	@ 0x9c
 8002380:	18fb      	adds	r3, r7, r3
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2201      	movs	r2, #1
 8002386:	4013      	ands	r3, r2
 8002388:	d00b      	beq.n	80023a2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2204      	movs	r2, #4
 8002390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2290      	movs	r2, #144	@ 0x90
 8002396:	589b      	ldr	r3, [r3, r2]
 8002398:	2202      	movs	r2, #2
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2190      	movs	r1, #144	@ 0x90
 80023a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80023a2:	23a4      	movs	r3, #164	@ 0xa4
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2208      	movs	r2, #8
 80023aa:	4013      	ands	r3, r2
 80023ac:	d017      	beq.n	80023de <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80023ae:	23a0      	movs	r3, #160	@ 0xa0
 80023b0:	18fb      	adds	r3, r7, r3
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2220      	movs	r2, #32
 80023b6:	4013      	ands	r3, r2
 80023b8:	d105      	bne.n	80023c6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80023ba:	239c      	movs	r3, #156	@ 0x9c
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5b      	ldr	r2, [pc, #364]	@ (8002530 <HAL_UART_IRQHandler+0x2c0>)
 80023c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80023c4:	d00b      	beq.n	80023de <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2208      	movs	r2, #8
 80023cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2290      	movs	r2, #144	@ 0x90
 80023d2:	589b      	ldr	r3, [r3, r2]
 80023d4:	2208      	movs	r2, #8
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2190      	movs	r1, #144	@ 0x90
 80023dc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023de:	23a4      	movs	r3, #164	@ 0xa4
 80023e0:	18fb      	adds	r3, r7, r3
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	@ 0x80
 80023e6:	011b      	lsls	r3, r3, #4
 80023e8:	4013      	ands	r3, r2
 80023ea:	d013      	beq.n	8002414 <HAL_UART_IRQHandler+0x1a4>
 80023ec:	23a0      	movs	r3, #160	@ 0xa0
 80023ee:	18fb      	adds	r3, r7, r3
 80023f0:	681a      	ldr	r2, [r3, #0]
 80023f2:	2380      	movs	r3, #128	@ 0x80
 80023f4:	04db      	lsls	r3, r3, #19
 80023f6:	4013      	ands	r3, r2
 80023f8:	d00c      	beq.n	8002414 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2280      	movs	r2, #128	@ 0x80
 8002400:	0112      	lsls	r2, r2, #4
 8002402:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2290      	movs	r2, #144	@ 0x90
 8002408:	589b      	ldr	r3, [r3, r2]
 800240a:	2220      	movs	r2, #32
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2190      	movs	r1, #144	@ 0x90
 8002412:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2290      	movs	r2, #144	@ 0x90
 8002418:	589b      	ldr	r3, [r3, r2]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d100      	bne.n	8002420 <HAL_UART_IRQHandler+0x1b0>
 800241e:	e25c      	b.n	80028da <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002420:	23a4      	movs	r3, #164	@ 0xa4
 8002422:	18fb      	adds	r3, r7, r3
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	2220      	movs	r2, #32
 8002428:	4013      	ands	r3, r2
 800242a:	d015      	beq.n	8002458 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800242c:	23a0      	movs	r3, #160	@ 0xa0
 800242e:	18fb      	adds	r3, r7, r3
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	2220      	movs	r2, #32
 8002434:	4013      	ands	r3, r2
 8002436:	d106      	bne.n	8002446 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002438:	239c      	movs	r3, #156	@ 0x9c
 800243a:	18fb      	adds	r3, r7, r3
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	2380      	movs	r3, #128	@ 0x80
 8002440:	055b      	lsls	r3, r3, #21
 8002442:	4013      	ands	r3, r2
 8002444:	d008      	beq.n	8002458 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800244a:	2b00      	cmp	r3, #0
 800244c:	d004      	beq.n	8002458 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	0010      	movs	r0, r2
 8002456:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2290      	movs	r2, #144	@ 0x90
 800245c:	589b      	ldr	r3, [r3, r2]
 800245e:	2194      	movs	r1, #148	@ 0x94
 8002460:	187a      	adds	r2, r7, r1
 8002462:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2240      	movs	r2, #64	@ 0x40
 800246c:	4013      	ands	r3, r2
 800246e:	2b40      	cmp	r3, #64	@ 0x40
 8002470:	d004      	beq.n	800247c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002472:	187b      	adds	r3, r7, r1
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2228      	movs	r2, #40	@ 0x28
 8002478:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800247a:	d04c      	beq.n	8002516 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0018      	movs	r0, r3
 8002480:	f000 fda4 	bl	8002fcc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	2240      	movs	r2, #64	@ 0x40
 800248c:	4013      	ands	r3, r2
 800248e:	2b40      	cmp	r3, #64	@ 0x40
 8002490:	d13c      	bne.n	800250c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002492:	f3ef 8310 	mrs	r3, PRIMASK
 8002496:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002498:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800249a:	2090      	movs	r0, #144	@ 0x90
 800249c:	183a      	adds	r2, r7, r0
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	2301      	movs	r3, #1
 80024a2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024a6:	f383 8810 	msr	PRIMASK, r3
}
 80024aa:	46c0      	nop			@ (mov r8, r8)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689a      	ldr	r2, [r3, #8]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2140      	movs	r1, #64	@ 0x40
 80024b8:	438a      	bics	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	183b      	adds	r3, r7, r0
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024c4:	f383 8810 	msr	PRIMASK, r3
}
 80024c8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2280      	movs	r2, #128	@ 0x80
 80024ce:	589b      	ldr	r3, [r3, r2]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d016      	beq.n	8002502 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2280      	movs	r2, #128	@ 0x80
 80024d8:	589b      	ldr	r3, [r3, r2]
 80024da:	4a17      	ldr	r2, [pc, #92]	@ (8002538 <HAL_UART_IRQHandler+0x2c8>)
 80024dc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2280      	movs	r2, #128	@ 0x80
 80024e2:	589b      	ldr	r3, [r3, r2]
 80024e4:	0018      	movs	r0, r3
 80024e6:	f7fe fcbf 	bl	8000e68 <HAL_DMA_Abort_IT>
 80024ea:	1e03      	subs	r3, r0, #0
 80024ec:	d01c      	beq.n	8002528 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2280      	movs	r2, #128	@ 0x80
 80024f2:	589b      	ldr	r3, [r3, r2]
 80024f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	2180      	movs	r1, #128	@ 0x80
 80024fa:	5852      	ldr	r2, [r2, r1]
 80024fc:	0010      	movs	r0, r2
 80024fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002500:	e012      	b.n	8002528 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	0018      	movs	r0, r3
 8002506:	f000 fa01 	bl	800290c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800250a:	e00d      	b.n	8002528 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	0018      	movs	r0, r3
 8002510:	f000 f9fc 	bl	800290c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002514:	e008      	b.n	8002528 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	0018      	movs	r0, r3
 800251a:	f000 f9f7 	bl	800290c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2290      	movs	r2, #144	@ 0x90
 8002522:	2100      	movs	r1, #0
 8002524:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002526:	e1d8      	b.n	80028da <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002528:	46c0      	nop			@ (mov r8, r8)
    return;
 800252a:	e1d6      	b.n	80028da <HAL_UART_IRQHandler+0x66a>
 800252c:	0000080f 	.word	0x0000080f
 8002530:	10000001 	.word	0x10000001
 8002534:	04000120 	.word	0x04000120
 8002538:	08003099 	.word	0x08003099

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002540:	2b01      	cmp	r3, #1
 8002542:	d000      	beq.n	8002546 <HAL_UART_IRQHandler+0x2d6>
 8002544:	e15d      	b.n	8002802 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002546:	23a4      	movs	r3, #164	@ 0xa4
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2210      	movs	r2, #16
 800254e:	4013      	ands	r3, r2
 8002550:	d100      	bne.n	8002554 <HAL_UART_IRQHandler+0x2e4>
 8002552:	e156      	b.n	8002802 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002554:	23a0      	movs	r3, #160	@ 0xa0
 8002556:	18fb      	adds	r3, r7, r3
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2210      	movs	r2, #16
 800255c:	4013      	ands	r3, r2
 800255e:	d100      	bne.n	8002562 <HAL_UART_IRQHandler+0x2f2>
 8002560:	e14f      	b.n	8002802 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2210      	movs	r2, #16
 8002568:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	2240      	movs	r2, #64	@ 0x40
 8002572:	4013      	ands	r3, r2
 8002574:	2b40      	cmp	r3, #64	@ 0x40
 8002576:	d000      	beq.n	800257a <HAL_UART_IRQHandler+0x30a>
 8002578:	e0c3      	b.n	8002702 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2280      	movs	r2, #128	@ 0x80
 800257e:	589b      	ldr	r3, [r3, r2]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	217e      	movs	r1, #126	@ 0x7e
 8002586:	187b      	adds	r3, r7, r1
 8002588:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800258a:	187b      	adds	r3, r7, r1
 800258c:	881b      	ldrh	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d100      	bne.n	8002594 <HAL_UART_IRQHandler+0x324>
 8002592:	e097      	b.n	80026c4 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	225c      	movs	r2, #92	@ 0x5c
 8002598:	5a9b      	ldrh	r3, [r3, r2]
 800259a:	187a      	adds	r2, r7, r1
 800259c:	8812      	ldrh	r2, [r2, #0]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d300      	bcc.n	80025a4 <HAL_UART_IRQHandler+0x334>
 80025a2:	e08f      	b.n	80026c4 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	187a      	adds	r2, r7, r1
 80025a8:	215e      	movs	r1, #94	@ 0x5e
 80025aa:	8812      	ldrh	r2, [r2, #0]
 80025ac:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2280      	movs	r2, #128	@ 0x80
 80025b2:	589b      	ldr	r3, [r3, r2]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2220      	movs	r2, #32
 80025ba:	4013      	ands	r3, r2
 80025bc:	d170      	bne.n	80026a0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025be:	f3ef 8310 	mrs	r3, PRIMASK
 80025c2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025c6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80025c8:	2301      	movs	r3, #1
 80025ca:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025ce:	f383 8810 	msr	PRIMASK, r3
}
 80025d2:	46c0      	nop			@ (mov r8, r8)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	49c4      	ldr	r1, [pc, #784]	@ (80028f0 <HAL_UART_IRQHandler+0x680>)
 80025e0:	400a      	ands	r2, r1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80025e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025ea:	f383 8810 	msr	PRIMASK, r3
}
 80025ee:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80025f0:	f3ef 8310 	mrs	r3, PRIMASK
 80025f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80025f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f8:	677b      	str	r3, [r7, #116]	@ 0x74
 80025fa:	2301      	movs	r3, #1
 80025fc:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80025fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002600:	f383 8810 	msr	PRIMASK, r3
}
 8002604:	46c0      	nop			@ (mov r8, r8)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689a      	ldr	r2, [r3, #8]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2101      	movs	r1, #1
 8002612:	438a      	bics	r2, r1
 8002614:	609a      	str	r2, [r3, #8]
 8002616:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002618:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800261a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800261c:	f383 8810 	msr	PRIMASK, r3
}
 8002620:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002622:	f3ef 8310 	mrs	r3, PRIMASK
 8002626:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002628:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800262a:	673b      	str	r3, [r7, #112]	@ 0x70
 800262c:	2301      	movs	r3, #1
 800262e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002630:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002632:	f383 8810 	msr	PRIMASK, r3
}
 8002636:	46c0      	nop			@ (mov r8, r8)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689a      	ldr	r2, [r3, #8]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2140      	movs	r1, #64	@ 0x40
 8002644:	438a      	bics	r2, r1
 8002646:	609a      	str	r2, [r3, #8]
 8002648:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800264a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800264c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800264e:	f383 8810 	msr	PRIMASK, r3
}
 8002652:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	228c      	movs	r2, #140	@ 0x8c
 8002658:	2120      	movs	r1, #32
 800265a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002662:	f3ef 8310 	mrs	r3, PRIMASK
 8002666:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002668:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800266a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800266c:	2301      	movs	r3, #1
 800266e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002670:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002672:	f383 8810 	msr	PRIMASK, r3
}
 8002676:	46c0      	nop			@ (mov r8, r8)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2110      	movs	r1, #16
 8002684:	438a      	bics	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
 8002688:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800268a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800268c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800268e:	f383 8810 	msr	PRIMASK, r3
}
 8002692:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2280      	movs	r2, #128	@ 0x80
 8002698:	589b      	ldr	r3, [r3, r2]
 800269a:	0018      	movs	r0, r3
 800269c:	f7fe fb82 	bl	8000da4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	225c      	movs	r2, #92	@ 0x5c
 80026aa:	5a9a      	ldrh	r2, [r3, r2]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	215e      	movs	r1, #94	@ 0x5e
 80026b0:	5a5b      	ldrh	r3, [r3, r1]
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0011      	movs	r1, r2
 80026bc:	0018      	movs	r0, r3
 80026be:	f000 f92d 	bl	800291c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80026c2:	e10c      	b.n	80028de <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	225c      	movs	r2, #92	@ 0x5c
 80026c8:	5a9b      	ldrh	r3, [r3, r2]
 80026ca:	227e      	movs	r2, #126	@ 0x7e
 80026cc:	18ba      	adds	r2, r7, r2
 80026ce:	8812      	ldrh	r2, [r2, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d000      	beq.n	80026d6 <HAL_UART_IRQHandler+0x466>
 80026d4:	e103      	b.n	80028de <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2280      	movs	r2, #128	@ 0x80
 80026da:	589b      	ldr	r3, [r3, r2]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2220      	movs	r2, #32
 80026e2:	4013      	ands	r3, r2
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d000      	beq.n	80026ea <HAL_UART_IRQHandler+0x47a>
 80026e8:	e0f9      	b.n	80028de <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2202      	movs	r2, #2
 80026ee:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	225c      	movs	r2, #92	@ 0x5c
 80026f4:	5a9a      	ldrh	r2, [r3, r2]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0011      	movs	r1, r2
 80026fa:	0018      	movs	r0, r3
 80026fc:	f000 f90e 	bl	800291c <HAL_UARTEx_RxEventCallback>
      return;
 8002700:	e0ed      	b.n	80028de <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	225c      	movs	r2, #92	@ 0x5c
 8002706:	5a99      	ldrh	r1, [r3, r2]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	225e      	movs	r2, #94	@ 0x5e
 800270c:	5a9b      	ldrh	r3, [r3, r2]
 800270e:	b29a      	uxth	r2, r3
 8002710:	208e      	movs	r0, #142	@ 0x8e
 8002712:	183b      	adds	r3, r7, r0
 8002714:	1a8a      	subs	r2, r1, r2
 8002716:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	225e      	movs	r2, #94	@ 0x5e
 800271c:	5a9b      	ldrh	r3, [r3, r2]
 800271e:	b29b      	uxth	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d100      	bne.n	8002726 <HAL_UART_IRQHandler+0x4b6>
 8002724:	e0dd      	b.n	80028e2 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8002726:	183b      	adds	r3, r7, r0
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d100      	bne.n	8002730 <HAL_UART_IRQHandler+0x4c0>
 800272e:	e0d8      	b.n	80028e2 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002730:	f3ef 8310 	mrs	r3, PRIMASK
 8002734:	60fb      	str	r3, [r7, #12]
  return(result);
 8002736:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002738:	2488      	movs	r4, #136	@ 0x88
 800273a:	193a      	adds	r2, r7, r4
 800273c:	6013      	str	r3, [r2, #0]
 800273e:	2301      	movs	r3, #1
 8002740:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	f383 8810 	msr	PRIMASK, r3
}
 8002748:	46c0      	nop			@ (mov r8, r8)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4967      	ldr	r1, [pc, #412]	@ (80028f4 <HAL_UART_IRQHandler+0x684>)
 8002756:	400a      	ands	r2, r1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	193b      	adds	r3, r7, r4
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	f383 8810 	msr	PRIMASK, r3
}
 8002766:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002768:	f3ef 8310 	mrs	r3, PRIMASK
 800276c:	61bb      	str	r3, [r7, #24]
  return(result);
 800276e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002770:	2484      	movs	r4, #132	@ 0x84
 8002772:	193a      	adds	r2, r7, r4
 8002774:	6013      	str	r3, [r2, #0]
 8002776:	2301      	movs	r3, #1
 8002778:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	f383 8810 	msr	PRIMASK, r3
}
 8002780:	46c0      	nop			@ (mov r8, r8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	495a      	ldr	r1, [pc, #360]	@ (80028f8 <HAL_UART_IRQHandler+0x688>)
 800278e:	400a      	ands	r2, r1
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	193b      	adds	r3, r7, r4
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002798:	6a3b      	ldr	r3, [r7, #32]
 800279a:	f383 8810 	msr	PRIMASK, r3
}
 800279e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	228c      	movs	r2, #140	@ 0x8c
 80027a4:	2120      	movs	r1, #32
 80027a6:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80027b4:	f3ef 8310 	mrs	r3, PRIMASK
 80027b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80027ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027bc:	2480      	movs	r4, #128	@ 0x80
 80027be:	193a      	adds	r2, r7, r4
 80027c0:	6013      	str	r3, [r2, #0]
 80027c2:	2301      	movs	r3, #1
 80027c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c8:	f383 8810 	msr	PRIMASK, r3
}
 80027cc:	46c0      	nop			@ (mov r8, r8)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2110      	movs	r1, #16
 80027da:	438a      	bics	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	193b      	adds	r3, r7, r4
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e6:	f383 8810 	msr	PRIMASK, r3
}
 80027ea:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2202      	movs	r2, #2
 80027f0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80027f2:	183b      	adds	r3, r7, r0
 80027f4:	881a      	ldrh	r2, [r3, #0]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0011      	movs	r1, r2
 80027fa:	0018      	movs	r0, r3
 80027fc:	f000 f88e 	bl	800291c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002800:	e06f      	b.n	80028e2 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002802:	23a4      	movs	r3, #164	@ 0xa4
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	035b      	lsls	r3, r3, #13
 800280c:	4013      	ands	r3, r2
 800280e:	d010      	beq.n	8002832 <HAL_UART_IRQHandler+0x5c2>
 8002810:	239c      	movs	r3, #156	@ 0x9c
 8002812:	18fb      	adds	r3, r7, r3
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	2380      	movs	r3, #128	@ 0x80
 8002818:	03db      	lsls	r3, r3, #15
 800281a:	4013      	ands	r3, r2
 800281c:	d009      	beq.n	8002832 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	2280      	movs	r2, #128	@ 0x80
 8002824:	0352      	lsls	r2, r2, #13
 8002826:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fe1c 	bl	8003468 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002830:	e05a      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002832:	23a4      	movs	r3, #164	@ 0xa4
 8002834:	18fb      	adds	r3, r7, r3
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	4013      	ands	r3, r2
 800283c:	d016      	beq.n	800286c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800283e:	23a0      	movs	r3, #160	@ 0xa0
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2280      	movs	r2, #128	@ 0x80
 8002846:	4013      	ands	r3, r2
 8002848:	d106      	bne.n	8002858 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800284a:	239c      	movs	r3, #156	@ 0x9c
 800284c:	18fb      	adds	r3, r7, r3
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	2380      	movs	r3, #128	@ 0x80
 8002852:	041b      	lsls	r3, r3, #16
 8002854:	4013      	ands	r3, r2
 8002856:	d009      	beq.n	800286c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800285c:	2b00      	cmp	r3, #0
 800285e:	d042      	beq.n	80028e6 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	0010      	movs	r0, r2
 8002868:	4798      	blx	r3
    }
    return;
 800286a:	e03c      	b.n	80028e6 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800286c:	23a4      	movs	r3, #164	@ 0xa4
 800286e:	18fb      	adds	r3, r7, r3
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	2240      	movs	r2, #64	@ 0x40
 8002874:	4013      	ands	r3, r2
 8002876:	d00a      	beq.n	800288e <HAL_UART_IRQHandler+0x61e>
 8002878:	23a0      	movs	r3, #160	@ 0xa0
 800287a:	18fb      	adds	r3, r7, r3
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	4013      	ands	r3, r2
 8002882:	d004      	beq.n	800288e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0018      	movs	r0, r3
 8002888:	f000 fdc2 	bl	8003410 <UART_EndTransmit_IT>
    return;
 800288c:	e02c      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800288e:	23a4      	movs	r3, #164	@ 0xa4
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	@ 0x80
 8002896:	041b      	lsls	r3, r3, #16
 8002898:	4013      	ands	r3, r2
 800289a:	d00b      	beq.n	80028b4 <HAL_UART_IRQHandler+0x644>
 800289c:	23a0      	movs	r3, #160	@ 0xa0
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	2380      	movs	r3, #128	@ 0x80
 80028a4:	05db      	lsls	r3, r3, #23
 80028a6:	4013      	ands	r3, r2
 80028a8:	d004      	beq.n	80028b4 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0018      	movs	r0, r3
 80028ae:	f000 fdeb 	bl	8003488 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028b2:	e019      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80028b4:	23a4      	movs	r3, #164	@ 0xa4
 80028b6:	18fb      	adds	r3, r7, r3
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	2380      	movs	r3, #128	@ 0x80
 80028bc:	045b      	lsls	r3, r3, #17
 80028be:	4013      	ands	r3, r2
 80028c0:	d012      	beq.n	80028e8 <HAL_UART_IRQHandler+0x678>
 80028c2:	23a0      	movs	r3, #160	@ 0xa0
 80028c4:	18fb      	adds	r3, r7, r3
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	da0d      	bge.n	80028e8 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f000 fdd2 	bl	8003478 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80028d4:	e008      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
      return;
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	e006      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
    return;
 80028da:	46c0      	nop			@ (mov r8, r8)
 80028dc:	e004      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
      return;
 80028de:	46c0      	nop			@ (mov r8, r8)
 80028e0:	e002      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
      return;
 80028e2:	46c0      	nop			@ (mov r8, r8)
 80028e4:	e000      	b.n	80028e8 <HAL_UART_IRQHandler+0x678>
    return;
 80028e6:	46c0      	nop			@ (mov r8, r8)
  }
}
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b02a      	add	sp, #168	@ 0xa8
 80028ec:	bdb0      	pop	{r4, r5, r7, pc}
 80028ee:	46c0      	nop			@ (mov r8, r8)
 80028f0:	fffffeff 	.word	0xfffffeff
 80028f4:	fffffedf 	.word	0xfffffedf
 80028f8:	effffffe 	.word	0xeffffffe

080028fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002904:	46c0      	nop			@ (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002914:	46c0      	nop			@ (mov r8, r8)
 8002916:	46bd      	mov	sp, r7
 8002918:	b002      	add	sp, #8
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	000a      	movs	r2, r1
 8002926:	1cbb      	adds	r3, r7, #2
 8002928:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800292a:	46c0      	nop			@ (mov r8, r8)
 800292c:	46bd      	mov	sp, r7
 800292e:	b002      	add	sp, #8
 8002930:	bd80      	pop	{r7, pc}
	...

08002934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800293c:	231e      	movs	r3, #30
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	69db      	ldr	r3, [r3, #28]
 8002958:	4313      	orrs	r3, r2
 800295a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4aab      	ldr	r2, [pc, #684]	@ (8002c10 <UART_SetConfig+0x2dc>)
 8002964:	4013      	ands	r3, r2
 8002966:	0019      	movs	r1, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	697a      	ldr	r2, [r7, #20]
 800296e:	430a      	orrs	r2, r1
 8002970:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	4aa6      	ldr	r2, [pc, #664]	@ (8002c14 <UART_SetConfig+0x2e0>)
 800297a:	4013      	ands	r3, r2
 800297c:	0019      	movs	r1, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	68da      	ldr	r2, [r3, #12]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	430a      	orrs	r2, r1
 8002988:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	697a      	ldr	r2, [r7, #20]
 8002996:	4313      	orrs	r3, r2
 8002998:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	4a9d      	ldr	r2, [pc, #628]	@ (8002c18 <UART_SetConfig+0x2e4>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	430a      	orrs	r2, r1
 80029ae:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b6:	220f      	movs	r2, #15
 80029b8:	4393      	bics	r3, r2
 80029ba:	0019      	movs	r1, r3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a93      	ldr	r2, [pc, #588]	@ (8002c1c <UART_SetConfig+0x2e8>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d127      	bne.n	8002a22 <UART_SetConfig+0xee>
 80029d2:	4b93      	ldr	r3, [pc, #588]	@ (8002c20 <UART_SetConfig+0x2ec>)
 80029d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029d6:	2203      	movs	r2, #3
 80029d8:	4013      	ands	r3, r2
 80029da:	2b03      	cmp	r3, #3
 80029dc:	d017      	beq.n	8002a0e <UART_SetConfig+0xda>
 80029de:	d81b      	bhi.n	8002a18 <UART_SetConfig+0xe4>
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d00a      	beq.n	80029fa <UART_SetConfig+0xc6>
 80029e4:	d818      	bhi.n	8002a18 <UART_SetConfig+0xe4>
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d002      	beq.n	80029f0 <UART_SetConfig+0xbc>
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d00a      	beq.n	8002a04 <UART_SetConfig+0xd0>
 80029ee:	e013      	b.n	8002a18 <UART_SetConfig+0xe4>
 80029f0:	231f      	movs	r3, #31
 80029f2:	18fb      	adds	r3, r7, r3
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
 80029f8:	e021      	b.n	8002a3e <UART_SetConfig+0x10a>
 80029fa:	231f      	movs	r3, #31
 80029fc:	18fb      	adds	r3, r7, r3
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]
 8002a02:	e01c      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a04:	231f      	movs	r3, #31
 8002a06:	18fb      	adds	r3, r7, r3
 8002a08:	2204      	movs	r2, #4
 8002a0a:	701a      	strb	r2, [r3, #0]
 8002a0c:	e017      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a0e:	231f      	movs	r3, #31
 8002a10:	18fb      	adds	r3, r7, r3
 8002a12:	2208      	movs	r2, #8
 8002a14:	701a      	strb	r2, [r3, #0]
 8002a16:	e012      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a18:	231f      	movs	r3, #31
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	701a      	strb	r2, [r3, #0]
 8002a20:	e00d      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a7f      	ldr	r2, [pc, #508]	@ (8002c24 <UART_SetConfig+0x2f0>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d104      	bne.n	8002a36 <UART_SetConfig+0x102>
 8002a2c:	231f      	movs	r3, #31
 8002a2e:	18fb      	adds	r3, r7, r3
 8002a30:	2200      	movs	r2, #0
 8002a32:	701a      	strb	r2, [r3, #0]
 8002a34:	e003      	b.n	8002a3e <UART_SetConfig+0x10a>
 8002a36:	231f      	movs	r3, #31
 8002a38:	18fb      	adds	r3, r7, r3
 8002a3a:	2210      	movs	r2, #16
 8002a3c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	69da      	ldr	r2, [r3, #28]
 8002a42:	2380      	movs	r3, #128	@ 0x80
 8002a44:	021b      	lsls	r3, r3, #8
 8002a46:	429a      	cmp	r2, r3
 8002a48:	d000      	beq.n	8002a4c <UART_SetConfig+0x118>
 8002a4a:	e06f      	b.n	8002b2c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002a4c:	231f      	movs	r3, #31
 8002a4e:	18fb      	adds	r3, r7, r3
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b08      	cmp	r3, #8
 8002a54:	d01f      	beq.n	8002a96 <UART_SetConfig+0x162>
 8002a56:	dc22      	bgt.n	8002a9e <UART_SetConfig+0x16a>
 8002a58:	2b04      	cmp	r3, #4
 8002a5a:	d017      	beq.n	8002a8c <UART_SetConfig+0x158>
 8002a5c:	dc1f      	bgt.n	8002a9e <UART_SetConfig+0x16a>
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <UART_SetConfig+0x134>
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d005      	beq.n	8002a72 <UART_SetConfig+0x13e>
 8002a66:	e01a      	b.n	8002a9e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a68:	f7fe ff98 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8002a6c:	0003      	movs	r3, r0
 8002a6e:	61bb      	str	r3, [r7, #24]
        break;
 8002a70:	e01c      	b.n	8002aac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002a72:	4b6b      	ldr	r3, [pc, #428]	@ (8002c20 <UART_SetConfig+0x2ec>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	095b      	lsrs	r3, r3, #5
 8002a78:	2207      	movs	r2, #7
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	0019      	movs	r1, r3
 8002a80:	4869      	ldr	r0, [pc, #420]	@ (8002c28 <UART_SetConfig+0x2f4>)
 8002a82:	f7fd fb41 	bl	8000108 <__udivsi3>
 8002a86:	0003      	movs	r3, r0
 8002a88:	61bb      	str	r3, [r7, #24]
        break;
 8002a8a:	e00f      	b.n	8002aac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a8c:	f7fe ff26 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8002a90:	0003      	movs	r3, r0
 8002a92:	61bb      	str	r3, [r7, #24]
        break;
 8002a94:	e00a      	b.n	8002aac <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a96:	2380      	movs	r3, #128	@ 0x80
 8002a98:	021b      	lsls	r3, r3, #8
 8002a9a:	61bb      	str	r3, [r7, #24]
        break;
 8002a9c:	e006      	b.n	8002aac <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aa2:	231e      	movs	r3, #30
 8002aa4:	18fb      	adds	r3, r7, r3
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	701a      	strb	r2, [r3, #0]
        break;
 8002aaa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d100      	bne.n	8002ab4 <UART_SetConfig+0x180>
 8002ab2:	e097      	b.n	8002be4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ab8:	4b5c      	ldr	r3, [pc, #368]	@ (8002c2c <UART_SetConfig+0x2f8>)
 8002aba:	0052      	lsls	r2, r2, #1
 8002abc:	5ad3      	ldrh	r3, [r2, r3]
 8002abe:	0019      	movs	r1, r3
 8002ac0:	69b8      	ldr	r0, [r7, #24]
 8002ac2:	f7fd fb21 	bl	8000108 <__udivsi3>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	005a      	lsls	r2, r3, #1
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	18d2      	adds	r2, r2, r3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f7fd fb15 	bl	8000108 <__udivsi3>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d91c      	bls.n	8002b22 <UART_SetConfig+0x1ee>
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	2380      	movs	r3, #128	@ 0x80
 8002aec:	025b      	lsls	r3, r3, #9
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d217      	bcs.n	8002b22 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	200e      	movs	r0, #14
 8002af8:	183b      	adds	r3, r7, r0
 8002afa:	210f      	movs	r1, #15
 8002afc:	438a      	bics	r2, r1
 8002afe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	085b      	lsrs	r3, r3, #1
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	2207      	movs	r2, #7
 8002b08:	4013      	ands	r3, r2
 8002b0a:	b299      	uxth	r1, r3
 8002b0c:	183b      	adds	r3, r7, r0
 8002b0e:	183a      	adds	r2, r7, r0
 8002b10:	8812      	ldrh	r2, [r2, #0]
 8002b12:	430a      	orrs	r2, r1
 8002b14:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	183a      	adds	r2, r7, r0
 8002b1c:	8812      	ldrh	r2, [r2, #0]
 8002b1e:	60da      	str	r2, [r3, #12]
 8002b20:	e060      	b.n	8002be4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002b22:	231e      	movs	r3, #30
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	2201      	movs	r2, #1
 8002b28:	701a      	strb	r2, [r3, #0]
 8002b2a:	e05b      	b.n	8002be4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	2b08      	cmp	r3, #8
 8002b34:	d01f      	beq.n	8002b76 <UART_SetConfig+0x242>
 8002b36:	dc22      	bgt.n	8002b7e <UART_SetConfig+0x24a>
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d017      	beq.n	8002b6c <UART_SetConfig+0x238>
 8002b3c:	dc1f      	bgt.n	8002b7e <UART_SetConfig+0x24a>
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d002      	beq.n	8002b48 <UART_SetConfig+0x214>
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d005      	beq.n	8002b52 <UART_SetConfig+0x21e>
 8002b46:	e01a      	b.n	8002b7e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b48:	f7fe ff28 	bl	800199c <HAL_RCC_GetPCLK1Freq>
 8002b4c:	0003      	movs	r3, r0
 8002b4e:	61bb      	str	r3, [r7, #24]
        break;
 8002b50:	e01c      	b.n	8002b8c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002b52:	4b33      	ldr	r3, [pc, #204]	@ (8002c20 <UART_SetConfig+0x2ec>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	095b      	lsrs	r3, r3, #5
 8002b58:	2207      	movs	r2, #7
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	0019      	movs	r1, r3
 8002b60:	4831      	ldr	r0, [pc, #196]	@ (8002c28 <UART_SetConfig+0x2f4>)
 8002b62:	f7fd fad1 	bl	8000108 <__udivsi3>
 8002b66:	0003      	movs	r3, r0
 8002b68:	61bb      	str	r3, [r7, #24]
        break;
 8002b6a:	e00f      	b.n	8002b8c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b6c:	f7fe feb6 	bl	80018dc <HAL_RCC_GetSysClockFreq>
 8002b70:	0003      	movs	r3, r0
 8002b72:	61bb      	str	r3, [r7, #24]
        break;
 8002b74:	e00a      	b.n	8002b8c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b76:	2380      	movs	r3, #128	@ 0x80
 8002b78:	021b      	lsls	r3, r3, #8
 8002b7a:	61bb      	str	r3, [r7, #24]
        break;
 8002b7c:	e006      	b.n	8002b8c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002b82:	231e      	movs	r3, #30
 8002b84:	18fb      	adds	r3, r7, r3
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
        break;
 8002b8a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d028      	beq.n	8002be4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002b96:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <UART_SetConfig+0x2f8>)
 8002b98:	0052      	lsls	r2, r2, #1
 8002b9a:	5ad3      	ldrh	r3, [r2, r3]
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	69b8      	ldr	r0, [r7, #24]
 8002ba0:	f7fd fab2 	bl	8000108 <__udivsi3>
 8002ba4:	0003      	movs	r3, r0
 8002ba6:	001a      	movs	r2, r3
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	085b      	lsrs	r3, r3, #1
 8002bae:	18d2      	adds	r2, r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	0019      	movs	r1, r3
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	f7fd faa6 	bl	8000108 <__udivsi3>
 8002bbc:	0003      	movs	r3, r0
 8002bbe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	2b0f      	cmp	r3, #15
 8002bc4:	d90a      	bls.n	8002bdc <UART_SetConfig+0x2a8>
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	2380      	movs	r3, #128	@ 0x80
 8002bca:	025b      	lsls	r3, r3, #9
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d205      	bcs.n	8002bdc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	60da      	str	r2, [r3, #12]
 8002bda:	e003      	b.n	8002be4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002bdc:	231e      	movs	r3, #30
 8002bde:	18fb      	adds	r3, r7, r3
 8002be0:	2201      	movs	r2, #1
 8002be2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	226a      	movs	r2, #106	@ 0x6a
 8002be8:	2101      	movs	r1, #1
 8002bea:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2268      	movs	r2, #104	@ 0x68
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002c00:	231e      	movs	r3, #30
 8002c02:	18fb      	adds	r3, r7, r3
 8002c04:	781b      	ldrb	r3, [r3, #0]
}
 8002c06:	0018      	movs	r0, r3
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	b008      	add	sp, #32
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	46c0      	nop			@ (mov r8, r8)
 8002c10:	cfff69f3 	.word	0xcfff69f3
 8002c14:	ffffcfff 	.word	0xffffcfff
 8002c18:	11fff4ff 	.word	0x11fff4ff
 8002c1c:	40013800 	.word	0x40013800
 8002c20:	40021000 	.word	0x40021000
 8002c24:	40004400 	.word	0x40004400
 8002c28:	02dc6c00 	.word	0x02dc6c00
 8002c2c:	0800379c 	.word	0x0800379c

08002c30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	2208      	movs	r2, #8
 8002c3e:	4013      	ands	r3, r2
 8002c40:	d00b      	beq.n	8002c5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	@ (8002d74 <UART_AdvFeatureConfig+0x144>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c5e:	2201      	movs	r2, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d00b      	beq.n	8002c7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	4a43      	ldr	r2, [pc, #268]	@ (8002d78 <UART_AdvFeatureConfig+0x148>)
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	0019      	movs	r1, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d00b      	beq.n	8002c9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d7c <UART_AdvFeatureConfig+0x14c>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	0019      	movs	r1, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d00b      	beq.n	8002cc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a34      	ldr	r2, [pc, #208]	@ (8002d80 <UART_AdvFeatureConfig+0x150>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	0019      	movs	r1, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc4:	2210      	movs	r2, #16
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d00b      	beq.n	8002ce2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002d84 <UART_AdvFeatureConfig+0x154>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	0019      	movs	r1, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	430a      	orrs	r2, r1
 8002ce0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	4013      	ands	r3, r2
 8002cea:	d00b      	beq.n	8002d04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	4a25      	ldr	r2, [pc, #148]	@ (8002d88 <UART_AdvFeatureConfig+0x158>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	0019      	movs	r1, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	430a      	orrs	r2, r1
 8002d02:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d08:	2240      	movs	r2, #64	@ 0x40
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	d01d      	beq.n	8002d4a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	4a1d      	ldr	r2, [pc, #116]	@ (8002d8c <UART_AdvFeatureConfig+0x15c>)
 8002d16:	4013      	ands	r3, r2
 8002d18:	0019      	movs	r1, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	430a      	orrs	r2, r1
 8002d24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d2a:	2380      	movs	r3, #128	@ 0x80
 8002d2c:	035b      	lsls	r3, r3, #13
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d10b      	bne.n	8002d4a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	4a15      	ldr	r2, [pc, #84]	@ (8002d90 <UART_AdvFeatureConfig+0x160>)
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	0019      	movs	r1, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	430a      	orrs	r2, r1
 8002d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4e:	2280      	movs	r2, #128	@ 0x80
 8002d50:	4013      	ands	r3, r2
 8002d52:	d00b      	beq.n	8002d6c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4a0e      	ldr	r2, [pc, #56]	@ (8002d94 <UART_AdvFeatureConfig+0x164>)
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	0019      	movs	r1, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	605a      	str	r2, [r3, #4]
  }
}
 8002d6c:	46c0      	nop			@ (mov r8, r8)
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	b002      	add	sp, #8
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	ffff7fff 	.word	0xffff7fff
 8002d78:	fffdffff 	.word	0xfffdffff
 8002d7c:	fffeffff 	.word	0xfffeffff
 8002d80:	fffbffff 	.word	0xfffbffff
 8002d84:	ffffefff 	.word	0xffffefff
 8002d88:	ffffdfff 	.word	0xffffdfff
 8002d8c:	ffefffff 	.word	0xffefffff
 8002d90:	ff9fffff 	.word	0xff9fffff
 8002d94:	fff7ffff 	.word	0xfff7ffff

08002d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b092      	sub	sp, #72	@ 0x48
 8002d9c:	af02      	add	r7, sp, #8
 8002d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2290      	movs	r2, #144	@ 0x90
 8002da4:	2100      	movs	r1, #0
 8002da6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002da8:	f7fd fef8 	bl	8000b9c <HAL_GetTick>
 8002dac:	0003      	movs	r3, r0
 8002dae:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2208      	movs	r2, #8
 8002db8:	4013      	ands	r3, r2
 8002dba:	2b08      	cmp	r3, #8
 8002dbc:	d12d      	bne.n	8002e1a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002dbe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dc0:	2280      	movs	r2, #128	@ 0x80
 8002dc2:	0391      	lsls	r1, r2, #14
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4a47      	ldr	r2, [pc, #284]	@ (8002ee4 <UART_CheckIdleState+0x14c>)
 8002dc8:	9200      	str	r2, [sp, #0]
 8002dca:	2200      	movs	r2, #0
 8002dcc:	f000 f88e 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002dd0:	1e03      	subs	r3, r0, #0
 8002dd2:	d022      	beq.n	8002e1a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002dd8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8002ddc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002dde:	2301      	movs	r3, #1
 8002de0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002de4:	f383 8810 	msr	PRIMASK, r3
}
 8002de8:	46c0      	nop			@ (mov r8, r8)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2180      	movs	r1, #128	@ 0x80
 8002df6:	438a      	bics	r2, r1
 8002df8:	601a      	str	r2, [r3, #0]
 8002dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	f383 8810 	msr	PRIMASK, r3
}
 8002e04:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2288      	movs	r2, #136	@ 0x88
 8002e0a:	2120      	movs	r1, #32
 8002e0c:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2284      	movs	r2, #132	@ 0x84
 8002e12:	2100      	movs	r1, #0
 8002e14:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e060      	b.n	8002edc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	2204      	movs	r2, #4
 8002e22:	4013      	ands	r3, r2
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d146      	bne.n	8002eb6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e2a:	2280      	movs	r2, #128	@ 0x80
 8002e2c:	03d1      	lsls	r1, r2, #15
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4a2c      	ldr	r2, [pc, #176]	@ (8002ee4 <UART_CheckIdleState+0x14c>)
 8002e32:	9200      	str	r2, [sp, #0]
 8002e34:	2200      	movs	r2, #0
 8002e36:	f000 f859 	bl	8002eec <UART_WaitOnFlagUntilTimeout>
 8002e3a:	1e03      	subs	r3, r0, #0
 8002e3c:	d03b      	beq.n	8002eb6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002e42:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e44:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e48:	2301      	movs	r3, #1
 8002e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	f383 8810 	msr	PRIMASK, r3
}
 8002e52:	46c0      	nop			@ (mov r8, r8)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4922      	ldr	r1, [pc, #136]	@ (8002ee8 <UART_CheckIdleState+0x150>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	601a      	str	r2, [r3, #0]
 8002e64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e66:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	f383 8810 	msr	PRIMASK, r3
}
 8002e6e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002e70:	f3ef 8310 	mrs	r3, PRIMASK
 8002e74:	61bb      	str	r3, [r7, #24]
  return(result);
 8002e76:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e78:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	f383 8810 	msr	PRIMASK, r3
}
 8002e84:	46c0      	nop			@ (mov r8, r8)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2101      	movs	r1, #1
 8002e92:	438a      	bics	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
 8002e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e98:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	f383 8810 	msr	PRIMASK, r3
}
 8002ea0:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	228c      	movs	r2, #140	@ 0x8c
 8002ea6:	2120      	movs	r1, #32
 8002ea8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2284      	movs	r2, #132	@ 0x84
 8002eae:	2100      	movs	r1, #0
 8002eb0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e012      	b.n	8002edc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2288      	movs	r2, #136	@ 0x88
 8002eba:	2120      	movs	r1, #32
 8002ebc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	228c      	movs	r2, #140	@ 0x8c
 8002ec2:	2120      	movs	r1, #32
 8002ec4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2284      	movs	r2, #132	@ 0x84
 8002ed6:	2100      	movs	r1, #0
 8002ed8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	0018      	movs	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	b010      	add	sp, #64	@ 0x40
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	01ffffff 	.word	0x01ffffff
 8002ee8:	fffffedf 	.word	0xfffffedf

08002eec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	60f8      	str	r0, [r7, #12]
 8002ef4:	60b9      	str	r1, [r7, #8]
 8002ef6:	603b      	str	r3, [r7, #0]
 8002ef8:	1dfb      	adds	r3, r7, #7
 8002efa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002efc:	e051      	b.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	3301      	adds	r3, #1
 8002f02:	d04e      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f04:	f7fd fe4a 	bl	8000b9c <HAL_GetTick>
 8002f08:	0002      	movs	r2, r0
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	429a      	cmp	r2, r3
 8002f12:	d302      	bcc.n	8002f1a <UART_WaitOnFlagUntilTimeout+0x2e>
 8002f14:	69bb      	ldr	r3, [r7, #24]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d101      	bne.n	8002f1e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e051      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2204      	movs	r2, #4
 8002f26:	4013      	ands	r3, r2
 8002f28:	d03b      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	2b80      	cmp	r3, #128	@ 0x80
 8002f2e:	d038      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	2b40      	cmp	r3, #64	@ 0x40
 8002f34:	d035      	beq.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	69db      	ldr	r3, [r3, #28]
 8002f3c:	2208      	movs	r2, #8
 8002f3e:	4013      	ands	r3, r2
 8002f40:	2b08      	cmp	r3, #8
 8002f42:	d111      	bne.n	8002f68 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2208      	movs	r2, #8
 8002f4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f000 f83c 	bl	8002fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2290      	movs	r2, #144	@ 0x90
 8002f58:	2108      	movs	r1, #8
 8002f5a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2284      	movs	r2, #132	@ 0x84
 8002f60:	2100      	movs	r1, #0
 8002f62:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e02c      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	69da      	ldr	r2, [r3, #28]
 8002f6e:	2380      	movs	r3, #128	@ 0x80
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	401a      	ands	r2, r3
 8002f74:	2380      	movs	r3, #128	@ 0x80
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d112      	bne.n	8002fa2 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2280      	movs	r2, #128	@ 0x80
 8002f82:	0112      	lsls	r2, r2, #4
 8002f84:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	0018      	movs	r0, r3
 8002f8a:	f000 f81f 	bl	8002fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2290      	movs	r2, #144	@ 0x90
 8002f92:	2120      	movs	r1, #32
 8002f94:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	2284      	movs	r2, #132	@ 0x84
 8002f9a:	2100      	movs	r1, #0
 8002f9c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e00f      	b.n	8002fc2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	68ba      	ldr	r2, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	425a      	negs	r2, r3
 8002fb2:	4153      	adcs	r3, r2
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	001a      	movs	r2, r3
 8002fb8:	1dfb      	adds	r3, r7, #7
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d09e      	beq.n	8002efe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
}
 8002fc2:	0018      	movs	r0, r3
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b004      	add	sp, #16
 8002fc8:	bd80      	pop	{r7, pc}
	...

08002fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b08e      	sub	sp, #56	@ 0x38
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002fd4:	f3ef 8310 	mrs	r3, PRIMASK
 8002fd8:	617b      	str	r3, [r7, #20]
  return(result);
 8002fda:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002fdc:	637b      	str	r3, [r7, #52]	@ 0x34
 8002fde:	2301      	movs	r3, #1
 8002fe0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	f383 8810 	msr	PRIMASK, r3
}
 8002fe8:	46c0      	nop			@ (mov r8, r8)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4926      	ldr	r1, [pc, #152]	@ (8003090 <UART_EndRxTransfer+0xc4>)
 8002ff6:	400a      	ands	r2, r1
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ffc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	f383 8810 	msr	PRIMASK, r3
}
 8003004:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003006:	f3ef 8310 	mrs	r3, PRIMASK
 800300a:	623b      	str	r3, [r7, #32]
  return(result);
 800300c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800300e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003010:	2301      	movs	r3, #1
 8003012:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003016:	f383 8810 	msr	PRIMASK, r3
}
 800301a:	46c0      	nop			@ (mov r8, r8)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689a      	ldr	r2, [r3, #8]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	491b      	ldr	r1, [pc, #108]	@ (8003094 <UART_EndRxTransfer+0xc8>)
 8003028:	400a      	ands	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
 800302c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800302e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003030:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003032:	f383 8810 	msr	PRIMASK, r3
}
 8003036:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800303c:	2b01      	cmp	r3, #1
 800303e:	d118      	bne.n	8003072 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003040:	f3ef 8310 	mrs	r3, PRIMASK
 8003044:	60bb      	str	r3, [r7, #8]
  return(result);
 8003046:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800304a:	2301      	movs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f383 8810 	msr	PRIMASK, r3
}
 8003054:	46c0      	nop			@ (mov r8, r8)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2110      	movs	r1, #16
 8003062:	438a      	bics	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003068:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	f383 8810 	msr	PRIMASK, r3
}
 8003070:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	228c      	movs	r2, #140	@ 0x8c
 8003076:	2120      	movs	r1, #32
 8003078:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003086:	46c0      	nop			@ (mov r8, r8)
 8003088:	46bd      	mov	sp, r7
 800308a:	b00e      	add	sp, #56	@ 0x38
 800308c:	bd80      	pop	{r7, pc}
 800308e:	46c0      	nop			@ (mov r8, r8)
 8003090:	fffffedf 	.word	0xfffffedf
 8003094:	effffffe 	.word	0xeffffffe

08003098 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	225e      	movs	r2, #94	@ 0x5e
 80030aa:	2100      	movs	r1, #0
 80030ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	0018      	movs	r0, r3
 80030b2:	f7ff fc2b 	bl	800290c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80030b6:	46c0      	nop			@ (mov r8, r8)
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b004      	add	sp, #16
 80030bc:	bd80      	pop	{r7, pc}

080030be <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80030be:	b580      	push	{r7, lr}
 80030c0:	b08a      	sub	sp, #40	@ 0x28
 80030c2:	af00      	add	r7, sp, #0
 80030c4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2288      	movs	r2, #136	@ 0x88
 80030ca:	589b      	ldr	r3, [r3, r2]
 80030cc:	2b21      	cmp	r3, #33	@ 0x21
 80030ce:	d14c      	bne.n	800316a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2256      	movs	r2, #86	@ 0x56
 80030d4:	5a9b      	ldrh	r3, [r3, r2]
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d132      	bne.n	8003142 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030dc:	f3ef 8310 	mrs	r3, PRIMASK
 80030e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80030e2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80030e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030e6:	2301      	movs	r3, #1
 80030e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f383 8810 	msr	PRIMASK, r3
}
 80030f0:	46c0      	nop			@ (mov r8, r8)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2180      	movs	r1, #128	@ 0x80
 80030fe:	438a      	bics	r2, r1
 8003100:	601a      	str	r2, [r3, #0]
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	f383 8810 	msr	PRIMASK, r3
}
 800310c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800310e:	f3ef 8310 	mrs	r3, PRIMASK
 8003112:	617b      	str	r3, [r7, #20]
  return(result);
 8003114:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003116:	623b      	str	r3, [r7, #32]
 8003118:	2301      	movs	r3, #1
 800311a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f383 8810 	msr	PRIMASK, r3
}
 8003122:	46c0      	nop			@ (mov r8, r8)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2140      	movs	r1, #64	@ 0x40
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	6a3b      	ldr	r3, [r7, #32]
 8003136:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003138:	69fb      	ldr	r3, [r7, #28]
 800313a:	f383 8810 	msr	PRIMASK, r3
}
 800313e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003140:	e013      	b.n	800316a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003146:	781a      	ldrb	r2, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003152:	1c5a      	adds	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2256      	movs	r2, #86	@ 0x56
 800315c:	5a9b      	ldrh	r3, [r3, r2]
 800315e:	b29b      	uxth	r3, r3
 8003160:	3b01      	subs	r3, #1
 8003162:	b299      	uxth	r1, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2256      	movs	r2, #86	@ 0x56
 8003168:	5299      	strh	r1, [r3, r2]
}
 800316a:	46c0      	nop			@ (mov r8, r8)
 800316c:	46bd      	mov	sp, r7
 800316e:	b00a      	add	sp, #40	@ 0x28
 8003170:	bd80      	pop	{r7, pc}

08003172 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b08c      	sub	sp, #48	@ 0x30
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2288      	movs	r2, #136	@ 0x88
 800317e:	589b      	ldr	r3, [r3, r2]
 8003180:	2b21      	cmp	r3, #33	@ 0x21
 8003182:	d151      	bne.n	8003228 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2256      	movs	r2, #86	@ 0x56
 8003188:	5a9b      	ldrh	r3, [r3, r2]
 800318a:	b29b      	uxth	r3, r3
 800318c:	2b00      	cmp	r3, #0
 800318e:	d132      	bne.n	80031f6 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003190:	f3ef 8310 	mrs	r3, PRIMASK
 8003194:	60fb      	str	r3, [r7, #12]
  return(result);
 8003196:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003198:	62bb      	str	r3, [r7, #40]	@ 0x28
 800319a:	2301      	movs	r3, #1
 800319c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			@ (mov r8, r8)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2180      	movs	r1, #128	@ 0x80
 80031b2:	438a      	bics	r2, r1
 80031b4:	601a      	str	r2, [r3, #0]
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f383 8810 	msr	PRIMASK, r3
}
 80031c0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80031c2:	f3ef 8310 	mrs	r3, PRIMASK
 80031c6:	61bb      	str	r3, [r7, #24]
  return(result);
 80031c8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80031cc:	2301      	movs	r3, #1
 80031ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d0:	69fb      	ldr	r3, [r7, #28]
 80031d2:	f383 8810 	msr	PRIMASK, r3
}
 80031d6:	46c0      	nop			@ (mov r8, r8)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2140      	movs	r1, #64	@ 0x40
 80031e4:	430a      	orrs	r2, r1
 80031e6:	601a      	str	r2, [r3, #0]
 80031e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ec:	6a3b      	ldr	r3, [r7, #32]
 80031ee:	f383 8810 	msr	PRIMASK, r3
}
 80031f2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80031f4:	e018      	b.n	8003228 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	001a      	movs	r2, r3
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	05d2      	lsls	r2, r2, #23
 8003208:	0dd2      	lsrs	r2, r2, #23
 800320a:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003210:	1c9a      	adds	r2, r3, #2
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2256      	movs	r2, #86	@ 0x56
 800321a:	5a9b      	ldrh	r3, [r3, r2]
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b299      	uxth	r1, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2256      	movs	r2, #86	@ 0x56
 8003226:	5299      	strh	r1, [r3, r2]
}
 8003228:	46c0      	nop			@ (mov r8, r8)
 800322a:	46bd      	mov	sp, r7
 800322c:	b00c      	add	sp, #48	@ 0x30
 800322e:	bd80      	pop	{r7, pc}

08003230 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b08c      	sub	sp, #48	@ 0x30
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2288      	movs	r2, #136	@ 0x88
 800323c:	589b      	ldr	r3, [r3, r2]
 800323e:	2b21      	cmp	r3, #33	@ 0x21
 8003240:	d165      	bne.n	800330e <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003242:	232e      	movs	r3, #46	@ 0x2e
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	216a      	movs	r1, #106	@ 0x6a
 800324a:	5a52      	ldrh	r2, [r2, r1]
 800324c:	801a      	strh	r2, [r3, #0]
 800324e:	e059      	b.n	8003304 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2256      	movs	r2, #86	@ 0x56
 8003254:	5a9b      	ldrh	r3, [r3, r2]
 8003256:	b29b      	uxth	r3, r3
 8003258:	2b00      	cmp	r3, #0
 800325a:	d133      	bne.n	80032c4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800325c:	f3ef 8310 	mrs	r3, PRIMASK
 8003260:	60fb      	str	r3, [r7, #12]
  return(result);
 8003262:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003264:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003266:	2301      	movs	r3, #1
 8003268:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f383 8810 	msr	PRIMASK, r3
}
 8003270:	46c0      	nop			@ (mov r8, r8)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4926      	ldr	r1, [pc, #152]	@ (8003318 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800327e:	400a      	ands	r2, r1
 8003280:	609a      	str	r2, [r3, #8]
 8003282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003284:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	f383 8810 	msr	PRIMASK, r3
}
 800328c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800328e:	f3ef 8310 	mrs	r3, PRIMASK
 8003292:	61bb      	str	r3, [r7, #24]
  return(result);
 8003294:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
 8003298:	2301      	movs	r3, #1
 800329a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	f383 8810 	msr	PRIMASK, r3
}
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2140      	movs	r1, #64	@ 0x40
 80032b0:	430a      	orrs	r2, r1
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032b8:	6a3b      	ldr	r3, [r7, #32]
 80032ba:	f383 8810 	msr	PRIMASK, r3
}
 80032be:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80032c0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80032c2:	e024      	b.n	800330e <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	2280      	movs	r2, #128	@ 0x80
 80032cc:	4013      	ands	r3, r2
 80032ce:	d013      	beq.n	80032f8 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2256      	movs	r2, #86	@ 0x56
 80032ea:	5a9b      	ldrh	r3, [r3, r2]
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	3b01      	subs	r3, #1
 80032f0:	b299      	uxth	r1, r3
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2256      	movs	r2, #86	@ 0x56
 80032f6:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80032f8:	212e      	movs	r1, #46	@ 0x2e
 80032fa:	187b      	adds	r3, r7, r1
 80032fc:	881a      	ldrh	r2, [r3, #0]
 80032fe:	187b      	adds	r3, r7, r1
 8003300:	3a01      	subs	r2, #1
 8003302:	801a      	strh	r2, [r3, #0]
 8003304:	232e      	movs	r3, #46	@ 0x2e
 8003306:	18fb      	adds	r3, r7, r3
 8003308:	881b      	ldrh	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1a0      	bne.n	8003250 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800330e:	46c0      	nop			@ (mov r8, r8)
 8003310:	46bd      	mov	sp, r7
 8003312:	b00c      	add	sp, #48	@ 0x30
 8003314:	bd80      	pop	{r7, pc}
 8003316:	46c0      	nop			@ (mov r8, r8)
 8003318:	ff7fffff 	.word	0xff7fffff

0800331c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08c      	sub	sp, #48	@ 0x30
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2288      	movs	r2, #136	@ 0x88
 8003328:	589b      	ldr	r3, [r3, r2]
 800332a:	2b21      	cmp	r3, #33	@ 0x21
 800332c:	d16a      	bne.n	8003404 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800332e:	232e      	movs	r3, #46	@ 0x2e
 8003330:	18fb      	adds	r3, r7, r3
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	216a      	movs	r1, #106	@ 0x6a
 8003336:	5a52      	ldrh	r2, [r2, r1]
 8003338:	801a      	strh	r2, [r3, #0]
 800333a:	e05e      	b.n	80033fa <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2256      	movs	r2, #86	@ 0x56
 8003340:	5a9b      	ldrh	r3, [r3, r2]
 8003342:	b29b      	uxth	r3, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	d133      	bne.n	80033b0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003348:	f3ef 8310 	mrs	r3, PRIMASK
 800334c:	60bb      	str	r3, [r7, #8]
  return(result);
 800334e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
 8003352:	2301      	movs	r3, #1
 8003354:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	f383 8810 	msr	PRIMASK, r3
}
 800335c:	46c0      	nop			@ (mov r8, r8)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4928      	ldr	r1, [pc, #160]	@ (800340c <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800336a:	400a      	ands	r2, r1
 800336c:	609a      	str	r2, [r3, #8]
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	f383 8810 	msr	PRIMASK, r3
}
 8003378:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800337a:	f3ef 8310 	mrs	r3, PRIMASK
 800337e:	617b      	str	r3, [r7, #20]
  return(result);
 8003380:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003382:	623b      	str	r3, [r7, #32]
 8003384:	2301      	movs	r3, #1
 8003386:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003388:	69bb      	ldr	r3, [r7, #24]
 800338a:	f383 8810 	msr	PRIMASK, r3
}
 800338e:	46c0      	nop			@ (mov r8, r8)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2140      	movs	r1, #64	@ 0x40
 800339c:	430a      	orrs	r2, r1
 800339e:	601a      	str	r2, [r3, #0]
 80033a0:	6a3b      	ldr	r3, [r7, #32]
 80033a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	f383 8810 	msr	PRIMASK, r3
}
 80033aa:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80033ac:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80033ae:	e029      	b.n	8003404 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	2280      	movs	r2, #128	@ 0x80
 80033b8:	4013      	ands	r3, r2
 80033ba:	d018      	beq.n	80033ee <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033c0:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80033c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	001a      	movs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	05d2      	lsls	r2, r2, #23
 80033ce:	0dd2      	lsrs	r2, r2, #23
 80033d0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2256      	movs	r2, #86	@ 0x56
 80033e0:	5a9b      	ldrh	r3, [r3, r2]
 80033e2:	b29b      	uxth	r3, r3
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b299      	uxth	r1, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2256      	movs	r2, #86	@ 0x56
 80033ec:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80033ee:	212e      	movs	r1, #46	@ 0x2e
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	3a01      	subs	r2, #1
 80033f8:	801a      	strh	r2, [r3, #0]
 80033fa:	232e      	movs	r3, #46	@ 0x2e
 80033fc:	18fb      	adds	r3, r7, r3
 80033fe:	881b      	ldrh	r3, [r3, #0]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d19b      	bne.n	800333c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b00c      	add	sp, #48	@ 0x30
 800340a:	bd80      	pop	{r7, pc}
 800340c:	ff7fffff 	.word	0xff7fffff

08003410 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003418:	f3ef 8310 	mrs	r3, PRIMASK
 800341c:	60bb      	str	r3, [r7, #8]
  return(result);
 800341e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003420:	617b      	str	r3, [r7, #20]
 8003422:	2301      	movs	r3, #1
 8003424:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			@ (mov r8, r8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	2140      	movs	r1, #64	@ 0x40
 800343a:	438a      	bics	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	f383 8810 	msr	PRIMASK, r3
}
 8003448:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2288      	movs	r2, #136	@ 0x88
 800344e:	2120      	movs	r1, #32
 8003450:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	0018      	movs	r0, r3
 800345c:	f7ff fa4e 	bl	80028fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003460:	46c0      	nop			@ (mov r8, r8)
 8003462:	46bd      	mov	sp, r7
 8003464:	b006      	add	sp, #24
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003470:	46c0      	nop			@ (mov r8, r8)
 8003472:	46bd      	mov	sp, r7
 8003474:	b002      	add	sp, #8
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003480:	46c0      	nop			@ (mov r8, r8)
 8003482:	46bd      	mov	sp, r7
 8003484:	b002      	add	sp, #8
 8003486:	bd80      	pop	{r7, pc}

08003488 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003490:	46c0      	nop			@ (mov r8, r8)
 8003492:	46bd      	mov	sp, r7
 8003494:	b002      	add	sp, #8
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2284      	movs	r2, #132	@ 0x84
 80034a4:	5c9b      	ldrb	r3, [r3, r2]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_UARTEx_DisableFifoMode+0x16>
 80034aa:	2302      	movs	r3, #2
 80034ac:	e027      	b.n	80034fe <HAL_UARTEx_DisableFifoMode+0x66>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2284      	movs	r2, #132	@ 0x84
 80034b2:	2101      	movs	r1, #1
 80034b4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2288      	movs	r2, #136	@ 0x88
 80034ba:	2124      	movs	r1, #36	@ 0x24
 80034bc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2101      	movs	r1, #1
 80034d2:	438a      	bics	r2, r1
 80034d4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003508 <HAL_UARTEx_DisableFifoMode+0x70>)
 80034da:	4013      	ands	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2288      	movs	r2, #136	@ 0x88
 80034f0:	2120      	movs	r1, #32
 80034f2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2284      	movs	r2, #132	@ 0x84
 80034f8:	2100      	movs	r1, #0
 80034fa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	0018      	movs	r0, r3
 8003500:	46bd      	mov	sp, r7
 8003502:	b004      	add	sp, #16
 8003504:	bd80      	pop	{r7, pc}
 8003506:	46c0      	nop			@ (mov r8, r8)
 8003508:	dfffffff 	.word	0xdfffffff

0800350c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2284      	movs	r2, #132	@ 0x84
 800351a:	5c9b      	ldrb	r3, [r3, r2]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003520:	2302      	movs	r3, #2
 8003522:	e02e      	b.n	8003582 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2284      	movs	r2, #132	@ 0x84
 8003528:	2101      	movs	r1, #1
 800352a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2288      	movs	r2, #136	@ 0x88
 8003530:	2124      	movs	r1, #36	@ 0x24
 8003532:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	689b      	ldr	r3, [r3, #8]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	08d9      	lsrs	r1, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	683a      	ldr	r2, [r7, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	0018      	movs	r0, r3
 8003564:	f000 f854 	bl	8003610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68fa      	ldr	r2, [r7, #12]
 800356e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2288      	movs	r2, #136	@ 0x88
 8003574:	2120      	movs	r1, #32
 8003576:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2284      	movs	r2, #132	@ 0x84
 800357c:	2100      	movs	r1, #0
 800357e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	0018      	movs	r0, r3
 8003584:	46bd      	mov	sp, r7
 8003586:	b004      	add	sp, #16
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2284      	movs	r2, #132	@ 0x84
 800359a:	5c9b      	ldrb	r3, [r3, r2]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e02f      	b.n	8003604 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2284      	movs	r2, #132	@ 0x84
 80035a8:	2101      	movs	r1, #1
 80035aa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2288      	movs	r2, #136	@ 0x88
 80035b0:	2124      	movs	r1, #36	@ 0x24
 80035b2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2101      	movs	r1, #1
 80035c8:	438a      	bics	r2, r1
 80035ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	@ (800360c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	0018      	movs	r0, r3
 80035e6:	f000 f813 	bl	8003610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	68fa      	ldr	r2, [r7, #12]
 80035f0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2288      	movs	r2, #136	@ 0x88
 80035f6:	2120      	movs	r1, #32
 80035f8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2284      	movs	r2, #132	@ 0x84
 80035fe:	2100      	movs	r1, #0
 8003600:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b004      	add	sp, #16
 800360a:	bd80      	pop	{r7, pc}
 800360c:	f1ffffff 	.word	0xf1ffffff

08003610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003610:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800361c:	2b00      	cmp	r3, #0
 800361e:	d108      	bne.n	8003632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	226a      	movs	r2, #106	@ 0x6a
 8003624:	2101      	movs	r1, #1
 8003626:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2268      	movs	r2, #104	@ 0x68
 800362c:	2101      	movs	r1, #1
 800362e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003630:	e043      	b.n	80036ba <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003632:	260f      	movs	r6, #15
 8003634:	19bb      	adds	r3, r7, r6
 8003636:	2208      	movs	r2, #8
 8003638:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800363a:	200e      	movs	r0, #14
 800363c:	183b      	adds	r3, r7, r0
 800363e:	2208      	movs	r2, #8
 8003640:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	0e5b      	lsrs	r3, r3, #25
 800364a:	b2da      	uxtb	r2, r3
 800364c:	240d      	movs	r4, #13
 800364e:	193b      	adds	r3, r7, r4
 8003650:	2107      	movs	r1, #7
 8003652:	400a      	ands	r2, r1
 8003654:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	0f5b      	lsrs	r3, r3, #29
 800365e:	b2da      	uxtb	r2, r3
 8003660:	250c      	movs	r5, #12
 8003662:	197b      	adds	r3, r7, r5
 8003664:	2107      	movs	r1, #7
 8003666:	400a      	ands	r2, r1
 8003668:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800366a:	183b      	adds	r3, r7, r0
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	197a      	adds	r2, r7, r5
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	4914      	ldr	r1, [pc, #80]	@ (80036c4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003674:	5c8a      	ldrb	r2, [r1, r2]
 8003676:	435a      	muls	r2, r3
 8003678:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800367a:	197b      	adds	r3, r7, r5
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	4a12      	ldr	r2, [pc, #72]	@ (80036c8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003680:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003682:	0019      	movs	r1, r3
 8003684:	f7fc fdca 	bl	800021c <__divsi3>
 8003688:	0003      	movs	r3, r0
 800368a:	b299      	uxth	r1, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	226a      	movs	r2, #106	@ 0x6a
 8003690:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003692:	19bb      	adds	r3, r7, r6
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	193a      	adds	r2, r7, r4
 8003698:	7812      	ldrb	r2, [r2, #0]
 800369a:	490a      	ldr	r1, [pc, #40]	@ (80036c4 <UARTEx_SetNbDataToProcess+0xb4>)
 800369c:	5c8a      	ldrb	r2, [r1, r2]
 800369e:	435a      	muls	r2, r3
 80036a0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80036a2:	193b      	adds	r3, r7, r4
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	4a08      	ldr	r2, [pc, #32]	@ (80036c8 <UARTEx_SetNbDataToProcess+0xb8>)
 80036a8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80036aa:	0019      	movs	r1, r3
 80036ac:	f7fc fdb6 	bl	800021c <__divsi3>
 80036b0:	0003      	movs	r3, r0
 80036b2:	b299      	uxth	r1, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2268      	movs	r2, #104	@ 0x68
 80036b8:	5299      	strh	r1, [r3, r2]
}
 80036ba:	46c0      	nop			@ (mov r8, r8)
 80036bc:	46bd      	mov	sp, r7
 80036be:	b005      	add	sp, #20
 80036c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	080037b4 	.word	0x080037b4
 80036c8:	080037bc 	.word	0x080037bc

080036cc <memset>:
 80036cc:	0003      	movs	r3, r0
 80036ce:	1882      	adds	r2, r0, r2
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d100      	bne.n	80036d6 <memset+0xa>
 80036d4:	4770      	bx	lr
 80036d6:	7019      	strb	r1, [r3, #0]
 80036d8:	3301      	adds	r3, #1
 80036da:	e7f9      	b.n	80036d0 <memset+0x4>

080036dc <__libc_init_array>:
 80036dc:	b570      	push	{r4, r5, r6, lr}
 80036de:	2600      	movs	r6, #0
 80036e0:	4c0c      	ldr	r4, [pc, #48]	@ (8003714 <__libc_init_array+0x38>)
 80036e2:	4d0d      	ldr	r5, [pc, #52]	@ (8003718 <__libc_init_array+0x3c>)
 80036e4:	1b64      	subs	r4, r4, r5
 80036e6:	10a4      	asrs	r4, r4, #2
 80036e8:	42a6      	cmp	r6, r4
 80036ea:	d109      	bne.n	8003700 <__libc_init_array+0x24>
 80036ec:	2600      	movs	r6, #0
 80036ee:	f000 f819 	bl	8003724 <_init>
 80036f2:	4c0a      	ldr	r4, [pc, #40]	@ (800371c <__libc_init_array+0x40>)
 80036f4:	4d0a      	ldr	r5, [pc, #40]	@ (8003720 <__libc_init_array+0x44>)
 80036f6:	1b64      	subs	r4, r4, r5
 80036f8:	10a4      	asrs	r4, r4, #2
 80036fa:	42a6      	cmp	r6, r4
 80036fc:	d105      	bne.n	800370a <__libc_init_array+0x2e>
 80036fe:	bd70      	pop	{r4, r5, r6, pc}
 8003700:	00b3      	lsls	r3, r6, #2
 8003702:	58eb      	ldr	r3, [r5, r3]
 8003704:	4798      	blx	r3
 8003706:	3601      	adds	r6, #1
 8003708:	e7ee      	b.n	80036e8 <__libc_init_array+0xc>
 800370a:	00b3      	lsls	r3, r6, #2
 800370c:	58eb      	ldr	r3, [r5, r3]
 800370e:	4798      	blx	r3
 8003710:	3601      	adds	r6, #1
 8003712:	e7f2      	b.n	80036fa <__libc_init_array+0x1e>
 8003714:	080037c4 	.word	0x080037c4
 8003718:	080037c4 	.word	0x080037c4
 800371c:	080037c8 	.word	0x080037c8
 8003720:	080037c4 	.word	0x080037c4

08003724 <_init>:
 8003724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003726:	46c0      	nop			@ (mov r8, r8)
 8003728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800372a:	bc08      	pop	{r3}
 800372c:	469e      	mov	lr, r3
 800372e:	4770      	bx	lr

08003730 <_fini>:
 8003730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003732:	46c0      	nop			@ (mov r8, r8)
 8003734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003736:	bc08      	pop	{r3}
 8003738:	469e      	mov	lr, r3
 800373a:	4770      	bx	lr
