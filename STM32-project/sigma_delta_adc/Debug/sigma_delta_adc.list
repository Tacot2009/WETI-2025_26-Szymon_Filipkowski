
sigma_delta_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c48  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08003d08  08003d08  00004d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003de4  08003de4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003de4  08003de4  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003de4  08003de4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003de8  08003de8  00004de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003dec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000150  2000000c  08003df8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000015c  08003df8  0000515c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb6c  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e0  00000000  00000000  00014ba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00016c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a92  00000000  00000000  000179e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013054  00000000  00000000  00018472  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000104ef  00000000  00000000  0002b4c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a73c  00000000  00000000  0003b9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b60f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003090  00000000  00000000  000b6134  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b91c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003cf0 	.word	0x08003cf0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003cf0 	.word	0x08003cf0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003fa:	f000 fb48 	bl	8000a8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fe:	f000 f81f 	bl	8000440 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000402:	f000 f963 	bl	80006cc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000406:	f000 f913 	bl	8000630 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 800040a:	f000 f8e9 	bl	80005e0 <MX_TIM17_Init>
  MX_TIM3_Init();
 800040e:	f000 f865 	bl	80004dc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  uint8_t x=21;
 8000412:	1dfb      	adds	r3, r7, #7
 8000414:	2215      	movs	r2, #21
 8000416:	701a      	strb	r2, [r3, #0]
  HAL_TIM_Base_Start_IT(&htim17);
 8000418:	4b07      	ldr	r3, [pc, #28]	@ (8000438 <main+0x44>)
 800041a:	0018      	movs	r0, r3
 800041c:	f001 fb78 	bl	8001b10 <HAL_TIM_Base_Start_IT>
  assert(x==1, 12);
 8000420:	1dfb      	adds	r3, r7, #7
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	2b01      	cmp	r3, #1
 8000426:	d005      	beq.n	8000434 <main+0x40>
 8000428:	4b04      	ldr	r3, [pc, #16]	@ (800043c <main+0x48>)
 800042a:	220c      	movs	r2, #12
 800042c:	701a      	strb	r2, [r3, #0]
 800042e:	f000 f9a3 	bl	8000778 <Error_Handler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000432:	46c0      	nop			@ (mov r8, r8)
 8000434:	46c0      	nop			@ (mov r8, r8)
 8000436:	e7fd      	b.n	8000434 <main+0x40>
 8000438:	20000074 	.word	0x20000074
 800043c:	20000154 	.word	0x20000154

08000440 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000440:	b590      	push	{r4, r7, lr}
 8000442:	b08d      	sub	sp, #52	@ 0x34
 8000444:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000446:	2414      	movs	r4, #20
 8000448:	193b      	adds	r3, r7, r4
 800044a:	0018      	movs	r0, r3
 800044c:	231c      	movs	r3, #28
 800044e:	001a      	movs	r2, r3
 8000450:	2100      	movs	r1, #0
 8000452:	f003 fc21 	bl	8003c98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000456:	003b      	movs	r3, r7
 8000458:	0018      	movs	r0, r3
 800045a:	2314      	movs	r3, #20
 800045c:	001a      	movs	r2, r3
 800045e:	2100      	movs	r1, #0
 8000460:	f003 fc1a 	bl	8003c98 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000464:	4b1c      	ldr	r3, [pc, #112]	@ (80004d8 <SystemClock_Config+0x98>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	2207      	movs	r2, #7
 800046a:	4393      	bics	r3, r2
 800046c:	001a      	movs	r2, r3
 800046e:	4b1a      	ldr	r3, [pc, #104]	@ (80004d8 <SystemClock_Config+0x98>)
 8000470:	2101      	movs	r1, #1
 8000472:	430a      	orrs	r2, r1
 8000474:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000476:	193b      	adds	r3, r7, r4
 8000478:	2202      	movs	r2, #2
 800047a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800047c:	193b      	adds	r3, r7, r4
 800047e:	2280      	movs	r2, #128	@ 0x80
 8000480:	0052      	lsls	r2, r2, #1
 8000482:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000484:	193b      	adds	r3, r7, r4
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800048a:	193b      	adds	r3, r7, r4
 800048c:	2240      	movs	r2, #64	@ 0x40
 800048e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000490:	193b      	adds	r3, r7, r4
 8000492:	0018      	movs	r0, r3
 8000494:	f000 fe9c 	bl	80011d0 <HAL_RCC_OscConfig>
 8000498:	1e03      	subs	r3, r0, #0
 800049a:	d001      	beq.n	80004a0 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800049c:	f000 f96c 	bl	8000778 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a0:	003b      	movs	r3, r7
 80004a2:	2207      	movs	r2, #7
 80004a4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004a6:	003b      	movs	r3, r7
 80004a8:	2200      	movs	r2, #0
 80004aa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004ac:	003b      	movs	r3, r7
 80004ae:	2200      	movs	r2, #0
 80004b0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004b2:	003b      	movs	r3, r7
 80004b4:	2200      	movs	r2, #0
 80004b6:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004be:	003b      	movs	r3, r7
 80004c0:	2101      	movs	r1, #1
 80004c2:	0018      	movs	r0, r3
 80004c4:	f001 f868 	bl	8001598 <HAL_RCC_ClockConfig>
 80004c8:	1e03      	subs	r3, r0, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004cc:	f000 f954 	bl	8000778 <Error_Handler>
  }
}
 80004d0:	46c0      	nop			@ (mov r8, r8)
 80004d2:	46bd      	mov	sp, r7
 80004d4:	b00d      	add	sp, #52	@ 0x34
 80004d6:	bd90      	pop	{r4, r7, pc}
 80004d8:	40022000 	.word	0x40022000

080004dc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b08e      	sub	sp, #56	@ 0x38
 80004e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004e2:	2328      	movs	r3, #40	@ 0x28
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	0018      	movs	r0, r3
 80004e8:	2310      	movs	r3, #16
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f003 fbd3 	bl	8003c98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004f2:	231c      	movs	r3, #28
 80004f4:	18fb      	adds	r3, r7, r3
 80004f6:	0018      	movs	r0, r3
 80004f8:	230c      	movs	r3, #12
 80004fa:	001a      	movs	r2, r3
 80004fc:	2100      	movs	r1, #0
 80004fe:	f003 fbcb 	bl	8003c98 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000502:	003b      	movs	r3, r7
 8000504:	0018      	movs	r0, r3
 8000506:	231c      	movs	r3, #28
 8000508:	001a      	movs	r2, r3
 800050a:	2100      	movs	r1, #0
 800050c:	f003 fbc4 	bl	8003c98 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000510:	4b30      	ldr	r3, [pc, #192]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000512:	4a31      	ldr	r2, [pc, #196]	@ (80005d8 <MX_TIM3_Init+0xfc>)
 8000514:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 46875;
 8000516:	4b2f      	ldr	r3, [pc, #188]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000518:	4a30      	ldr	r2, [pc, #192]	@ (80005dc <MX_TIM3_Init+0x100>)
 800051a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800051c:	4b2d      	ldr	r3, [pc, #180]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 800051e:	2200      	movs	r2, #0
 8000520:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 8000522:	4b2c      	ldr	r3, [pc, #176]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000524:	2280      	movs	r2, #128	@ 0x80
 8000526:	00d2      	lsls	r2, r2, #3
 8000528:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052a:	4b2a      	ldr	r3, [pc, #168]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 800052c:	2200      	movs	r2, #0
 800052e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000532:	2200      	movs	r2, #0
 8000534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000536:	4b27      	ldr	r3, [pc, #156]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000538:	0018      	movs	r0, r3
 800053a:	f001 fa91 	bl	8001a60 <HAL_TIM_Base_Init>
 800053e:	1e03      	subs	r3, r0, #0
 8000540:	d001      	beq.n	8000546 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000542:	f000 f919 	bl	8000778 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000546:	2128      	movs	r1, #40	@ 0x28
 8000548:	187b      	adds	r3, r7, r1
 800054a:	2280      	movs	r2, #128	@ 0x80
 800054c:	0152      	lsls	r2, r2, #5
 800054e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000550:	187a      	adds	r2, r7, r1
 8000552:	4b20      	ldr	r3, [pc, #128]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000554:	0011      	movs	r1, r2
 8000556:	0018      	movs	r0, r3
 8000558:	f001 fd90 	bl	800207c <HAL_TIM_ConfigClockSource>
 800055c:	1e03      	subs	r3, r0, #0
 800055e:	d001      	beq.n	8000564 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8000560:	f000 f90a 	bl	8000778 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000564:	4b1b      	ldr	r3, [pc, #108]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000566:	0018      	movs	r0, r3
 8000568:	f001 fb20 	bl	8001bac <HAL_TIM_PWM_Init>
 800056c:	1e03      	subs	r3, r0, #0
 800056e:	d001      	beq.n	8000574 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000570:	f000 f902 	bl	8000778 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000574:	211c      	movs	r1, #28
 8000576:	187b      	adds	r3, r7, r1
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800057c:	187b      	adds	r3, r7, r1
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000582:	187a      	adds	r2, r7, r1
 8000584:	4b13      	ldr	r3, [pc, #76]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fa27 	bl	80029dc <HAL_TIMEx_MasterConfigSynchronization>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8000592:	f000 f8f1 	bl	8000778 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000596:	003b      	movs	r3, r7
 8000598:	2260      	movs	r2, #96	@ 0x60
 800059a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a2:	003b      	movs	r3, r7
 80005a4:	2200      	movs	r2, #0
 80005a6:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005a8:	003b      	movs	r3, r7
 80005aa:	2200      	movs	r2, #0
 80005ac:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005ae:	0039      	movs	r1, r7
 80005b0:	4b08      	ldr	r3, [pc, #32]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 80005b2:	2208      	movs	r2, #8
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fc61 	bl	8001e7c <HAL_TIM_PWM_ConfigChannel>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80005be:	f000 f8db 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80005c2:	4b04      	ldr	r3, [pc, #16]	@ (80005d4 <MX_TIM3_Init+0xf8>)
 80005c4:	0018      	movs	r0, r3
 80005c6:	f000 f93d 	bl	8000844 <HAL_TIM_MspPostInit>

}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b00e      	add	sp, #56	@ 0x38
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			@ (mov r8, r8)
 80005d4:	20000028 	.word	0x20000028
 80005d8:	40000400 	.word	0x40000400
 80005dc:	0000b71b 	.word	0x0000b71b

080005e0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000624 <MX_TIM17_Init+0x44>)
 80005e6:	4a10      	ldr	r2, [pc, #64]	@ (8000628 <MX_TIM17_Init+0x48>)
 80005e8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 46875-1;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_TIM17_Init+0x44>)
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <MX_TIM17_Init+0x4c>)
 80005ee:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <MX_TIM17_Init+0x44>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2-1;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	@ (8000624 <MX_TIM17_Init+0x44>)
 80005f8:	2201      	movs	r2, #1
 80005fa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005fc:	4b09      	ldr	r3, [pc, #36]	@ (8000624 <MX_TIM17_Init+0x44>)
 80005fe:	2200      	movs	r2, #0
 8000600:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000602:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <MX_TIM17_Init+0x44>)
 8000604:	2200      	movs	r2, #0
 8000606:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_TIM17_Init+0x44>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800060e:	4b05      	ldr	r3, [pc, #20]	@ (8000624 <MX_TIM17_Init+0x44>)
 8000610:	0018      	movs	r0, r3
 8000612:	f001 fa25 	bl	8001a60 <HAL_TIM_Base_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 800061a:	f000 f8ad 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	20000074 	.word	0x20000074
 8000628:	40014800 	.word	0x40014800
 800062c:	0000b71a 	.word	0x0000b71a

08000630 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000634:	4b23      	ldr	r3, [pc, #140]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000636:	4a24      	ldr	r2, [pc, #144]	@ (80006c8 <MX_USART1_UART_Init+0x98>)
 8000638:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800063a:	4b22      	ldr	r3, [pc, #136]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 800063c:	22e1      	movs	r2, #225	@ 0xe1
 800063e:	0252      	lsls	r2, r2, #9
 8000640:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000642:	4b20      	ldr	r3, [pc, #128]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000644:	2200      	movs	r2, #0
 8000646:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000648:	4b1e      	ldr	r3, [pc, #120]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 800064a:	2200      	movs	r2, #0
 800064c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800064e:	4b1d      	ldr	r3, [pc, #116]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000654:	4b1b      	ldr	r3, [pc, #108]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000656:	220c      	movs	r2, #12
 8000658:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800065a:	4b1a      	ldr	r3, [pc, #104]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 800065c:	2200      	movs	r2, #0
 800065e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000660:	4b18      	ldr	r3, [pc, #96]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000666:	4b17      	ldr	r3, [pc, #92]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000668:	2200      	movs	r2, #0
 800066a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 800066e:	2200      	movs	r2, #0
 8000670:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 8000674:	2200      	movs	r2, #0
 8000676:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 800067a:	0018      	movs	r0, r3
 800067c:	f002 fa28 	bl	8002ad0 <HAL_HalfDuplex_Init>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000684:	f000 f878 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000688:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 800068a:	2100      	movs	r1, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f003 fa23 	bl	8003ad8 <HAL_UARTEx_SetTxFifoThreshold>
 8000692:	1e03      	subs	r3, r0, #0
 8000694:	d001      	beq.n	800069a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000696:	f000 f86f 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 800069c:	2100      	movs	r1, #0
 800069e:	0018      	movs	r0, r3
 80006a0:	f003 fa5a 	bl	8003b58 <HAL_UARTEx_SetRxFifoThreshold>
 80006a4:	1e03      	subs	r3, r0, #0
 80006a6:	d001      	beq.n	80006ac <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006a8:	f000 f866 	bl	8000778 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <MX_USART1_UART_Init+0x94>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f003 f9d8 	bl	8003a64 <HAL_UARTEx_DisableFifoMode>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006b8:	f000 f85e 	bl	8000778 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	200000c0 	.word	0x200000c0
 80006c8:	40013800 	.word	0x40013800

080006cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b089      	sub	sp, #36	@ 0x24
 80006d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	240c      	movs	r4, #12
 80006d4:	193b      	adds	r3, r7, r4
 80006d6:	0018      	movs	r0, r3
 80006d8:	2314      	movs	r3, #20
 80006da:	001a      	movs	r2, r3
 80006dc:	2100      	movs	r1, #0
 80006de:	f003 fadb 	bl	8003c98 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	4b24      	ldr	r3, [pc, #144]	@ (8000774 <MX_GPIO_Init+0xa8>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006e6:	4b23      	ldr	r3, [pc, #140]	@ (8000774 <MX_GPIO_Init+0xa8>)
 80006e8:	2104      	movs	r1, #4
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	@ 0x34
 80006ee:	4b21      	ldr	r3, [pc, #132]	@ (8000774 <MX_GPIO_Init+0xa8>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80006f2:	2204      	movs	r2, #4
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b1e      	ldr	r3, [pc, #120]	@ (8000774 <MX_GPIO_Init+0xa8>)
 80006fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80006fe:	4b1d      	ldr	r3, [pc, #116]	@ (8000774 <MX_GPIO_Init+0xa8>)
 8000700:	2101      	movs	r1, #1
 8000702:	430a      	orrs	r2, r1
 8000704:	635a      	str	r2, [r3, #52]	@ 0x34
 8000706:	4b1b      	ldr	r3, [pc, #108]	@ (8000774 <MX_GPIO_Init+0xa8>)
 8000708:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800070a:	2201      	movs	r2, #1
 800070c:	4013      	ands	r3, r2
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b18      	ldr	r3, [pc, #96]	@ (8000774 <MX_GPIO_Init+0xa8>)
 8000714:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000716:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_GPIO_Init+0xa8>)
 8000718:	2102      	movs	r1, #2
 800071a:	430a      	orrs	r2, r1
 800071c:	635a      	str	r2, [r3, #52]	@ 0x34
 800071e:	4b15      	ldr	r3, [pc, #84]	@ (8000774 <MX_GPIO_Init+0xa8>)
 8000720:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000722:	2202      	movs	r2, #2
 8000724:	4013      	ands	r3, r2
 8000726:	603b      	str	r3, [r7, #0]
 8000728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : DIGITAL_INPUT_Pin */
  GPIO_InitStruct.Pin = DIGITAL_INPUT_Pin;
 800072a:	193b      	adds	r3, r7, r4
 800072c:	2202      	movs	r2, #2
 800072e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	193b      	adds	r3, r7, r4
 8000732:	2200      	movs	r2, #0
 8000734:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	193b      	adds	r3, r7, r4
 8000738:	2200      	movs	r2, #0
 800073a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL_INPUT_GPIO_Port, &GPIO_InitStruct);
 800073c:	193a      	adds	r2, r7, r4
 800073e:	23a0      	movs	r3, #160	@ 0xa0
 8000740:	05db      	lsls	r3, r3, #23
 8000742:	0011      	movs	r1, r2
 8000744:	0018      	movs	r0, r3
 8000746:	f000 fbd9 	bl	8000efc <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_SELECT_Pin;
 800074a:	193b      	adds	r3, r7, r4
 800074c:	2204      	movs	r2, #4
 800074e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000750:	193b      	adds	r3, r7, r4
 8000752:	2200      	movs	r2, #0
 8000754:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2202      	movs	r2, #2
 800075a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SELECT_GPIO_Port, &GPIO_InitStruct);
 800075c:	193a      	adds	r2, r7, r4
 800075e:	23a0      	movs	r3, #160	@ 0xa0
 8000760:	05db      	lsls	r3, r3, #23
 8000762:	0011      	movs	r1, r2
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fbc9 	bl	8000efc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800076a:	46c0      	nop			@ (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b009      	add	sp, #36	@ 0x24
 8000770:	bd90      	pop	{r4, r7, pc}
 8000772:	46c0      	nop			@ (mov r8, r8)
 8000774:	40021000 	.word	0x40021000

08000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077c:	b672      	cpsid	i
}
 800077e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	46c0      	nop			@ (mov r8, r8)
 8000782:	e7fd      	b.n	8000780 <Error_Handler+0x8>

08000784 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078a:	4b0f      	ldr	r3, [pc, #60]	@ (80007c8 <HAL_MspInit+0x44>)
 800078c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <HAL_MspInit+0x44>)
 8000790:	2101      	movs	r1, #1
 8000792:	430a      	orrs	r2, r1
 8000794:	641a      	str	r2, [r3, #64]	@ 0x40
 8000796:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <HAL_MspInit+0x44>)
 8000798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800079a:	2201      	movs	r2, #1
 800079c:	4013      	ands	r3, r2
 800079e:	607b      	str	r3, [r7, #4]
 80007a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a2:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <HAL_MspInit+0x44>)
 80007a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <HAL_MspInit+0x44>)
 80007a8:	2180      	movs	r1, #128	@ 0x80
 80007aa:	0549      	lsls	r1, r1, #21
 80007ac:	430a      	orrs	r2, r1
 80007ae:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007b0:	4b05      	ldr	r3, [pc, #20]	@ (80007c8 <HAL_MspInit+0x44>)
 80007b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007b4:	2380      	movs	r3, #128	@ 0x80
 80007b6:	055b      	lsls	r3, r3, #21
 80007b8:	4013      	ands	r3, r2
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007be:	46c0      	nop			@ (mov r8, r8)
 80007c0:	46bd      	mov	sp, r7
 80007c2:	b002      	add	sp, #8
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	46c0      	nop			@ (mov r8, r8)
 80007c8:	40021000 	.word	0x40021000

080007cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b084      	sub	sp, #16
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a17      	ldr	r2, [pc, #92]	@ (8000838 <HAL_TIM_Base_MspInit+0x6c>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d10c      	bne.n	80007f8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007de:	4b17      	ldr	r3, [pc, #92]	@ (800083c <HAL_TIM_Base_MspInit+0x70>)
 80007e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80007e2:	4b16      	ldr	r3, [pc, #88]	@ (800083c <HAL_TIM_Base_MspInit+0x70>)
 80007e4:	2102      	movs	r1, #2
 80007e6:	430a      	orrs	r2, r1
 80007e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007ea:	4b14      	ldr	r3, [pc, #80]	@ (800083c <HAL_TIM_Base_MspInit+0x70>)
 80007ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80007ee:	2202      	movs	r2, #2
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80007f6:	e01a      	b.n	800082e <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM17)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a10      	ldr	r2, [pc, #64]	@ (8000840 <HAL_TIM_Base_MspInit+0x74>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d115      	bne.n	800082e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000802:	4b0e      	ldr	r3, [pc, #56]	@ (800083c <HAL_TIM_Base_MspInit+0x70>)
 8000804:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000806:	4b0d      	ldr	r3, [pc, #52]	@ (800083c <HAL_TIM_Base_MspInit+0x70>)
 8000808:	2180      	movs	r1, #128	@ 0x80
 800080a:	02c9      	lsls	r1, r1, #11
 800080c:	430a      	orrs	r2, r1
 800080e:	641a      	str	r2, [r3, #64]	@ 0x40
 8000810:	4b0a      	ldr	r3, [pc, #40]	@ (800083c <HAL_TIM_Base_MspInit+0x70>)
 8000812:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000814:	2380      	movs	r3, #128	@ 0x80
 8000816:	02db      	lsls	r3, r3, #11
 8000818:	4013      	ands	r3, r2
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 800081e:	2200      	movs	r2, #0
 8000820:	2100      	movs	r1, #0
 8000822:	2016      	movs	r0, #22
 8000824:	f000 fa5c 	bl	8000ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8000828:	2016      	movs	r0, #22
 800082a:	f000 fa6e 	bl	8000d0a <HAL_NVIC_EnableIRQ>
}
 800082e:	46c0      	nop			@ (mov r8, r8)
 8000830:	46bd      	mov	sp, r7
 8000832:	b004      	add	sp, #16
 8000834:	bd80      	pop	{r7, pc}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	40000400 	.word	0x40000400
 800083c:	40021000 	.word	0x40021000
 8000840:	40014800 	.word	0x40014800

08000844 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	b089      	sub	sp, #36	@ 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	240c      	movs	r4, #12
 800084e:	193b      	adds	r3, r7, r4
 8000850:	0018      	movs	r0, r3
 8000852:	2314      	movs	r3, #20
 8000854:	001a      	movs	r2, r3
 8000856:	2100      	movs	r1, #0
 8000858:	f003 fa1e 	bl	8003c98 <memset>
  if(htim->Instance==TIM3)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a14      	ldr	r2, [pc, #80]	@ (80008b4 <HAL_TIM_MspPostInit+0x70>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d122      	bne.n	80008ac <HAL_TIM_MspPostInit+0x68>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000866:	4b14      	ldr	r3, [pc, #80]	@ (80008b8 <HAL_TIM_MspPostInit+0x74>)
 8000868:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800086a:	4b13      	ldr	r3, [pc, #76]	@ (80008b8 <HAL_TIM_MspPostInit+0x74>)
 800086c:	2104      	movs	r1, #4
 800086e:	430a      	orrs	r2, r1
 8000870:	635a      	str	r2, [r3, #52]	@ 0x34
 8000872:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <HAL_TIM_MspPostInit+0x74>)
 8000874:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000876:	2204      	movs	r2, #4
 8000878:	4013      	ands	r3, r2
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC15-OSCX_OUT (PC15)     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = DAC_PWM_Pin;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2280      	movs	r2, #128	@ 0x80
 8000882:	0212      	lsls	r2, r2, #8
 8000884:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000886:	0021      	movs	r1, r4
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2202      	movs	r2, #2
 800088c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM3;
 800089a:	187b      	adds	r3, r7, r1
 800089c:	2203      	movs	r2, #3
 800089e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(DAC_PWM_GPIO_Port, &GPIO_InitStruct);
 80008a0:	187b      	adds	r3, r7, r1
 80008a2:	4a06      	ldr	r2, [pc, #24]	@ (80008bc <HAL_TIM_MspPostInit+0x78>)
 80008a4:	0019      	movs	r1, r3
 80008a6:	0010      	movs	r0, r2
 80008a8:	f000 fb28 	bl	8000efc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80008ac:	46c0      	nop			@ (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	b009      	add	sp, #36	@ 0x24
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	40000400 	.word	0x40000400
 80008b8:	40021000 	.word	0x40021000
 80008bc:	50000800 	.word	0x50000800

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b590      	push	{r4, r7, lr}
 80008c2:	b091      	sub	sp, #68	@ 0x44
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	232c      	movs	r3, #44	@ 0x2c
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	0018      	movs	r0, r3
 80008ce:	2314      	movs	r3, #20
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f003 f9e0 	bl	8003c98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d8:	2410      	movs	r4, #16
 80008da:	193b      	adds	r3, r7, r4
 80008dc:	0018      	movs	r0, r3
 80008de:	231c      	movs	r3, #28
 80008e0:	001a      	movs	r2, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	f003 f9d8 	bl	8003c98 <memset>
  if(huart->Instance==USART1)
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a31      	ldr	r2, [pc, #196]	@ (80009b4 <HAL_UART_MspInit+0xf4>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d15b      	bne.n	80009aa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2201      	movs	r2, #1
 80008f6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	2200      	movs	r2, #0
 80008fc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008fe:	193b      	adds	r3, r7, r4
 8000900:	0018      	movs	r0, r3
 8000902:	f000 ffc1 	bl	8001888 <HAL_RCCEx_PeriphCLKConfig>
 8000906:	1e03      	subs	r3, r0, #0
 8000908:	d001      	beq.n	800090e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800090a:	f7ff ff35 	bl	8000778 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800090e:	4b2a      	ldr	r3, [pc, #168]	@ (80009b8 <HAL_UART_MspInit+0xf8>)
 8000910:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000912:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <HAL_UART_MspInit+0xf8>)
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	01c9      	lsls	r1, r1, #7
 8000918:	430a      	orrs	r2, r1
 800091a:	641a      	str	r2, [r3, #64]	@ 0x40
 800091c:	4b26      	ldr	r3, [pc, #152]	@ (80009b8 <HAL_UART_MspInit+0xf8>)
 800091e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	01db      	lsls	r3, r3, #7
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b23      	ldr	r3, [pc, #140]	@ (80009b8 <HAL_UART_MspInit+0xf8>)
 800092c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800092e:	4b22      	ldr	r3, [pc, #136]	@ (80009b8 <HAL_UART_MspInit+0xf8>)
 8000930:	2102      	movs	r1, #2
 8000932:	430a      	orrs	r2, r1
 8000934:	635a      	str	r2, [r3, #52]	@ 0x34
 8000936:	4b20      	ldr	r3, [pc, #128]	@ (80009b8 <HAL_UART_MspInit+0xf8>)
 8000938:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800093a:	2202      	movs	r2, #2
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000942:	242c      	movs	r4, #44	@ 0x2c
 8000944:	193b      	adds	r3, r7, r4
 8000946:	2240      	movs	r2, #64	@ 0x40
 8000948:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800094a:	193b      	adds	r3, r7, r4
 800094c:	2212      	movs	r2, #18
 800094e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000950:	193b      	adds	r3, r7, r4
 8000952:	2201      	movs	r2, #1
 8000954:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000956:	193b      	adds	r3, r7, r4
 8000958:	2200      	movs	r2, #0
 800095a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2200      	movs	r2, #0
 8000960:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	193b      	adds	r3, r7, r4
 8000964:	4a15      	ldr	r2, [pc, #84]	@ (80009bc <HAL_UART_MspInit+0xfc>)
 8000966:	0019      	movs	r1, r3
 8000968:	0010      	movs	r0, r2
 800096a:	f000 fac7 	bl	8000efc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX__Pin;
 800096e:	0021      	movs	r1, r4
 8000970:	187b      	adds	r3, r7, r1
 8000972:	2280      	movs	r2, #128	@ 0x80
 8000974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2202      	movs	r2, #2
 800097a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_RX__GPIO_Port, &GPIO_InitStruct);
 800098e:	187b      	adds	r3, r7, r1
 8000990:	4a0a      	ldr	r2, [pc, #40]	@ (80009bc <HAL_UART_MspInit+0xfc>)
 8000992:	0019      	movs	r1, r3
 8000994:	0010      	movs	r0, r2
 8000996:	f000 fab1 	bl	8000efc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	201b      	movs	r0, #27
 80009a0:	f000 f99e 	bl	8000ce0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a4:	201b      	movs	r0, #27
 80009a6:	f000 f9b0 	bl	8000d0a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009aa:	46c0      	nop			@ (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	b011      	add	sp, #68	@ 0x44
 80009b0:	bd90      	pop	{r4, r7, pc}
 80009b2:	46c0      	nop			@ (mov r8, r8)
 80009b4:	40013800 	.word	0x40013800
 80009b8:	40021000 	.word	0x40021000
 80009bc:	50000400 	.word	0x50000400

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009c4:	46c0      	nop			@ (mov r8, r8)
 80009c6:	e7fd      	b.n	80009c4 <NMI_Handler+0x4>

080009c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009cc:	46c0      	nop			@ (mov r8, r8)
 80009ce:	e7fd      	b.n	80009cc <HardFault_Handler+0x4>

080009d0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009d4:	46c0      	nop			@ (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	46c0      	nop			@ (mov r8, r8)
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009e8:	f000 f8b2 	bl	8000b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	46c0      	nop			@ (mov r8, r8)
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80009f8:	4b03      	ldr	r3, [pc, #12]	@ (8000a08 <TIM17_IRQHandler+0x14>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 f936 	bl	8001c6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000a00:	46c0      	nop			@ (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			@ (mov r8, r8)
 8000a08:	20000074 	.word	0x20000074

08000a0c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a10:	4b03      	ldr	r3, [pc, #12]	@ (8000a20 <USART1_IRQHandler+0x14>)
 8000a12:	0018      	movs	r0, r3
 8000a14:	f002 f8ba 	bl	8002b8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a18:	46c0      	nop			@ (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	200000c0 	.word	0x200000c0

08000a24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a28:	4b03      	ldr	r3, [pc, #12]	@ (8000a38 <SystemInit+0x14>)
 8000a2a:	2280      	movs	r2, #128	@ 0x80
 8000a2c:	0512      	lsls	r2, r2, #20
 8000a2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a30:	46c0      	nop			@ (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	46c0      	nop			@ (mov r8, r8)
 8000a38:	e000ed00 	.word	0xe000ed00

08000a3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a3c:	480d      	ldr	r0, [pc, #52]	@ (8000a74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a40:	f7ff fff0 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a46:	e003      	b.n	8000a50 <LoopCopyDataInit>

08000a48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a48:	4b0b      	ldr	r3, [pc, #44]	@ (8000a78 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a4e:	3104      	adds	r1, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a50:	480a      	ldr	r0, [pc, #40]	@ (8000a7c <LoopForever+0xa>)
  ldr r3, =_edata
 8000a52:	4b0b      	ldr	r3, [pc, #44]	@ (8000a80 <LoopForever+0xe>)
  adds r2, r0, r1
 8000a54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a58:	d3f6      	bcc.n	8000a48 <CopyDataInit>
  ldr r2, =_sbss
 8000a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000a84 <LoopForever+0x12>)
  b LoopFillZerobss
 8000a5c:	e002      	b.n	8000a64 <LoopFillZerobss>

08000a5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a5e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a60:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a62:	3204      	adds	r2, #4

08000a64 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a64:	4b08      	ldr	r3, [pc, #32]	@ (8000a88 <LoopForever+0x16>)
  cmp r2, r3
 8000a66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a68:	d3f9      	bcc.n	8000a5e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a6a:	f003 f91d 	bl	8003ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a6e:	f7ff fcc1 	bl	80003f4 <main>

08000a72 <LoopForever>:

LoopForever:
    b LoopForever
 8000a72:	e7fe      	b.n	8000a72 <LoopForever>
  ldr   r0, =_estack
 8000a74:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a78:	08003dec 	.word	0x08003dec
  ldr r0, =_sdata
 8000a7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a80:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000a84:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000a88:	2000015c 	.word	0x2000015c

08000a8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a8c:	e7fe      	b.n	8000a8c <ADC1_IRQHandler>

08000a8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b082      	sub	sp, #8
 8000a92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a94:	1dfb      	adds	r3, r7, #7
 8000a96:	2200      	movs	r2, #0
 8000a98:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a9a:	2003      	movs	r0, #3
 8000a9c:	f000 f80e 	bl	8000abc <HAL_InitTick>
 8000aa0:	1e03      	subs	r3, r0, #0
 8000aa2:	d003      	beq.n	8000aac <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	701a      	strb	r2, [r3, #0]
 8000aaa:	e001      	b.n	8000ab0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aac:	f7ff fe6a 	bl	8000784 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	781b      	ldrb	r3, [r3, #0]
}
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	b002      	add	sp, #8
 8000aba:	bd80      	pop	{r7, pc}

08000abc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	18fb      	adds	r3, r7, r3
 8000ac8:	2200      	movs	r2, #0
 8000aca:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000acc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b44 <HAL_InitTick+0x88>)
 8000ace:	781b      	ldrb	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d02b      	beq.n	8000b2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8000b48 <HAL_InitTick+0x8c>)
 8000ad6:	681c      	ldr	r4, [r3, #0]
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b44 <HAL_InitTick+0x88>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	0019      	movs	r1, r3
 8000ade:	23fa      	movs	r3, #250	@ 0xfa
 8000ae0:	0098      	lsls	r0, r3, #2
 8000ae2:	f7ff fb11 	bl	8000108 <__udivsi3>
 8000ae6:	0003      	movs	r3, r0
 8000ae8:	0019      	movs	r1, r3
 8000aea:	0020      	movs	r0, r4
 8000aec:	f7ff fb0c 	bl	8000108 <__udivsi3>
 8000af0:	0003      	movs	r3, r0
 8000af2:	0018      	movs	r0, r3
 8000af4:	f000 f919 	bl	8000d2a <HAL_SYSTICK_Config>
 8000af8:	1e03      	subs	r3, r0, #0
 8000afa:	d112      	bne.n	8000b22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2b03      	cmp	r3, #3
 8000b00:	d80a      	bhi.n	8000b18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	2301      	movs	r3, #1
 8000b06:	425b      	negs	r3, r3
 8000b08:	2200      	movs	r2, #0
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f8e8 	bl	8000ce0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	@ (8000b4c <HAL_InitTick+0x90>)
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	601a      	str	r2, [r3, #0]
 8000b16:	e00d      	b.n	8000b34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b18:	230f      	movs	r3, #15
 8000b1a:	18fb      	adds	r3, r7, r3
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	701a      	strb	r2, [r3, #0]
 8000b20:	e008      	b.n	8000b34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b22:	230f      	movs	r3, #15
 8000b24:	18fb      	adds	r3, r7, r3
 8000b26:	2201      	movs	r2, #1
 8000b28:	701a      	strb	r2, [r3, #0]
 8000b2a:	e003      	b.n	8000b34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	18fb      	adds	r3, r7, r3
 8000b30:	2201      	movs	r2, #1
 8000b32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	781b      	ldrb	r3, [r3, #0]
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b005      	add	sp, #20
 8000b40:	bd90      	pop	{r4, r7, pc}
 8000b42:	46c0      	nop			@ (mov r8, r8)
 8000b44:	20000008 	.word	0x20000008
 8000b48:	20000000 	.word	0x20000000
 8000b4c:	20000004 	.word	0x20000004

08000b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <HAL_IncTick+0x1c>)
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	001a      	movs	r2, r3
 8000b5a:	4b05      	ldr	r3, [pc, #20]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	18d2      	adds	r2, r2, r3
 8000b60:	4b03      	ldr	r3, [pc, #12]	@ (8000b70 <HAL_IncTick+0x20>)
 8000b62:	601a      	str	r2, [r3, #0]
}
 8000b64:	46c0      	nop			@ (mov r8, r8)
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	46c0      	nop			@ (mov r8, r8)
 8000b6c:	20000008 	.word	0x20000008
 8000b70:	20000158 	.word	0x20000158

08000b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  return uwTick;
 8000b78:	4b02      	ldr	r3, [pc, #8]	@ (8000b84 <HAL_GetTick+0x10>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
}
 8000b7c:	0018      	movs	r0, r3
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	46c0      	nop			@ (mov r8, r8)
 8000b84:	20000158 	.word	0x20000158

08000b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	0002      	movs	r2, r0
 8000b90:	1dfb      	adds	r3, r7, #7
 8000b92:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b94:	1dfb      	adds	r3, r7, #7
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b7f      	cmp	r3, #127	@ 0x7f
 8000b9a:	d809      	bhi.n	8000bb0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	001a      	movs	r2, r3
 8000ba2:	231f      	movs	r3, #31
 8000ba4:	401a      	ands	r2, r3
 8000ba6:	4b04      	ldr	r3, [pc, #16]	@ (8000bb8 <__NVIC_EnableIRQ+0x30>)
 8000ba8:	2101      	movs	r1, #1
 8000baa:	4091      	lsls	r1, r2
 8000bac:	000a      	movs	r2, r1
 8000bae:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000bb0:	46c0      	nop			@ (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b002      	add	sp, #8
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	e000e100 	.word	0xe000e100

08000bbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	0002      	movs	r2, r0
 8000bc4:	6039      	str	r1, [r7, #0]
 8000bc6:	1dfb      	adds	r3, r7, #7
 8000bc8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	781b      	ldrb	r3, [r3, #0]
 8000bce:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bd0:	d828      	bhi.n	8000c24 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd2:	4a2f      	ldr	r2, [pc, #188]	@ (8000c90 <__NVIC_SetPriority+0xd4>)
 8000bd4:	1dfb      	adds	r3, r7, #7
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b25b      	sxtb	r3, r3
 8000bda:	089b      	lsrs	r3, r3, #2
 8000bdc:	33c0      	adds	r3, #192	@ 0xc0
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	589b      	ldr	r3, [r3, r2]
 8000be2:	1dfa      	adds	r2, r7, #7
 8000be4:	7812      	ldrb	r2, [r2, #0]
 8000be6:	0011      	movs	r1, r2
 8000be8:	2203      	movs	r2, #3
 8000bea:	400a      	ands	r2, r1
 8000bec:	00d2      	lsls	r2, r2, #3
 8000bee:	21ff      	movs	r1, #255	@ 0xff
 8000bf0:	4091      	lsls	r1, r2
 8000bf2:	000a      	movs	r2, r1
 8000bf4:	43d2      	mvns	r2, r2
 8000bf6:	401a      	ands	r2, r3
 8000bf8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	019b      	lsls	r3, r3, #6
 8000bfe:	22ff      	movs	r2, #255	@ 0xff
 8000c00:	401a      	ands	r2, r3
 8000c02:	1dfb      	adds	r3, r7, #7
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	0018      	movs	r0, r3
 8000c08:	2303      	movs	r3, #3
 8000c0a:	4003      	ands	r3, r0
 8000c0c:	00db      	lsls	r3, r3, #3
 8000c0e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c10:	481f      	ldr	r0, [pc, #124]	@ (8000c90 <__NVIC_SetPriority+0xd4>)
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	089b      	lsrs	r3, r3, #2
 8000c1a:	430a      	orrs	r2, r1
 8000c1c:	33c0      	adds	r3, #192	@ 0xc0
 8000c1e:	009b      	lsls	r3, r3, #2
 8000c20:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c22:	e031      	b.n	8000c88 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c24:	4a1b      	ldr	r2, [pc, #108]	@ (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c26:	1dfb      	adds	r3, r7, #7
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	0019      	movs	r1, r3
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	400b      	ands	r3, r1
 8000c30:	3b08      	subs	r3, #8
 8000c32:	089b      	lsrs	r3, r3, #2
 8000c34:	3306      	adds	r3, #6
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	18d3      	adds	r3, r2, r3
 8000c3a:	3304      	adds	r3, #4
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	1dfa      	adds	r2, r7, #7
 8000c40:	7812      	ldrb	r2, [r2, #0]
 8000c42:	0011      	movs	r1, r2
 8000c44:	2203      	movs	r2, #3
 8000c46:	400a      	ands	r2, r1
 8000c48:	00d2      	lsls	r2, r2, #3
 8000c4a:	21ff      	movs	r1, #255	@ 0xff
 8000c4c:	4091      	lsls	r1, r2
 8000c4e:	000a      	movs	r2, r1
 8000c50:	43d2      	mvns	r2, r2
 8000c52:	401a      	ands	r2, r3
 8000c54:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	019b      	lsls	r3, r3, #6
 8000c5a:	22ff      	movs	r2, #255	@ 0xff
 8000c5c:	401a      	ands	r2, r3
 8000c5e:	1dfb      	adds	r3, r7, #7
 8000c60:	781b      	ldrb	r3, [r3, #0]
 8000c62:	0018      	movs	r0, r3
 8000c64:	2303      	movs	r3, #3
 8000c66:	4003      	ands	r3, r0
 8000c68:	00db      	lsls	r3, r3, #3
 8000c6a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c6c:	4809      	ldr	r0, [pc, #36]	@ (8000c94 <__NVIC_SetPriority+0xd8>)
 8000c6e:	1dfb      	adds	r3, r7, #7
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	001c      	movs	r4, r3
 8000c74:	230f      	movs	r3, #15
 8000c76:	4023      	ands	r3, r4
 8000c78:	3b08      	subs	r3, #8
 8000c7a:	089b      	lsrs	r3, r3, #2
 8000c7c:	430a      	orrs	r2, r1
 8000c7e:	3306      	adds	r3, #6
 8000c80:	009b      	lsls	r3, r3, #2
 8000c82:	18c3      	adds	r3, r0, r3
 8000c84:	3304      	adds	r3, #4
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	46c0      	nop			@ (mov r8, r8)
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	b003      	add	sp, #12
 8000c8e:	bd90      	pop	{r4, r7, pc}
 8000c90:	e000e100 	.word	0xe000e100
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	1e5a      	subs	r2, r3, #1
 8000ca4:	2380      	movs	r3, #128	@ 0x80
 8000ca6:	045b      	lsls	r3, r3, #17
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d301      	bcc.n	8000cb0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cac:	2301      	movs	r3, #1
 8000cae:	e010      	b.n	8000cd2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cdc <SysTick_Config+0x44>)
 8000cb2:	687a      	ldr	r2, [r7, #4]
 8000cb4:	3a01      	subs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb8:	2301      	movs	r3, #1
 8000cba:	425b      	negs	r3, r3
 8000cbc:	2103      	movs	r1, #3
 8000cbe:	0018      	movs	r0, r3
 8000cc0:	f7ff ff7c 	bl	8000bbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc4:	4b05      	ldr	r3, [pc, #20]	@ (8000cdc <SysTick_Config+0x44>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cca:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <SysTick_Config+0x44>)
 8000ccc:	2207      	movs	r2, #7
 8000cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	0018      	movs	r0, r3
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			@ (mov r8, r8)
 8000cdc:	e000e010 	.word	0xe000e010

08000ce0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b084      	sub	sp, #16
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60b9      	str	r1, [r7, #8]
 8000ce8:	607a      	str	r2, [r7, #4]
 8000cea:	210f      	movs	r1, #15
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	1c02      	adds	r2, r0, #0
 8000cf0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000cf2:	68ba      	ldr	r2, [r7, #8]
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b25b      	sxtb	r3, r3
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f7ff ff5d 	bl	8000bbc <__NVIC_SetPriority>
}
 8000d02:	46c0      	nop			@ (mov r8, r8)
 8000d04:	46bd      	mov	sp, r7
 8000d06:	b004      	add	sp, #16
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	0002      	movs	r2, r0
 8000d12:	1dfb      	adds	r3, r7, #7
 8000d14:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d16:	1dfb      	adds	r3, r7, #7
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	b25b      	sxtb	r3, r3
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	f7ff ff33 	bl	8000b88 <__NVIC_EnableIRQ>
}
 8000d22:	46c0      	nop			@ (mov r8, r8)
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	0018      	movs	r0, r3
 8000d36:	f7ff ffaf 	bl	8000c98 <SysTick_Config>
 8000d3a:	0003      	movs	r3, r0
}
 8000d3c:	0018      	movs	r0, r3
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	b002      	add	sp, #8
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b082      	sub	sp, #8
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e050      	b.n	8000df8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2225      	movs	r2, #37	@ 0x25
 8000d5a:	5c9b      	ldrb	r3, [r3, r2]
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b02      	cmp	r3, #2
 8000d60:	d008      	beq.n	8000d74 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2204      	movs	r2, #4
 8000d66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2224      	movs	r2, #36	@ 0x24
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d70:	2301      	movs	r3, #1
 8000d72:	e041      	b.n	8000df8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	210e      	movs	r1, #14
 8000d80:	438a      	bics	r2, r1
 8000d82:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d8e:	491c      	ldr	r1, [pc, #112]	@ (8000e00 <HAL_DMA_Abort+0xbc>)
 8000d90:	400a      	ands	r2, r1
 8000d92:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2101      	movs	r1, #1
 8000da0:	438a      	bics	r2, r1
 8000da2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000da4:	4b17      	ldr	r3, [pc, #92]	@ (8000e04 <HAL_DMA_Abort+0xc0>)
 8000da6:	6859      	ldr	r1, [r3, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	221c      	movs	r2, #28
 8000dae:	4013      	ands	r3, r2
 8000db0:	2201      	movs	r2, #1
 8000db2:	409a      	lsls	r2, r3
 8000db4:	4b13      	ldr	r3, [pc, #76]	@ (8000e04 <HAL_DMA_Abort+0xc0>)
 8000db6:	430a      	orrs	r2, r1
 8000db8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000dc2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d00c      	beq.n	8000de6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dd6:	490a      	ldr	r1, [pc, #40]	@ (8000e00 <HAL_DMA_Abort+0xbc>)
 8000dd8:	400a      	ands	r2, r1
 8000dda:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000de4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2225      	movs	r2, #37	@ 0x25
 8000dea:	2101      	movs	r1, #1
 8000dec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2224      	movs	r2, #36	@ 0x24
 8000df2:	2100      	movs	r1, #0
 8000df4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	b002      	add	sp, #8
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	fffffeff 	.word	0xfffffeff
 8000e04:	40020000 	.word	0x40020000

08000e08 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e10:	230f      	movs	r3, #15
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	2200      	movs	r2, #0
 8000e16:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2224      	movs	r2, #36	@ 0x24
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2224      	movs	r2, #36	@ 0x24
 8000e24:	5c9b      	ldrb	r3, [r3, r2]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d101      	bne.n	8000e2e <HAL_DMA_Abort_IT+0x26>
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	e05e      	b.n	8000eec <HAL_DMA_Abort_IT+0xe4>
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2224      	movs	r2, #36	@ 0x24
 8000e32:	2101      	movs	r1, #1
 8000e34:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2225      	movs	r2, #37	@ 0x25
 8000e3a:	5c9b      	ldrb	r3, [r3, r2]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	2b02      	cmp	r3, #2
 8000e40:	d007      	beq.n	8000e52 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2204      	movs	r2, #4
 8000e46:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fb      	adds	r3, r7, r3
 8000e4c:	2201      	movs	r2, #1
 8000e4e:	701a      	strb	r2, [r3, #0]
 8000e50:	e049      	b.n	8000ee6 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	210e      	movs	r1, #14
 8000e5e:	438a      	bics	r2, r1
 8000e60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	438a      	bics	r2, r1
 8000e70:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e7c:	491d      	ldr	r1, [pc, #116]	@ (8000ef4 <HAL_DMA_Abort_IT+0xec>)
 8000e7e:	400a      	ands	r2, r1
 8000e80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000e82:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <HAL_DMA_Abort_IT+0xf0>)
 8000e84:	6859      	ldr	r1, [r3, #4]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8a:	221c      	movs	r2, #28
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	2201      	movs	r2, #1
 8000e90:	409a      	lsls	r2, r3
 8000e92:	4b19      	ldr	r3, [pc, #100]	@ (8000ef8 <HAL_DMA_Abort_IT+0xf0>)
 8000e94:	430a      	orrs	r2, r1
 8000e96:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e9c:	687a      	ldr	r2, [r7, #4]
 8000e9e:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ea0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d00c      	beq.n	8000ec4 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000eb4:	490f      	ldr	r1, [pc, #60]	@ (8000ef4 <HAL_DMA_Abort_IT+0xec>)
 8000eb6:	400a      	ands	r2, r1
 8000eb8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000ec2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2225      	movs	r2, #37	@ 0x25
 8000ec8:	2101      	movs	r1, #1
 8000eca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	2224      	movs	r2, #36	@ 0x24
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	0010      	movs	r0, r2
 8000ee4:	4798      	blx	r3
    }
  }
  return status;
 8000ee6:	230f      	movs	r3, #15
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	781b      	ldrb	r3, [r3, #0]
}
 8000eec:	0018      	movs	r0, r3
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	b004      	add	sp, #16
 8000ef2:	bd80      	pop	{r7, pc}
 8000ef4:	fffffeff 	.word	0xfffffeff
 8000ef8:	40020000 	.word	0x40020000

08000efc <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f06:	2300      	movs	r3, #0
 8000f08:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f0a:	e14d      	b.n	80011a8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	2101      	movs	r1, #1
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4091      	lsls	r1, r2
 8000f16:	000a      	movs	r2, r1
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x28>
 8000f22:	e13e      	b.n	80011a2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	2b02      	cmp	r3, #2
 8000f2a:	d003      	beq.n	8000f34 <HAL_GPIO_Init+0x38>
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b12      	cmp	r3, #18
 8000f32:	d125      	bne.n	8000f80 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f34:	693b      	ldr	r3, [r7, #16]
 8000f36:	08da      	lsrs	r2, r3, #3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3208      	adds	r2, #8
 8000f3c:	0092      	lsls	r2, r2, #2
 8000f3e:	58d3      	ldr	r3, [r2, r3]
 8000f40:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	2207      	movs	r2, #7
 8000f46:	4013      	ands	r3, r2
 8000f48:	009b      	lsls	r3, r3, #2
 8000f4a:	220f      	movs	r2, #15
 8000f4c:	409a      	lsls	r2, r3
 8000f4e:	0013      	movs	r3, r2
 8000f50:	43da      	mvns	r2, r3
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	4013      	ands	r3, r2
 8000f56:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	691b      	ldr	r3, [r3, #16]
 8000f5c:	220f      	movs	r2, #15
 8000f5e:	401a      	ands	r2, r3
 8000f60:	693b      	ldr	r3, [r7, #16]
 8000f62:	2107      	movs	r1, #7
 8000f64:	400b      	ands	r3, r1
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	409a      	lsls	r2, r3
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	697a      	ldr	r2, [r7, #20]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000f72:	693b      	ldr	r3, [r7, #16]
 8000f74:	08da      	lsrs	r2, r3, #3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	3208      	adds	r2, #8
 8000f7a:	0092      	lsls	r2, r2, #2
 8000f7c:	6979      	ldr	r1, [r7, #20]
 8000f7e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	2203      	movs	r2, #3
 8000f8c:	409a      	lsls	r2, r3
 8000f8e:	0013      	movs	r3, r2
 8000f90:	43da      	mvns	r2, r3
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	4013      	ands	r3, r2
 8000f96:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	401a      	ands	r2, r3
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	697a      	ldr	r2, [r7, #20]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	697a      	ldr	r2, [r7, #20]
 8000fb2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d00b      	beq.n	8000fd4 <HAL_GPIO_Init+0xd8>
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d007      	beq.n	8000fd4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fc8:	2b11      	cmp	r3, #17
 8000fca:	d003      	beq.n	8000fd4 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b12      	cmp	r3, #18
 8000fd2:	d130      	bne.n	8001036 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	2203      	movs	r2, #3
 8000fe0:	409a      	lsls	r2, r3
 8000fe2:	0013      	movs	r3, r2
 8000fe4:	43da      	mvns	r2, r3
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	4013      	ands	r3, r2
 8000fea:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	68da      	ldr	r2, [r3, #12]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800100a:	2201      	movs	r2, #1
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	409a      	lsls	r2, r3
 8001010:	0013      	movs	r3, r2
 8001012:	43da      	mvns	r2, r3
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	4013      	ands	r3, r2
 8001018:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	091b      	lsrs	r3, r3, #4
 8001020:	2201      	movs	r2, #1
 8001022:	401a      	ands	r2, r3
 8001024:	693b      	ldr	r3, [r7, #16]
 8001026:	409a      	lsls	r2, r3
 8001028:	0013      	movs	r3, r2
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4313      	orrs	r3, r2
 800102e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	2b03      	cmp	r3, #3
 800103c:	d017      	beq.n	800106e <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	2203      	movs	r2, #3
 800104a:	409a      	lsls	r2, r3
 800104c:	0013      	movs	r3, r2
 800104e:	43da      	mvns	r2, r3
 8001050:	697b      	ldr	r3, [r7, #20]
 8001052:	4013      	ands	r3, r2
 8001054:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	689a      	ldr	r2, [r3, #8]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	005b      	lsls	r3, r3, #1
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	697a      	ldr	r2, [r7, #20]
 8001064:	4313      	orrs	r3, r2
 8001066:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685a      	ldr	r2, [r3, #4]
 8001072:	2380      	movs	r3, #128	@ 0x80
 8001074:	055b      	lsls	r3, r3, #21
 8001076:	4013      	ands	r3, r2
 8001078:	d100      	bne.n	800107c <HAL_GPIO_Init+0x180>
 800107a:	e092      	b.n	80011a2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800107c:	4a50      	ldr	r2, [pc, #320]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	089b      	lsrs	r3, r3, #2
 8001082:	3318      	adds	r3, #24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	589b      	ldr	r3, [r3, r2]
 8001088:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	2203      	movs	r2, #3
 800108e:	4013      	ands	r3, r2
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	220f      	movs	r2, #15
 8001094:	409a      	lsls	r2, r3
 8001096:	0013      	movs	r3, r2
 8001098:	43da      	mvns	r2, r3
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	4013      	ands	r3, r2
 800109e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010a0:	687a      	ldr	r2, [r7, #4]
 80010a2:	23a0      	movs	r3, #160	@ 0xa0
 80010a4:	05db      	lsls	r3, r3, #23
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d013      	beq.n	80010d2 <HAL_GPIO_Init+0x1d6>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a45      	ldr	r2, [pc, #276]	@ (80011c4 <HAL_GPIO_Init+0x2c8>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d00d      	beq.n	80010ce <HAL_GPIO_Init+0x1d2>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a44      	ldr	r2, [pc, #272]	@ (80011c8 <HAL_GPIO_Init+0x2cc>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d007      	beq.n	80010ca <HAL_GPIO_Init+0x1ce>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a43      	ldr	r2, [pc, #268]	@ (80011cc <HAL_GPIO_Init+0x2d0>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d101      	bne.n	80010c6 <HAL_GPIO_Init+0x1ca>
 80010c2:	2305      	movs	r3, #5
 80010c4:	e006      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010c6:	2306      	movs	r3, #6
 80010c8:	e004      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010ca:	2302      	movs	r3, #2
 80010cc:	e002      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010ce:	2301      	movs	r3, #1
 80010d0:	e000      	b.n	80010d4 <HAL_GPIO_Init+0x1d8>
 80010d2:	2300      	movs	r3, #0
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	2103      	movs	r1, #3
 80010d8:	400a      	ands	r2, r1
 80010da:	00d2      	lsls	r2, r2, #3
 80010dc:	4093      	lsls	r3, r2
 80010de:	697a      	ldr	r2, [r7, #20]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80010e4:	4936      	ldr	r1, [pc, #216]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	3318      	adds	r3, #24
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	697a      	ldr	r2, [r7, #20]
 80010f0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80010f2:	4a33      	ldr	r2, [pc, #204]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 80010f4:	2380      	movs	r3, #128	@ 0x80
 80010f6:	58d3      	ldr	r3, [r2, r3]
 80010f8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	43da      	mvns	r2, r3
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	4013      	ands	r3, r2
 8001102:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	685a      	ldr	r2, [r3, #4]
 8001108:	2380      	movs	r3, #128	@ 0x80
 800110a:	025b      	lsls	r3, r3, #9
 800110c:	4013      	ands	r3, r2
 800110e:	d003      	beq.n	8001118 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	4313      	orrs	r3, r2
 8001116:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001118:	4929      	ldr	r1, [pc, #164]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 800111a:	2280      	movs	r2, #128	@ 0x80
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001120:	4a27      	ldr	r2, [pc, #156]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001122:	2384      	movs	r3, #132	@ 0x84
 8001124:	58d3      	ldr	r3, [r2, r3]
 8001126:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	43da      	mvns	r2, r3
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	4013      	ands	r3, r2
 8001130:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685a      	ldr	r2, [r3, #4]
 8001136:	2380      	movs	r3, #128	@ 0x80
 8001138:	029b      	lsls	r3, r3, #10
 800113a:	4013      	ands	r3, r2
 800113c:	d003      	beq.n	8001146 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4313      	orrs	r3, r2
 8001144:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001146:	491e      	ldr	r1, [pc, #120]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001148:	2284      	movs	r2, #132	@ 0x84
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800114e:	4b1c      	ldr	r3, [pc, #112]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	43da      	mvns	r2, r3
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	4013      	ands	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	2380      	movs	r3, #128	@ 0x80
 8001164:	035b      	lsls	r3, r3, #13
 8001166:	4013      	ands	r3, r2
 8001168:	d003      	beq.n	8001172 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	4313      	orrs	r3, r2
 8001170:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001172:	4b13      	ldr	r3, [pc, #76]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 8001174:	697a      	ldr	r2, [r7, #20]
 8001176:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001178:	4b11      	ldr	r3, [pc, #68]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43da      	mvns	r2, r3
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	4013      	ands	r3, r2
 8001186:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685a      	ldr	r2, [r3, #4]
 800118c:	2380      	movs	r3, #128	@ 0x80
 800118e:	039b      	lsls	r3, r3, #14
 8001190:	4013      	ands	r3, r2
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800119c:	4b08      	ldr	r3, [pc, #32]	@ (80011c0 <HAL_GPIO_Init+0x2c4>)
 800119e:	697a      	ldr	r2, [r7, #20]
 80011a0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	3301      	adds	r3, #1
 80011a6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	40da      	lsrs	r2, r3
 80011b0:	1e13      	subs	r3, r2, #0
 80011b2:	d000      	beq.n	80011b6 <HAL_GPIO_Init+0x2ba>
 80011b4:	e6aa      	b.n	8000f0c <HAL_GPIO_Init+0x10>
  }
}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	46c0      	nop			@ (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b006      	add	sp, #24
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40021800 	.word	0x40021800
 80011c4:	50000400 	.word	0x50000400
 80011c8:	50000800 	.word	0x50000800
 80011cc:	50001400 	.word	0x50001400

080011d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e1d0      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	d100      	bne.n	80011ee <HAL_RCC_OscConfig+0x1e>
 80011ec:	e069      	b.n	80012c2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011ee:	4bc8      	ldr	r3, [pc, #800]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	2238      	movs	r2, #56	@ 0x38
 80011f4:	4013      	ands	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	2b08      	cmp	r3, #8
 80011fc:	d105      	bne.n	800120a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d15d      	bne.n	80012c2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	e1bc      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	2380      	movs	r3, #128	@ 0x80
 8001210:	025b      	lsls	r3, r3, #9
 8001212:	429a      	cmp	r2, r3
 8001214:	d107      	bne.n	8001226 <HAL_RCC_OscConfig+0x56>
 8001216:	4bbe      	ldr	r3, [pc, #760]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	4bbd      	ldr	r3, [pc, #756]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 800121c:	2180      	movs	r1, #128	@ 0x80
 800121e:	0249      	lsls	r1, r1, #9
 8001220:	430a      	orrs	r2, r1
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	e020      	b.n	8001268 <HAL_RCC_OscConfig+0x98>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	23a0      	movs	r3, #160	@ 0xa0
 800122c:	02db      	lsls	r3, r3, #11
 800122e:	429a      	cmp	r2, r3
 8001230:	d10e      	bne.n	8001250 <HAL_RCC_OscConfig+0x80>
 8001232:	4bb7      	ldr	r3, [pc, #732]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	4bb6      	ldr	r3, [pc, #728]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001238:	2180      	movs	r1, #128	@ 0x80
 800123a:	02c9      	lsls	r1, r1, #11
 800123c:	430a      	orrs	r2, r1
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	4bb3      	ldr	r3, [pc, #716]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	4bb2      	ldr	r3, [pc, #712]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001246:	2180      	movs	r1, #128	@ 0x80
 8001248:	0249      	lsls	r1, r1, #9
 800124a:	430a      	orrs	r2, r1
 800124c:	601a      	str	r2, [r3, #0]
 800124e:	e00b      	b.n	8001268 <HAL_RCC_OscConfig+0x98>
 8001250:	4baf      	ldr	r3, [pc, #700]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	4bae      	ldr	r3, [pc, #696]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001256:	49af      	ldr	r1, [pc, #700]	@ (8001514 <HAL_RCC_OscConfig+0x344>)
 8001258:	400a      	ands	r2, r1
 800125a:	601a      	str	r2, [r3, #0]
 800125c:	4bac      	ldr	r3, [pc, #688]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4bab      	ldr	r3, [pc, #684]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001262:	49ad      	ldr	r1, [pc, #692]	@ (8001518 <HAL_RCC_OscConfig+0x348>)
 8001264:	400a      	ands	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d014      	beq.n	800129a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001270:	f7ff fc80 	bl	8000b74 <HAL_GetTick>
 8001274:	0003      	movs	r3, r0
 8001276:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800127a:	f7ff fc7b 	bl	8000b74 <HAL_GetTick>
 800127e:	0002      	movs	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b64      	cmp	r3, #100	@ 0x64
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e17b      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800128c:	4ba0      	ldr	r3, [pc, #640]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	2380      	movs	r3, #128	@ 0x80
 8001292:	029b      	lsls	r3, r3, #10
 8001294:	4013      	ands	r3, r2
 8001296:	d0f0      	beq.n	800127a <HAL_RCC_OscConfig+0xaa>
 8001298:	e013      	b.n	80012c2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800129a:	f7ff fc6b 	bl	8000b74 <HAL_GetTick>
 800129e:	0003      	movs	r3, r0
 80012a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012a2:	e008      	b.n	80012b6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80012a4:	f7ff fc66 	bl	8000b74 <HAL_GetTick>
 80012a8:	0002      	movs	r2, r0
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	2b64      	cmp	r3, #100	@ 0x64
 80012b0:	d901      	bls.n	80012b6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e166      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012b6:	4b96      	ldr	r3, [pc, #600]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80012b8:	681a      	ldr	r2, [r3, #0]
 80012ba:	2380      	movs	r3, #128	@ 0x80
 80012bc:	029b      	lsls	r3, r3, #10
 80012be:	4013      	ands	r3, r2
 80012c0:	d1f0      	bne.n	80012a4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2202      	movs	r2, #2
 80012c8:	4013      	ands	r3, r2
 80012ca:	d100      	bne.n	80012ce <HAL_RCC_OscConfig+0xfe>
 80012cc:	e086      	b.n	80013dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012ce:	4b90      	ldr	r3, [pc, #576]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	2238      	movs	r2, #56	@ 0x38
 80012d4:	4013      	ands	r3, r2
 80012d6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d12f      	bne.n	800133e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d101      	bne.n	80012ea <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e14c      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b89      	ldr	r3, [pc, #548]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	4a8b      	ldr	r2, [pc, #556]	@ (800151c <HAL_RCC_OscConfig+0x34c>)
 80012f0:	4013      	ands	r3, r2
 80012f2:	0019      	movs	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	021a      	lsls	r2, r3, #8
 80012fa:	4b85      	ldr	r3, [pc, #532]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001300:	697b      	ldr	r3, [r7, #20]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d112      	bne.n	800132c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001306:	4b82      	ldr	r3, [pc, #520]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4a85      	ldr	r2, [pc, #532]	@ (8001520 <HAL_RCC_OscConfig+0x350>)
 800130c:	4013      	ands	r3, r2
 800130e:	0019      	movs	r1, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	4b7e      	ldr	r3, [pc, #504]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001316:	430a      	orrs	r2, r1
 8001318:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800131a:	4b7d      	ldr	r3, [pc, #500]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	0adb      	lsrs	r3, r3, #11
 8001320:	2207      	movs	r2, #7
 8001322:	4013      	ands	r3, r2
 8001324:	4a7f      	ldr	r2, [pc, #508]	@ (8001524 <HAL_RCC_OscConfig+0x354>)
 8001326:	40da      	lsrs	r2, r3
 8001328:	4b7f      	ldr	r3, [pc, #508]	@ (8001528 <HAL_RCC_OscConfig+0x358>)
 800132a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800132c:	4b7f      	ldr	r3, [pc, #508]	@ (800152c <HAL_RCC_OscConfig+0x35c>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	0018      	movs	r0, r3
 8001332:	f7ff fbc3 	bl	8000abc <HAL_InitTick>
 8001336:	1e03      	subs	r3, r0, #0
 8001338:	d050      	beq.n	80013dc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e122      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	68db      	ldr	r3, [r3, #12]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d030      	beq.n	80013a8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001346:	4b72      	ldr	r3, [pc, #456]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a75      	ldr	r2, [pc, #468]	@ (8001520 <HAL_RCC_OscConfig+0x350>)
 800134c:	4013      	ands	r3, r2
 800134e:	0019      	movs	r1, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	4b6e      	ldr	r3, [pc, #440]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001356:	430a      	orrs	r2, r1
 8001358:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800135a:	4b6d      	ldr	r3, [pc, #436]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	4b6c      	ldr	r3, [pc, #432]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001360:	2180      	movs	r1, #128	@ 0x80
 8001362:	0049      	lsls	r1, r1, #1
 8001364:	430a      	orrs	r2, r1
 8001366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001368:	f7ff fc04 	bl	8000b74 <HAL_GetTick>
 800136c:	0003      	movs	r3, r0
 800136e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001372:	f7ff fbff 	bl	8000b74 <HAL_GetTick>
 8001376:	0002      	movs	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e0ff      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001384:	4b62      	ldr	r3, [pc, #392]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	2380      	movs	r3, #128	@ 0x80
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	4013      	ands	r3, r2
 800138e:	d0f0      	beq.n	8001372 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001390:	4b5f      	ldr	r3, [pc, #380]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	4a61      	ldr	r2, [pc, #388]	@ (800151c <HAL_RCC_OscConfig+0x34c>)
 8001396:	4013      	ands	r3, r2
 8001398:	0019      	movs	r1, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	695b      	ldr	r3, [r3, #20]
 800139e:	021a      	lsls	r2, r3, #8
 80013a0:	4b5b      	ldr	r3, [pc, #364]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80013a2:	430a      	orrs	r2, r1
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	e019      	b.n	80013dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80013a8:	4b59      	ldr	r3, [pc, #356]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80013aa:	681a      	ldr	r2, [r3, #0]
 80013ac:	4b58      	ldr	r3, [pc, #352]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80013ae:	4960      	ldr	r1, [pc, #384]	@ (8001530 <HAL_RCC_OscConfig+0x360>)
 80013b0:	400a      	ands	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b4:	f7ff fbde 	bl	8000b74 <HAL_GetTick>
 80013b8:	0003      	movs	r3, r0
 80013ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013bc:	e008      	b.n	80013d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013be:	f7ff fbd9 	bl	8000b74 <HAL_GetTick>
 80013c2:	0002      	movs	r2, r0
 80013c4:	693b      	ldr	r3, [r7, #16]
 80013c6:	1ad3      	subs	r3, r2, r3
 80013c8:	2b02      	cmp	r3, #2
 80013ca:	d901      	bls.n	80013d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80013cc:	2303      	movs	r3, #3
 80013ce:	e0d9      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013d0:	4b4f      	ldr	r3, [pc, #316]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	@ 0x80
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	4013      	ands	r3, r2
 80013da:	d1f0      	bne.n	80013be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2208      	movs	r2, #8
 80013e2:	4013      	ands	r3, r2
 80013e4:	d042      	beq.n	800146c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80013e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	2238      	movs	r2, #56	@ 0x38
 80013ec:	4013      	ands	r3, r2
 80013ee:	2b18      	cmp	r3, #24
 80013f0:	d105      	bne.n	80013fe <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	699b      	ldr	r3, [r3, #24]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d138      	bne.n	800146c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0c2      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d019      	beq.n	800143a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001406:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800140a:	4b41      	ldr	r3, [pc, #260]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 800140c:	2101      	movs	r1, #1
 800140e:	430a      	orrs	r2, r1
 8001410:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001412:	f7ff fbaf 	bl	8000b74 <HAL_GetTick>
 8001416:	0003      	movs	r3, r0
 8001418:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800141c:	f7ff fbaa 	bl	8000b74 <HAL_GetTick>
 8001420:	0002      	movs	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e0aa      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800142e:	4b38      	ldr	r3, [pc, #224]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001432:	2202      	movs	r2, #2
 8001434:	4013      	ands	r3, r2
 8001436:	d0f1      	beq.n	800141c <HAL_RCC_OscConfig+0x24c>
 8001438:	e018      	b.n	800146c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800143a:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 800143c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800143e:	4b34      	ldr	r3, [pc, #208]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001440:	2101      	movs	r1, #1
 8001442:	438a      	bics	r2, r1
 8001444:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001446:	f7ff fb95 	bl	8000b74 <HAL_GetTick>
 800144a:	0003      	movs	r3, r0
 800144c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001450:	f7ff fb90 	bl	8000b74 <HAL_GetTick>
 8001454:	0002      	movs	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b02      	cmp	r3, #2
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e090      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001462:	4b2b      	ldr	r3, [pc, #172]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	2202      	movs	r2, #2
 8001468:	4013      	ands	r3, r2
 800146a:	d1f1      	bne.n	8001450 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2204      	movs	r2, #4
 8001472:	4013      	ands	r3, r2
 8001474:	d100      	bne.n	8001478 <HAL_RCC_OscConfig+0x2a8>
 8001476:	e084      	b.n	8001582 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001478:	230f      	movs	r3, #15
 800147a:	18fb      	adds	r3, r7, r3
 800147c:	2200      	movs	r2, #0
 800147e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001480:	4b23      	ldr	r3, [pc, #140]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2238      	movs	r2, #56	@ 0x38
 8001486:	4013      	ands	r3, r2
 8001488:	2b20      	cmp	r3, #32
 800148a:	d106      	bne.n	800149a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d000      	beq.n	8001496 <HAL_RCC_OscConfig+0x2c6>
 8001494:	e075      	b.n	8001582 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e074      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2b01      	cmp	r3, #1
 80014a0:	d106      	bne.n	80014b0 <HAL_RCC_OscConfig+0x2e0>
 80014a2:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014a8:	2101      	movs	r1, #1
 80014aa:	430a      	orrs	r2, r1
 80014ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014ae:	e01c      	b.n	80014ea <HAL_RCC_OscConfig+0x31a>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b05      	cmp	r3, #5
 80014b6:	d10c      	bne.n	80014d2 <HAL_RCC_OscConfig+0x302>
 80014b8:	4b15      	ldr	r3, [pc, #84]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014be:	2104      	movs	r1, #4
 80014c0:	430a      	orrs	r2, r1
 80014c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014c4:	4b12      	ldr	r3, [pc, #72]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014c8:	4b11      	ldr	r3, [pc, #68]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014ca:	2101      	movs	r1, #1
 80014cc:	430a      	orrs	r2, r1
 80014ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014d0:	e00b      	b.n	80014ea <HAL_RCC_OscConfig+0x31a>
 80014d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014d8:	2101      	movs	r1, #1
 80014da:	438a      	bics	r2, r1
 80014dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80014de:	4b0c      	ldr	r3, [pc, #48]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80014e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001510 <HAL_RCC_OscConfig+0x340>)
 80014e4:	2104      	movs	r1, #4
 80014e6:	438a      	bics	r2, r1
 80014e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d028      	beq.n	8001544 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f2:	f7ff fb3f 	bl	8000b74 <HAL_GetTick>
 80014f6:	0003      	movs	r3, r0
 80014f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014fa:	e01d      	b.n	8001538 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014fc:	f7ff fb3a 	bl	8000b74 <HAL_GetTick>
 8001500:	0002      	movs	r2, r0
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	4a0b      	ldr	r2, [pc, #44]	@ (8001534 <HAL_RCC_OscConfig+0x364>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d915      	bls.n	8001538 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e039      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
 8001510:	40021000 	.word	0x40021000
 8001514:	fffeffff 	.word	0xfffeffff
 8001518:	fffbffff 	.word	0xfffbffff
 800151c:	ffff80ff 	.word	0xffff80ff
 8001520:	ffffc7ff 	.word	0xffffc7ff
 8001524:	02dc6c00 	.word	0x02dc6c00
 8001528:	20000000 	.word	0x20000000
 800152c:	20000004 	.word	0x20000004
 8001530:	fffffeff 	.word	0xfffffeff
 8001534:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001538:	4b14      	ldr	r3, [pc, #80]	@ (800158c <HAL_RCC_OscConfig+0x3bc>)
 800153a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800153c:	2202      	movs	r2, #2
 800153e:	4013      	ands	r3, r2
 8001540:	d0dc      	beq.n	80014fc <HAL_RCC_OscConfig+0x32c>
 8001542:	e013      	b.n	800156c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001544:	f7ff fb16 	bl	8000b74 <HAL_GetTick>
 8001548:	0003      	movs	r3, r0
 800154a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800154c:	e009      	b.n	8001562 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff fb11 	bl	8000b74 <HAL_GetTick>
 8001552:	0002      	movs	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	4a0d      	ldr	r2, [pc, #52]	@ (8001590 <HAL_RCC_OscConfig+0x3c0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e010      	b.n	8001584 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001562:	4b0a      	ldr	r3, [pc, #40]	@ (800158c <HAL_RCC_OscConfig+0x3bc>)
 8001564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001566:	2202      	movs	r2, #2
 8001568:	4013      	ands	r3, r2
 800156a:	d1f0      	bne.n	800154e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800156c:	230f      	movs	r3, #15
 800156e:	18fb      	adds	r3, r7, r3
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b01      	cmp	r3, #1
 8001574:	d105      	bne.n	8001582 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001576:	4b05      	ldr	r3, [pc, #20]	@ (800158c <HAL_RCC_OscConfig+0x3bc>)
 8001578:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800157a:	4b04      	ldr	r3, [pc, #16]	@ (800158c <HAL_RCC_OscConfig+0x3bc>)
 800157c:	4905      	ldr	r1, [pc, #20]	@ (8001594 <HAL_RCC_OscConfig+0x3c4>)
 800157e:	400a      	ands	r2, r1
 8001580:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	0018      	movs	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	b006      	add	sp, #24
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40021000 	.word	0x40021000
 8001590:	00001388 	.word	0x00001388
 8001594:	efffffff 	.word	0xefffffff

08001598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d101      	bne.n	80015ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e0df      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015ac:	4b71      	ldr	r3, [pc, #452]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	2207      	movs	r2, #7
 80015b2:	4013      	ands	r3, r2
 80015b4:	683a      	ldr	r2, [r7, #0]
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d91e      	bls.n	80015f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ba:	4b6e      	ldr	r3, [pc, #440]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2207      	movs	r2, #7
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	4b6b      	ldr	r3, [pc, #428]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80015cc:	f7ff fad2 	bl	8000b74 <HAL_GetTick>
 80015d0:	0003      	movs	r3, r0
 80015d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015d4:	e009      	b.n	80015ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80015d6:	f7ff facd 	bl	8000b74 <HAL_GetTick>
 80015da:	0002      	movs	r2, r0
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	4a65      	ldr	r2, [pc, #404]	@ (8001778 <HAL_RCC_ClockConfig+0x1e0>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e0c0      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015ea:	4b62      	ldr	r3, [pc, #392]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2207      	movs	r2, #7
 80015f0:	4013      	ands	r3, r2
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d1ee      	bne.n	80015d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2202      	movs	r2, #2
 80015fe:	4013      	ands	r3, r2
 8001600:	d017      	beq.n	8001632 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	2204      	movs	r2, #4
 8001608:	4013      	ands	r3, r2
 800160a:	d008      	beq.n	800161e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800160c:	4b5b      	ldr	r3, [pc, #364]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	4a5b      	ldr	r2, [pc, #364]	@ (8001780 <HAL_RCC_ClockConfig+0x1e8>)
 8001612:	401a      	ands	r2, r3
 8001614:	4b59      	ldr	r3, [pc, #356]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 8001616:	21b0      	movs	r1, #176	@ 0xb0
 8001618:	0109      	lsls	r1, r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161e:	4b57      	ldr	r3, [pc, #348]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	4a58      	ldr	r2, [pc, #352]	@ (8001784 <HAL_RCC_ClockConfig+0x1ec>)
 8001624:	4013      	ands	r3, r2
 8001626:	0019      	movs	r1, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68da      	ldr	r2, [r3, #12]
 800162c:	4b53      	ldr	r3, [pc, #332]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 800162e:	430a      	orrs	r2, r1
 8001630:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	4013      	ands	r3, r2
 800163a:	d04b      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d107      	bne.n	8001654 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001644:	4b4d      	ldr	r3, [pc, #308]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	2380      	movs	r3, #128	@ 0x80
 800164a:	029b      	lsls	r3, r3, #10
 800164c:	4013      	ands	r3, r2
 800164e:	d11f      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001650:	2301      	movs	r3, #1
 8001652:	e08b      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d107      	bne.n	800166c <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165c:	4b47      	ldr	r3, [pc, #284]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	2380      	movs	r3, #128	@ 0x80
 8001662:	00db      	lsls	r3, r3, #3
 8001664:	4013      	ands	r3, r2
 8001666:	d113      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e07f      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	2b03      	cmp	r3, #3
 8001672:	d106      	bne.n	8001682 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001674:	4b41      	ldr	r3, [pc, #260]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 8001676:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001678:	2202      	movs	r2, #2
 800167a:	4013      	ands	r3, r2
 800167c:	d108      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e074      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001682:	4b3e      	ldr	r3, [pc, #248]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 8001684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e06d      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001690:	4b3a      	ldr	r3, [pc, #232]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	2207      	movs	r2, #7
 8001696:	4393      	bics	r3, r2
 8001698:	0019      	movs	r1, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685a      	ldr	r2, [r3, #4]
 800169e:	4b37      	ldr	r3, [pc, #220]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80016a4:	f7ff fa66 	bl	8000b74 <HAL_GetTick>
 80016a8:	0003      	movs	r3, r0
 80016aa:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ac:	e009      	b.n	80016c2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016ae:	f7ff fa61 	bl	8000b74 <HAL_GetTick>
 80016b2:	0002      	movs	r2, r0
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001778 <HAL_RCC_ClockConfig+0x1e0>)
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e054      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016c2:	4b2e      	ldr	r3, [pc, #184]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	2238      	movs	r2, #56	@ 0x38
 80016c8:	401a      	ands	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d1ec      	bne.n	80016ae <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016d4:	4b27      	ldr	r3, [pc, #156]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2207      	movs	r2, #7
 80016da:	4013      	ands	r3, r2
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d21e      	bcs.n	8001720 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b24      	ldr	r3, [pc, #144]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2207      	movs	r2, #7
 80016e8:	4393      	bics	r3, r2
 80016ea:	0019      	movs	r1, r3
 80016ec:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 80016ee:	683a      	ldr	r2, [r7, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016f4:	f7ff fa3e 	bl	8000b74 <HAL_GetTick>
 80016f8:	0003      	movs	r3, r0
 80016fa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016fc:	e009      	b.n	8001712 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016fe:	f7ff fa39 	bl	8000b74 <HAL_GetTick>
 8001702:	0002      	movs	r2, r0
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	4a1b      	ldr	r2, [pc, #108]	@ (8001778 <HAL_RCC_ClockConfig+0x1e0>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e02c      	b.n	800176c <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001712:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_RCC_ClockConfig+0x1dc>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	2207      	movs	r2, #7
 8001718:	4013      	ands	r3, r2
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	429a      	cmp	r2, r3
 800171e:	d1ee      	bne.n	80016fe <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2204      	movs	r2, #4
 8001726:	4013      	ands	r3, r2
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800172a:	4b14      	ldr	r3, [pc, #80]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	4a16      	ldr	r2, [pc, #88]	@ (8001788 <HAL_RCC_ClockConfig+0x1f0>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691a      	ldr	r2, [r3, #16]
 8001738:	4b10      	ldr	r3, [pc, #64]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 800173a:	430a      	orrs	r2, r1
 800173c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800173e:	f000 f82b 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 8001742:	0001      	movs	r1, r0
 8001744:	4b0d      	ldr	r3, [pc, #52]	@ (800177c <HAL_RCC_ClockConfig+0x1e4>)
 8001746:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001748:	0a1b      	lsrs	r3, r3, #8
 800174a:	220f      	movs	r2, #15
 800174c:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800174e:	4b0f      	ldr	r3, [pc, #60]	@ (800178c <HAL_RCC_ClockConfig+0x1f4>)
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001754:	221f      	movs	r2, #31
 8001756:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001758:	000a      	movs	r2, r1
 800175a:	40da      	lsrs	r2, r3
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_RCC_ClockConfig+0x1f8>)
 800175e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001760:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_RCC_ClockConfig+0x1fc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	0018      	movs	r0, r3
 8001766:	f7ff f9a9 	bl	8000abc <HAL_InitTick>
 800176a:	0003      	movs	r3, r0
}
 800176c:	0018      	movs	r0, r3
 800176e:	46bd      	mov	sp, r7
 8001770:	b004      	add	sp, #16
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40022000 	.word	0x40022000
 8001778:	00001388 	.word	0x00001388
 800177c:	40021000 	.word	0x40021000
 8001780:	ffff84ff 	.word	0xffff84ff
 8001784:	fffff0ff 	.word	0xfffff0ff
 8001788:	ffff8fff 	.word	0xffff8fff
 800178c:	08003d08 	.word	0x08003d08
 8001790:	20000000 	.word	0x20000000
 8001794:	20000004 	.word	0x20000004

08001798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800179e:	4b1c      	ldr	r3, [pc, #112]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x78>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	2238      	movs	r2, #56	@ 0x38
 80017a4:	4013      	ands	r3, r2
 80017a6:	d10f      	bne.n	80017c8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80017a8:	4b19      	ldr	r3, [pc, #100]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x78>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	0adb      	lsrs	r3, r3, #11
 80017ae:	2207      	movs	r2, #7
 80017b0:	4013      	ands	r3, r2
 80017b2:	2201      	movs	r2, #1
 80017b4:	409a      	lsls	r2, r3
 80017b6:	0013      	movs	r3, r2
 80017b8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80017ba:	6839      	ldr	r1, [r7, #0]
 80017bc:	4815      	ldr	r0, [pc, #84]	@ (8001814 <HAL_RCC_GetSysClockFreq+0x7c>)
 80017be:	f7fe fca3 	bl	8000108 <__udivsi3>
 80017c2:	0003      	movs	r3, r0
 80017c4:	607b      	str	r3, [r7, #4]
 80017c6:	e01e      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017c8:	4b11      	ldr	r3, [pc, #68]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x78>)
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2238      	movs	r2, #56	@ 0x38
 80017ce:	4013      	ands	r3, r2
 80017d0:	2b08      	cmp	r3, #8
 80017d2:	d102      	bne.n	80017da <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017d4:	4b10      	ldr	r3, [pc, #64]	@ (8001818 <HAL_RCC_GetSysClockFreq+0x80>)
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	e015      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80017da:	4b0d      	ldr	r3, [pc, #52]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x78>)
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	2238      	movs	r2, #56	@ 0x38
 80017e0:	4013      	ands	r3, r2
 80017e2:	2b20      	cmp	r3, #32
 80017e4:	d103      	bne.n	80017ee <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017e6:	2380      	movs	r3, #128	@ 0x80
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	e00b      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80017ee:	4b08      	ldr	r3, [pc, #32]	@ (8001810 <HAL_RCC_GetSysClockFreq+0x78>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	2238      	movs	r2, #56	@ 0x38
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b18      	cmp	r3, #24
 80017f8:	d103      	bne.n	8001802 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017fa:	23fa      	movs	r3, #250	@ 0xfa
 80017fc:	01db      	lsls	r3, r3, #7
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	e001      	b.n	8001806 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001806:	687b      	ldr	r3, [r7, #4]
}
 8001808:	0018      	movs	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	b002      	add	sp, #8
 800180e:	bd80      	pop	{r7, pc}
 8001810:	40021000 	.word	0x40021000
 8001814:	02dc6c00 	.word	0x02dc6c00
 8001818:	007a1200 	.word	0x007a1200

0800181c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001820:	f7ff ffba 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 8001824:	0001      	movs	r1, r0
 8001826:	4b09      	ldr	r3, [pc, #36]	@ (800184c <HAL_RCC_GetHCLKFreq+0x30>)
 8001828:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800182a:	0a1b      	lsrs	r3, r3, #8
 800182c:	220f      	movs	r2, #15
 800182e:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001830:	4b07      	ldr	r3, [pc, #28]	@ (8001850 <HAL_RCC_GetHCLKFreq+0x34>)
 8001832:	0092      	lsls	r2, r2, #2
 8001834:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001836:	221f      	movs	r2, #31
 8001838:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800183a:	000a      	movs	r2, r1
 800183c:	40da      	lsrs	r2, r3
 800183e:	4b05      	ldr	r3, [pc, #20]	@ (8001854 <HAL_RCC_GetHCLKFreq+0x38>)
 8001840:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 8001842:	4b04      	ldr	r3, [pc, #16]	@ (8001854 <HAL_RCC_GetHCLKFreq+0x38>)
 8001844:	681b      	ldr	r3, [r3, #0]
}
 8001846:	0018      	movs	r0, r3
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40021000 	.word	0x40021000
 8001850:	08003d08 	.word	0x08003d08
 8001854:	20000000 	.word	0x20000000

08001858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 800185c:	f7ff ffde 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001860:	0001      	movs	r1, r0
 8001862:	4b07      	ldr	r3, [pc, #28]	@ (8001880 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	0b1b      	lsrs	r3, r3, #12
 8001868:	2207      	movs	r2, #7
 800186a:	401a      	ands	r2, r3
 800186c:	4b05      	ldr	r3, [pc, #20]	@ (8001884 <HAL_RCC_GetPCLK1Freq+0x2c>)
 800186e:	0092      	lsls	r2, r2, #2
 8001870:	58d3      	ldr	r3, [r2, r3]
 8001872:	221f      	movs	r2, #31
 8001874:	4013      	ands	r3, r2
 8001876:	40d9      	lsrs	r1, r3
 8001878:	000b      	movs	r3, r1
}
 800187a:	0018      	movs	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40021000 	.word	0x40021000
 8001884:	08003d48 	.word	0x08003d48

08001888 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b086      	sub	sp, #24
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001890:	2313      	movs	r3, #19
 8001892:	18fb      	adds	r3, r7, r3
 8001894:	2200      	movs	r2, #0
 8001896:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001898:	2312      	movs	r3, #18
 800189a:	18fb      	adds	r3, r7, r3
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2240      	movs	r2, #64	@ 0x40
 80018a6:	4013      	ands	r3, r2
 80018a8:	d100      	bne.n	80018ac <HAL_RCCEx_PeriphCLKConfig+0x24>
 80018aa:	e079      	b.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ac:	2011      	movs	r0, #17
 80018ae:	183b      	adds	r3, r7, r0
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018b4:	4b63      	ldr	r3, [pc, #396]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018b8:	2380      	movs	r3, #128	@ 0x80
 80018ba:	055b      	lsls	r3, r3, #21
 80018bc:	4013      	ands	r3, r2
 80018be:	d110      	bne.n	80018e2 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	4b60      	ldr	r3, [pc, #384]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018c4:	4b5f      	ldr	r3, [pc, #380]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018c6:	2180      	movs	r1, #128	@ 0x80
 80018c8:	0549      	lsls	r1, r1, #21
 80018ca:	430a      	orrs	r2, r1
 80018cc:	63da      	str	r2, [r3, #60]	@ 0x3c
 80018ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80018d2:	2380      	movs	r3, #128	@ 0x80
 80018d4:	055b      	lsls	r3, r3, #21
 80018d6:	4013      	ands	r3, r2
 80018d8:	60bb      	str	r3, [r7, #8]
 80018da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018dc:	183b      	adds	r3, r7, r0
 80018de:	2201      	movs	r2, #1
 80018e0:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80018e2:	4b58      	ldr	r3, [pc, #352]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80018e4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80018e6:	23c0      	movs	r3, #192	@ 0xc0
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4013      	ands	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d019      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	697a      	ldr	r2, [r7, #20]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d014      	beq.n	8001928 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80018fe:	4b51      	ldr	r3, [pc, #324]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001902:	4a51      	ldr	r2, [pc, #324]	@ (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001904:	4013      	ands	r3, r2
 8001906:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001908:	4b4e      	ldr	r3, [pc, #312]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800190a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800190c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800190e:	2180      	movs	r1, #128	@ 0x80
 8001910:	0249      	lsls	r1, r1, #9
 8001912:	430a      	orrs	r2, r1
 8001914:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001916:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001918:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800191a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800191c:	494b      	ldr	r1, [pc, #300]	@ (8001a4c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800191e:	400a      	ands	r2, r1
 8001920:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8001922:	4b48      	ldr	r3, [pc, #288]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001924:	697a      	ldr	r2, [r7, #20]
 8001926:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2201      	movs	r2, #1
 800192c:	4013      	ands	r3, r2
 800192e:	d016      	beq.n	800195e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001930:	f7ff f920 	bl	8000b74 <HAL_GetTick>
 8001934:	0003      	movs	r3, r0
 8001936:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001938:	e00c      	b.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f7ff f91b 	bl	8000b74 <HAL_GetTick>
 800193e:	0002      	movs	r2, r0
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	4a42      	ldr	r2, [pc, #264]	@ (8001a50 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d904      	bls.n	8001954 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 800194a:	2313      	movs	r3, #19
 800194c:	18fb      	adds	r3, r7, r3
 800194e:	2203      	movs	r2, #3
 8001950:	701a      	strb	r2, [r3, #0]
          break;
 8001952:	e004      	b.n	800195e <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001954:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001956:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d0ed      	beq.n	800193a <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 800195e:	2313      	movs	r3, #19
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001968:	4b36      	ldr	r3, [pc, #216]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800196a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800196c:	4a36      	ldr	r2, [pc, #216]	@ (8001a48 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800196e:	4013      	ands	r3, r2
 8001970:	0019      	movs	r1, r3
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	699a      	ldr	r2, [r3, #24]
 8001976:	4b33      	ldr	r3, [pc, #204]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001978:	430a      	orrs	r2, r1
 800197a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800197c:	e005      	b.n	800198a <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800197e:	2312      	movs	r3, #18
 8001980:	18fb      	adds	r3, r7, r3
 8001982:	2213      	movs	r2, #19
 8001984:	18ba      	adds	r2, r7, r2
 8001986:	7812      	ldrb	r2, [r2, #0]
 8001988:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800198a:	2311      	movs	r3, #17
 800198c:	18fb      	adds	r3, r7, r3
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d105      	bne.n	80019a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001994:	4b2b      	ldr	r3, [pc, #172]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001996:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001998:	4b2a      	ldr	r3, [pc, #168]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800199a:	492e      	ldr	r1, [pc, #184]	@ (8001a54 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800199c:	400a      	ands	r2, r1
 800199e:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2201      	movs	r2, #1
 80019a6:	4013      	ands	r3, r2
 80019a8:	d009      	beq.n	80019be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80019aa:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ae:	2203      	movs	r2, #3
 80019b0:	4393      	bics	r3, r2
 80019b2:	0019      	movs	r1, r3
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	4b22      	ldr	r3, [pc, #136]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019ba:	430a      	orrs	r2, r1
 80019bc:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2202      	movs	r2, #2
 80019c4:	4013      	ands	r3, r2
 80019c6:	d009      	beq.n	80019dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80019c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019cc:	4a22      	ldr	r2, [pc, #136]	@ (8001a58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	0019      	movs	r1, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68da      	ldr	r2, [r3, #12]
 80019d6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019d8:	430a      	orrs	r2, r1
 80019da:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2220      	movs	r2, #32
 80019e2:	4013      	ands	r3, r2
 80019e4:	d008      	beq.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80019e6:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	0899      	lsrs	r1, r3, #2
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695a      	ldr	r2, [r3, #20]
 80019f2:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019f4:	430a      	orrs	r2, r1
 80019f6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2204      	movs	r2, #4
 80019fe:	4013      	ands	r3, r2
 8001a00:	d009      	beq.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001a02:	4b10      	ldr	r3, [pc, #64]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a06:	4a15      	ldr	r2, [pc, #84]	@ (8001a5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a08:	4013      	ands	r3, r2
 8001a0a:	0019      	movs	r1, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691a      	ldr	r2, [r3, #16]
 8001a10:	4b0c      	ldr	r3, [pc, #48]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a12:	430a      	orrs	r2, r1
 8001a14:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2280      	movs	r2, #128	@ 0x80
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d009      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001a20:	4b08      	ldr	r3, [pc, #32]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	22e0      	movs	r2, #224	@ 0xe0
 8001a26:	4393      	bics	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	4b05      	ldr	r3, [pc, #20]	@ (8001a44 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001a34:	2312      	movs	r3, #18
 8001a36:	18fb      	adds	r3, r7, r3
 8001a38:	781b      	ldrb	r3, [r3, #0]
}
 8001a3a:	0018      	movs	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	b006      	add	sp, #24
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			@ (mov r8, r8)
 8001a44:	40021000 	.word	0x40021000
 8001a48:	fffffcff 	.word	0xfffffcff
 8001a4c:	fffeffff 	.word	0xfffeffff
 8001a50:	00001388 	.word	0x00001388
 8001a54:	efffffff 	.word	0xefffffff
 8001a58:	ffffcfff 	.word	0xffffcfff
 8001a5c:	ffff3fff 	.word	0xffff3fff

08001a60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e04a      	b.n	8001b08 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	223d      	movs	r2, #61	@ 0x3d
 8001a76:	5c9b      	ldrb	r3, [r3, r2]
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d107      	bne.n	8001a8e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	223c      	movs	r2, #60	@ 0x3c
 8001a82:	2100      	movs	r1, #0
 8001a84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	0018      	movs	r0, r3
 8001a8a:	f7fe fe9f 	bl	80007cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	223d      	movs	r2, #61	@ 0x3d
 8001a92:	2102      	movs	r1, #2
 8001a94:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	3304      	adds	r3, #4
 8001a9e:	0019      	movs	r1, r3
 8001aa0:	0010      	movs	r0, r2
 8001aa2:	f000 fbe9 	bl	8002278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2248      	movs	r2, #72	@ 0x48
 8001aaa:	2101      	movs	r1, #1
 8001aac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	223e      	movs	r2, #62	@ 0x3e
 8001ab2:	2101      	movs	r1, #1
 8001ab4:	5499      	strb	r1, [r3, r2]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	223f      	movs	r2, #63	@ 0x3f
 8001aba:	2101      	movs	r1, #1
 8001abc:	5499      	strb	r1, [r3, r2]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2240      	movs	r2, #64	@ 0x40
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	5499      	strb	r1, [r3, r2]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2241      	movs	r2, #65	@ 0x41
 8001aca:	2101      	movs	r1, #1
 8001acc:	5499      	strb	r1, [r3, r2]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2242      	movs	r2, #66	@ 0x42
 8001ad2:	2101      	movs	r1, #1
 8001ad4:	5499      	strb	r1, [r3, r2]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2243      	movs	r2, #67	@ 0x43
 8001ada:	2101      	movs	r1, #1
 8001adc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2244      	movs	r2, #68	@ 0x44
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	5499      	strb	r1, [r3, r2]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2245      	movs	r2, #69	@ 0x45
 8001aea:	2101      	movs	r1, #1
 8001aec:	5499      	strb	r1, [r3, r2]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2246      	movs	r2, #70	@ 0x46
 8001af2:	2101      	movs	r1, #1
 8001af4:	5499      	strb	r1, [r3, r2]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2247      	movs	r2, #71	@ 0x47
 8001afa:	2101      	movs	r1, #1
 8001afc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	223d      	movs	r2, #61	@ 0x3d
 8001b02:	2101      	movs	r1, #1
 8001b04:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b06:	2300      	movs	r3, #0
}
 8001b08:	0018      	movs	r0, r3
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	b002      	add	sp, #8
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	223d      	movs	r2, #61	@ 0x3d
 8001b1c:	5c9b      	ldrb	r3, [r3, r2]
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d001      	beq.n	8001b28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e037      	b.n	8001b98 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	223d      	movs	r2, #61	@ 0x3d
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2101      	movs	r1, #1
 8001b3c:	430a      	orrs	r2, r1
 8001b3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a16      	ldr	r2, [pc, #88]	@ (8001ba0 <HAL_TIM_Base_Start_IT+0x90>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d004      	beq.n	8001b54 <HAL_TIM_Base_Start_IT+0x44>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a15      	ldr	r2, [pc, #84]	@ (8001ba4 <HAL_TIM_Base_Start_IT+0x94>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d116      	bne.n	8001b82 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ba8 <HAL_TIM_Base_Start_IT+0x98>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2b06      	cmp	r3, #6
 8001b64:	d016      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x84>
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	2380      	movs	r3, #128	@ 0x80
 8001b6a:	025b      	lsls	r3, r3, #9
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d011      	beq.n	8001b94 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2101      	movs	r1, #1
 8001b7c:	430a      	orrs	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b80:	e008      	b.n	8001b94 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2101      	movs	r1, #1
 8001b8e:	430a      	orrs	r2, r1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e000      	b.n	8001b96 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b94:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	0018      	movs	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	b004      	add	sp, #16
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40012c00 	.word	0x40012c00
 8001ba4:	40000400 	.word	0x40000400
 8001ba8:	00010007 	.word	0x00010007

08001bac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d101      	bne.n	8001bbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e04a      	b.n	8001c54 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	223d      	movs	r2, #61	@ 0x3d
 8001bc2:	5c9b      	ldrb	r3, [r3, r2]
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d107      	bne.n	8001bda <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	223c      	movs	r2, #60	@ 0x3c
 8001bce:	2100      	movs	r1, #0
 8001bd0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f000 f841 	bl	8001c5c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	223d      	movs	r2, #61	@ 0x3d
 8001bde:	2102      	movs	r1, #2
 8001be0:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3304      	adds	r3, #4
 8001bea:	0019      	movs	r1, r3
 8001bec:	0010      	movs	r0, r2
 8001bee:	f000 fb43 	bl	8002278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2248      	movs	r2, #72	@ 0x48
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	223e      	movs	r2, #62	@ 0x3e
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	223f      	movs	r2, #63	@ 0x3f
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2240      	movs	r2, #64	@ 0x40
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2241      	movs	r2, #65	@ 0x41
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2242      	movs	r2, #66	@ 0x42
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2243      	movs	r2, #67	@ 0x43
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2244      	movs	r2, #68	@ 0x44
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2245      	movs	r2, #69	@ 0x45
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2246      	movs	r2, #70	@ 0x46
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2247      	movs	r2, #71	@ 0x47
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	223d      	movs	r2, #61	@ 0x3d
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
}
 8001c54:	0018      	movs	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	b002      	add	sp, #8
 8001c5a:	bd80      	pop	{r7, pc}

08001c5c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c64:	46c0      	nop			@ (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b002      	add	sp, #8
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2202      	movs	r2, #2
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d021      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	4013      	ands	r3, r2
 8001c92:	d01d      	beq.n	8001cd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	2203      	movs	r2, #3
 8001c9a:	4252      	negs	r2, r2
 8001c9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2201      	movs	r2, #1
 8001ca2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	2203      	movs	r2, #3
 8001cac:	4013      	ands	r3, r2
 8001cae:	d004      	beq.n	8001cba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	0018      	movs	r0, r3
 8001cb4:	f000 fac8 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8001cb8:	e007      	b.n	8001cca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f000 fabb 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	0018      	movs	r0, r3
 8001cc6:	f000 fac7 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	2204      	movs	r2, #4
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	d022      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	2204      	movs	r2, #4
 8001cdc:	4013      	ands	r3, r2
 8001cde:	d01e      	beq.n	8001d1e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	4252      	negs	r2, r2
 8001ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2202      	movs	r2, #2
 8001cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	699a      	ldr	r2, [r3, #24]
 8001cf6:	23c0      	movs	r3, #192	@ 0xc0
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d004      	beq.n	8001d08 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	0018      	movs	r0, r3
 8001d02:	f000 faa1 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8001d06:	e007      	b.n	8001d18 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	0018      	movs	r0, r3
 8001d0c:	f000 fa94 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	0018      	movs	r0, r3
 8001d14:	f000 faa0 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	2208      	movs	r2, #8
 8001d22:	4013      	ands	r3, r2
 8001d24:	d021      	beq.n	8001d6a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2208      	movs	r2, #8
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	d01d      	beq.n	8001d6a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	2209      	movs	r2, #9
 8001d34:	4252      	negs	r2, r2
 8001d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2204      	movs	r2, #4
 8001d3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	69db      	ldr	r3, [r3, #28]
 8001d44:	2203      	movs	r2, #3
 8001d46:	4013      	ands	r3, r2
 8001d48:	d004      	beq.n	8001d54 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	0018      	movs	r0, r3
 8001d4e:	f000 fa7b 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8001d52:	e007      	b.n	8001d64 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	0018      	movs	r0, r3
 8001d58:	f000 fa6e 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f000 fa7a 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d022      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2210      	movs	r2, #16
 8001d76:	4013      	ands	r3, r2
 8001d78:	d01e      	beq.n	8001db8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	2211      	movs	r2, #17
 8001d80:	4252      	negs	r2, r2
 8001d82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2208      	movs	r2, #8
 8001d88:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	23c0      	movs	r3, #192	@ 0xc0
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4013      	ands	r3, r2
 8001d96:	d004      	beq.n	8001da2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f000 fa54 	bl	8002248 <HAL_TIM_IC_CaptureCallback>
 8001da0:	e007      	b.n	8001db2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f000 fa47 	bl	8002238 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	0018      	movs	r0, r3
 8001dae:	f000 fa53 	bl	8002258 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2200      	movs	r2, #0
 8001db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	2201      	movs	r2, #1
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d00c      	beq.n	8001dda <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d008      	beq.n	8001dda <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2202      	movs	r2, #2
 8001dce:	4252      	negs	r2, r2
 8001dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	0018      	movs	r0, r3
 8001dd6:	f000 fa27 	bl	8002228 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001dda:	68bb      	ldr	r3, [r7, #8]
 8001ddc:	2280      	movs	r2, #128	@ 0x80
 8001dde:	4013      	ands	r3, r2
 8001de0:	d104      	bne.n	8001dec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	2380      	movs	r3, #128	@ 0x80
 8001de6:	019b      	lsls	r3, r3, #6
 8001de8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001dea:	d00b      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2280      	movs	r2, #128	@ 0x80
 8001df0:	4013      	ands	r3, r2
 8001df2:	d007      	beq.n	8001e04 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1e      	ldr	r2, [pc, #120]	@ (8001e74 <HAL_TIM_IRQHandler+0x208>)
 8001dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 fe56 	bl	8002ab0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001e04:	68ba      	ldr	r2, [r7, #8]
 8001e06:	2380      	movs	r3, #128	@ 0x80
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d00b      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2280      	movs	r2, #128	@ 0x80
 8001e12:	4013      	ands	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a17      	ldr	r2, [pc, #92]	@ (8001e78 <HAL_TIM_IRQHandler+0x20c>)
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 fe4d 	bl	8002ac0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2240      	movs	r2, #64	@ 0x40
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	d00c      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2240      	movs	r2, #64	@ 0x40
 8001e32:	4013      	ands	r3, r2
 8001e34:	d008      	beq.n	8001e48 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2241      	movs	r2, #65	@ 0x41
 8001e3c:	4252      	negs	r2, r2
 8001e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	0018      	movs	r0, r3
 8001e44:	f000 fa10 	bl	8002268 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d00c      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2220      	movs	r2, #32
 8001e54:	4013      	ands	r3, r2
 8001e56:	d008      	beq.n	8001e6a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2221      	movs	r2, #33	@ 0x21
 8001e5e:	4252      	negs	r2, r2
 8001e60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	0018      	movs	r0, r3
 8001e66:	f000 fe1b 	bl	8002aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e6a:	46c0      	nop			@ (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b004      	add	sp, #16
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			@ (mov r8, r8)
 8001e74:	ffffdf7f 	.word	0xffffdf7f
 8001e78:	fffffeff 	.word	0xfffffeff

08001e7c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b086      	sub	sp, #24
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	60f8      	str	r0, [r7, #12]
 8001e84:	60b9      	str	r1, [r7, #8]
 8001e86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e88:	2317      	movs	r3, #23
 8001e8a:	18fb      	adds	r3, r7, r3
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	223c      	movs	r2, #60	@ 0x3c
 8001e94:	5c9b      	ldrb	r3, [r3, r2]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d101      	bne.n	8001e9e <HAL_TIM_PWM_ConfigChannel+0x22>
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	e0e5      	b.n	800206a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	223c      	movs	r2, #60	@ 0x3c
 8001ea2:	2101      	movs	r1, #1
 8001ea4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b14      	cmp	r3, #20
 8001eaa:	d900      	bls.n	8001eae <HAL_TIM_PWM_ConfigChannel+0x32>
 8001eac:	e0d1      	b.n	8002052 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	009a      	lsls	r2, r3, #2
 8001eb2:	4b70      	ldr	r3, [pc, #448]	@ (8002074 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8001eb4:	18d3      	adds	r3, r2, r3
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	68ba      	ldr	r2, [r7, #8]
 8001ec0:	0011      	movs	r1, r2
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	f000 fa52 	bl	800236c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	699a      	ldr	r2, [r3, #24]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2108      	movs	r1, #8
 8001ed4:	430a      	orrs	r2, r1
 8001ed6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	699a      	ldr	r2, [r3, #24]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2104      	movs	r1, #4
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	6999      	ldr	r1, [r3, #24]
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	691a      	ldr	r2, [r3, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	619a      	str	r2, [r3, #24]
      break;
 8001efa:	e0af      	b.n	800205c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	0011      	movs	r1, r2
 8001f04:	0018      	movs	r0, r3
 8001f06:	f000 fab1 	bl	800246c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	699a      	ldr	r2, [r3, #24]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2180      	movs	r1, #128	@ 0x80
 8001f16:	0109      	lsls	r1, r1, #4
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4954      	ldr	r1, [pc, #336]	@ (8002078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001f28:	400a      	ands	r2, r1
 8001f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6999      	ldr	r1, [r3, #24]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	691b      	ldr	r3, [r3, #16]
 8001f36:	021a      	lsls	r2, r3, #8
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	619a      	str	r2, [r3, #24]
      break;
 8001f40:	e08c      	b.n	800205c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	68ba      	ldr	r2, [r7, #8]
 8001f48:	0011      	movs	r1, r2
 8001f4a:	0018      	movs	r0, r3
 8001f4c:	f000 fb0c 	bl	8002568 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	69da      	ldr	r2, [r3, #28]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2108      	movs	r1, #8
 8001f5c:	430a      	orrs	r2, r1
 8001f5e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	69da      	ldr	r2, [r3, #28]
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2104      	movs	r1, #4
 8001f6c:	438a      	bics	r2, r1
 8001f6e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	69d9      	ldr	r1, [r3, #28]
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	691a      	ldr	r2, [r3, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	61da      	str	r2, [r3, #28]
      break;
 8001f82:	e06b      	b.n	800205c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	68ba      	ldr	r2, [r7, #8]
 8001f8a:	0011      	movs	r1, r2
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	f000 fb6d 	bl	800266c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69da      	ldr	r2, [r3, #28]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	2180      	movs	r1, #128	@ 0x80
 8001f9e:	0109      	lsls	r1, r1, #4
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4932      	ldr	r1, [pc, #200]	@ (8002078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	69d9      	ldr	r1, [r3, #28]
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	021a      	lsls	r2, r3, #8
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	61da      	str	r2, [r3, #28]
      break;
 8001fc8:	e048      	b.n	800205c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68ba      	ldr	r2, [r7, #8]
 8001fd0:	0011      	movs	r1, r2
 8001fd2:	0018      	movs	r0, r3
 8001fd4:	f000 fbae 	bl	8002734 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2108      	movs	r1, #8
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2104      	movs	r1, #4
 8001ff4:	438a      	bics	r2, r1
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	691a      	ldr	r2, [r3, #16]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	430a      	orrs	r2, r1
 8002008:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800200a:	e027      	b.n	800205c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	68ba      	ldr	r2, [r7, #8]
 8002012:	0011      	movs	r1, r2
 8002014:	0018      	movs	r0, r3
 8002016:	f000 fbe7 	bl	80027e8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2180      	movs	r1, #128	@ 0x80
 8002026:	0109      	lsls	r1, r1, #4
 8002028:	430a      	orrs	r2, r1
 800202a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4910      	ldr	r1, [pc, #64]	@ (8002078 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8002038:	400a      	ands	r2, r1
 800203a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	691b      	ldr	r3, [r3, #16]
 8002046:	021a      	lsls	r2, r3, #8
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	430a      	orrs	r2, r1
 800204e:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8002050:	e004      	b.n	800205c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8002052:	2317      	movs	r3, #23
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2201      	movs	r2, #1
 8002058:	701a      	strb	r2, [r3, #0]
      break;
 800205a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	223c      	movs	r2, #60	@ 0x3c
 8002060:	2100      	movs	r1, #0
 8002062:	5499      	strb	r1, [r3, r2]

  return status;
 8002064:	2317      	movs	r3, #23
 8002066:	18fb      	adds	r3, r7, r3
 8002068:	781b      	ldrb	r3, [r3, #0]
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	b006      	add	sp, #24
 8002070:	bd80      	pop	{r7, pc}
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	08003d68 	.word	0x08003d68
 8002078:	fffffbff 	.word	0xfffffbff

0800207c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002086:	230f      	movs	r3, #15
 8002088:	18fb      	adds	r3, r7, r3
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	223c      	movs	r2, #60	@ 0x3c
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_TIM_ConfigClockSource+0x20>
 8002098:	2302      	movs	r3, #2
 800209a:	e0bc      	b.n	8002216 <HAL_TIM_ConfigClockSource+0x19a>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	223c      	movs	r2, #60	@ 0x3c
 80020a0:	2101      	movs	r1, #1
 80020a2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	223d      	movs	r2, #61	@ 0x3d
 80020a8:	2102      	movs	r1, #2
 80020aa:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4a5a      	ldr	r2, [pc, #360]	@ (8002220 <HAL_TIM_ConfigClockSource+0x1a4>)
 80020b8:	4013      	ands	r3, r2
 80020ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	4a59      	ldr	r2, [pc, #356]	@ (8002224 <HAL_TIM_ConfigClockSource+0x1a8>)
 80020c0:	4013      	ands	r3, r2
 80020c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2280      	movs	r2, #128	@ 0x80
 80020d2:	0192      	lsls	r2, r2, #6
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d040      	beq.n	800215a <HAL_TIM_ConfigClockSource+0xde>
 80020d8:	2280      	movs	r2, #128	@ 0x80
 80020da:	0192      	lsls	r2, r2, #6
 80020dc:	4293      	cmp	r3, r2
 80020de:	d900      	bls.n	80020e2 <HAL_TIM_ConfigClockSource+0x66>
 80020e0:	e088      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 80020e2:	2280      	movs	r2, #128	@ 0x80
 80020e4:	0152      	lsls	r2, r2, #5
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d100      	bne.n	80020ec <HAL_TIM_ConfigClockSource+0x70>
 80020ea:	e088      	b.n	80021fe <HAL_TIM_ConfigClockSource+0x182>
 80020ec:	2280      	movs	r2, #128	@ 0x80
 80020ee:	0152      	lsls	r2, r2, #5
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d900      	bls.n	80020f6 <HAL_TIM_ConfigClockSource+0x7a>
 80020f4:	e07e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 80020f6:	2b70      	cmp	r3, #112	@ 0x70
 80020f8:	d018      	beq.n	800212c <HAL_TIM_ConfigClockSource+0xb0>
 80020fa:	d900      	bls.n	80020fe <HAL_TIM_ConfigClockSource+0x82>
 80020fc:	e07a      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 80020fe:	2b60      	cmp	r3, #96	@ 0x60
 8002100:	d04f      	beq.n	80021a2 <HAL_TIM_ConfigClockSource+0x126>
 8002102:	d900      	bls.n	8002106 <HAL_TIM_ConfigClockSource+0x8a>
 8002104:	e076      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 8002106:	2b50      	cmp	r3, #80	@ 0x50
 8002108:	d03b      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0x106>
 800210a:	d900      	bls.n	800210e <HAL_TIM_ConfigClockSource+0x92>
 800210c:	e072      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 800210e:	2b40      	cmp	r3, #64	@ 0x40
 8002110:	d057      	beq.n	80021c2 <HAL_TIM_ConfigClockSource+0x146>
 8002112:	d900      	bls.n	8002116 <HAL_TIM_ConfigClockSource+0x9a>
 8002114:	e06e      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 8002116:	2b30      	cmp	r3, #48	@ 0x30
 8002118:	d063      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x166>
 800211a:	d86b      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 800211c:	2b20      	cmp	r3, #32
 800211e:	d060      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x166>
 8002120:	d868      	bhi.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
 8002122:	2b00      	cmp	r3, #0
 8002124:	d05d      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x166>
 8002126:	2b10      	cmp	r3, #16
 8002128:	d05b      	beq.n	80021e2 <HAL_TIM_ConfigClockSource+0x166>
 800212a:	e063      	b.n	80021f4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800213c:	f000 fc2e 	bl	800299c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2277      	movs	r2, #119	@ 0x77
 800214c:	4313      	orrs	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68ba      	ldr	r2, [r7, #8]
 8002156:	609a      	str	r2, [r3, #8]
      break;
 8002158:	e052      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800216a:	f000 fc17 	bl	800299c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2180      	movs	r1, #128	@ 0x80
 800217a:	01c9      	lsls	r1, r1, #7
 800217c:	430a      	orrs	r2, r1
 800217e:	609a      	str	r2, [r3, #8]
      break;
 8002180:	e03e      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800218e:	001a      	movs	r2, r3
 8002190:	f000 fb88 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	2150      	movs	r1, #80	@ 0x50
 800219a:	0018      	movs	r0, r3
 800219c:	f000 fbe2 	bl	8002964 <TIM_ITRx_SetConfig>
      break;
 80021a0:	e02e      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021ae:	001a      	movs	r2, r3
 80021b0:	f000 fba6 	bl	8002900 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2160      	movs	r1, #96	@ 0x60
 80021ba:	0018      	movs	r0, r3
 80021bc:	f000 fbd2 	bl	8002964 <TIM_ITRx_SetConfig>
      break;
 80021c0:	e01e      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80021ce:	001a      	movs	r2, r3
 80021d0:	f000 fb68 	bl	80028a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2140      	movs	r1, #64	@ 0x40
 80021da:	0018      	movs	r0, r3
 80021dc:	f000 fbc2 	bl	8002964 <TIM_ITRx_SetConfig>
      break;
 80021e0:	e00e      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	0019      	movs	r1, r3
 80021ec:	0010      	movs	r0, r2
 80021ee:	f000 fbb9 	bl	8002964 <TIM_ITRx_SetConfig>
      break;
 80021f2:	e005      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80021f4:	230f      	movs	r3, #15
 80021f6:	18fb      	adds	r3, r7, r3
 80021f8:	2201      	movs	r2, #1
 80021fa:	701a      	strb	r2, [r3, #0]
      break;
 80021fc:	e000      	b.n	8002200 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80021fe:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	223d      	movs	r2, #61	@ 0x3d
 8002204:	2101      	movs	r1, #1
 8002206:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	223c      	movs	r2, #60	@ 0x3c
 800220c:	2100      	movs	r1, #0
 800220e:	5499      	strb	r1, [r3, r2]

  return status;
 8002210:	230f      	movs	r3, #15
 8002212:	18fb      	adds	r3, r7, r3
 8002214:	781b      	ldrb	r3, [r3, #0]
}
 8002216:	0018      	movs	r0, r3
 8002218:	46bd      	mov	sp, r7
 800221a:	b004      	add	sp, #16
 800221c:	bd80      	pop	{r7, pc}
 800221e:	46c0      	nop			@ (mov r8, r8)
 8002220:	ffceff88 	.word	0xffceff88
 8002224:	ffff00ff 	.word	0xffff00ff

08002228 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002230:	46c0      	nop			@ (mov r8, r8)
 8002232:	46bd      	mov	sp, r7
 8002234:	b002      	add	sp, #8
 8002236:	bd80      	pop	{r7, pc}

08002238 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002240:	46c0      	nop			@ (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	b002      	add	sp, #8
 8002246:	bd80      	pop	{r7, pc}

08002248 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b082      	sub	sp, #8
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002250:	46c0      	nop			@ (mov r8, r8)
 8002252:	46bd      	mov	sp, r7
 8002254:	b002      	add	sp, #8
 8002256:	bd80      	pop	{r7, pc}

08002258 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002260:	46c0      	nop			@ (mov r8, r8)
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}

08002268 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002270:	46c0      	nop			@ (mov r8, r8)
 8002272:	46bd      	mov	sp, r7
 8002274:	b002      	add	sp, #8
 8002276:	bd80      	pop	{r7, pc}

08002278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	4a32      	ldr	r2, [pc, #200]	@ (8002354 <TIM_Base_SetConfig+0xdc>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d003      	beq.n	8002298 <TIM_Base_SetConfig+0x20>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	4a31      	ldr	r2, [pc, #196]	@ (8002358 <TIM_Base_SetConfig+0xe0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d108      	bne.n	80022aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	2270      	movs	r2, #112	@ 0x70
 800229c:	4393      	bics	r3, r2
 800229e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a29      	ldr	r2, [pc, #164]	@ (8002354 <TIM_Base_SetConfig+0xdc>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d00f      	beq.n	80022d2 <TIM_Base_SetConfig+0x5a>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a28      	ldr	r2, [pc, #160]	@ (8002358 <TIM_Base_SetConfig+0xe0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d00b      	beq.n	80022d2 <TIM_Base_SetConfig+0x5a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a27      	ldr	r2, [pc, #156]	@ (800235c <TIM_Base_SetConfig+0xe4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d007      	beq.n	80022d2 <TIM_Base_SetConfig+0x5a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a26      	ldr	r2, [pc, #152]	@ (8002360 <TIM_Base_SetConfig+0xe8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d003      	beq.n	80022d2 <TIM_Base_SetConfig+0x5a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a25      	ldr	r2, [pc, #148]	@ (8002364 <TIM_Base_SetConfig+0xec>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d108      	bne.n	80022e4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	4a24      	ldr	r2, [pc, #144]	@ (8002368 <TIM_Base_SetConfig+0xf0>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2280      	movs	r2, #128	@ 0x80
 80022e8:	4393      	bics	r3, r2
 80022ea:	001a      	movs	r2, r3
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	695b      	ldr	r3, [r3, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a11      	ldr	r2, [pc, #68]	@ (8002354 <TIM_Base_SetConfig+0xdc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d007      	beq.n	8002322 <TIM_Base_SetConfig+0xaa>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <TIM_Base_SetConfig+0xe8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d003      	beq.n	8002322 <TIM_Base_SetConfig+0xaa>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a11      	ldr	r2, [pc, #68]	@ (8002364 <TIM_Base_SetConfig+0xec>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d103      	bne.n	800232a <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	691a      	ldr	r2, [r3, #16]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2201      	movs	r2, #1
 8002336:	4013      	ands	r3, r2
 8002338:	2b01      	cmp	r3, #1
 800233a:	d106      	bne.n	800234a <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	2201      	movs	r2, #1
 8002342:	4393      	bics	r3, r2
 8002344:	001a      	movs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	611a      	str	r2, [r3, #16]
  }
}
 800234a:	46c0      	nop			@ (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b004      	add	sp, #16
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			@ (mov r8, r8)
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40000400 	.word	0x40000400
 800235c:	40002000 	.word	0x40002000
 8002360:	40014400 	.word	0x40014400
 8002364:	40014800 	.word	0x40014800
 8002368:	fffffcff 	.word	0xfffffcff

0800236c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b086      	sub	sp, #24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a1b      	ldr	r3, [r3, #32]
 8002380:	2201      	movs	r2, #1
 8002382:	4393      	bics	r3, r2
 8002384:	001a      	movs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	699b      	ldr	r3, [r3, #24]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4a2e      	ldr	r2, [pc, #184]	@ (8002454 <TIM_OC1_SetConfig+0xe8>)
 800239a:	4013      	ands	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	2203      	movs	r2, #3
 80023a2:	4393      	bics	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2202      	movs	r2, #2
 80023b4:	4393      	bics	r3, r2
 80023b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	697a      	ldr	r2, [r7, #20]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a24      	ldr	r2, [pc, #144]	@ (8002458 <TIM_OC1_SetConfig+0xec>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <TIM_OC1_SetConfig+0x6e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a23      	ldr	r2, [pc, #140]	@ (800245c <TIM_OC1_SetConfig+0xf0>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <TIM_OC1_SetConfig+0x6e>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <TIM_OC1_SetConfig+0xf4>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d10c      	bne.n	80023f4 <TIM_OC1_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2208      	movs	r2, #8
 80023de:	4393      	bics	r3, r2
 80023e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68db      	ldr	r3, [r3, #12]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	2204      	movs	r2, #4
 80023f0:	4393      	bics	r3, r2
 80023f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	4a18      	ldr	r2, [pc, #96]	@ (8002458 <TIM_OC1_SetConfig+0xec>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d007      	beq.n	800240c <TIM_OC1_SetConfig+0xa0>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4a17      	ldr	r2, [pc, #92]	@ (800245c <TIM_OC1_SetConfig+0xf0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d003      	beq.n	800240c <TIM_OC1_SetConfig+0xa0>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	4a16      	ldr	r2, [pc, #88]	@ (8002460 <TIM_OC1_SetConfig+0xf4>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d111      	bne.n	8002430 <TIM_OC1_SetConfig+0xc4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	4a15      	ldr	r2, [pc, #84]	@ (8002464 <TIM_OC1_SetConfig+0xf8>)
 8002410:	4013      	ands	r3, r2
 8002412:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	4a14      	ldr	r2, [pc, #80]	@ (8002468 <TIM_OC1_SetConfig+0xfc>)
 8002418:	4013      	ands	r3, r2
 800241a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	695b      	ldr	r3, [r3, #20]
 8002420:	693a      	ldr	r2, [r7, #16]
 8002422:	4313      	orrs	r3, r2
 8002424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	699b      	ldr	r3, [r3, #24]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	693a      	ldr	r2, [r7, #16]
 8002434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68fa      	ldr	r2, [r7, #12]
 800243a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	621a      	str	r2, [r3, #32]
}
 800244a:	46c0      	nop			@ (mov r8, r8)
 800244c:	46bd      	mov	sp, r7
 800244e:	b006      	add	sp, #24
 8002450:	bd80      	pop	{r7, pc}
 8002452:	46c0      	nop			@ (mov r8, r8)
 8002454:	fffeff8f 	.word	0xfffeff8f
 8002458:	40012c00 	.word	0x40012c00
 800245c:	40014400 	.word	0x40014400
 8002460:	40014800 	.word	0x40014800
 8002464:	fffffeff 	.word	0xfffffeff
 8002468:	fffffdff 	.word	0xfffffdff

0800246c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b086      	sub	sp, #24
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
 8002474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1b      	ldr	r3, [r3, #32]
 8002480:	2210      	movs	r2, #16
 8002482:	4393      	bics	r3, r2
 8002484:	001a      	movs	r2, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a2c      	ldr	r2, [pc, #176]	@ (800254c <TIM_OC2_SetConfig+0xe0>)
 800249a:	4013      	ands	r3, r2
 800249c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a2b      	ldr	r2, [pc, #172]	@ (8002550 <TIM_OC2_SetConfig+0xe4>)
 80024a2:	4013      	ands	r3, r2
 80024a4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	2220      	movs	r2, #32
 80024b6:	4393      	bics	r3, r2
 80024b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	697a      	ldr	r2, [r7, #20]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a22      	ldr	r2, [pc, #136]	@ (8002554 <TIM_OC2_SetConfig+0xe8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10d      	bne.n	80024ea <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2280      	movs	r2, #128	@ 0x80
 80024d2:	4393      	bics	r3, r2
 80024d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	011b      	lsls	r3, r3, #4
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	4313      	orrs	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	2240      	movs	r2, #64	@ 0x40
 80024e6:	4393      	bics	r3, r2
 80024e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a19      	ldr	r2, [pc, #100]	@ (8002554 <TIM_OC2_SetConfig+0xe8>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d007      	beq.n	8002502 <TIM_OC2_SetConfig+0x96>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a18      	ldr	r2, [pc, #96]	@ (8002558 <TIM_OC2_SetConfig+0xec>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d003      	beq.n	8002502 <TIM_OC2_SetConfig+0x96>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	4a17      	ldr	r2, [pc, #92]	@ (800255c <TIM_OC2_SetConfig+0xf0>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d113      	bne.n	800252a <TIM_OC2_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	4a16      	ldr	r2, [pc, #88]	@ (8002560 <TIM_OC2_SetConfig+0xf4>)
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	4a15      	ldr	r2, [pc, #84]	@ (8002564 <TIM_OC2_SetConfig+0xf8>)
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	695b      	ldr	r3, [r3, #20]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	693a      	ldr	r2, [r7, #16]
 800251a:	4313      	orrs	r3, r2
 800251c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685a      	ldr	r2, [r3, #4]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	697a      	ldr	r2, [r7, #20]
 8002542:	621a      	str	r2, [r3, #32]
}
 8002544:	46c0      	nop			@ (mov r8, r8)
 8002546:	46bd      	mov	sp, r7
 8002548:	b006      	add	sp, #24
 800254a:	bd80      	pop	{r7, pc}
 800254c:	feff8fff 	.word	0xfeff8fff
 8002550:	fffffcff 	.word	0xfffffcff
 8002554:	40012c00 	.word	0x40012c00
 8002558:	40014400 	.word	0x40014400
 800255c:	40014800 	.word	0x40014800
 8002560:	fffffbff 	.word	0xfffffbff
 8002564:	fffff7ff 	.word	0xfffff7ff

08002568 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a1b      	ldr	r3, [r3, #32]
 8002576:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a1b      	ldr	r3, [r3, #32]
 800257c:	4a31      	ldr	r2, [pc, #196]	@ (8002644 <TIM_OC3_SetConfig+0xdc>)
 800257e:	401a      	ands	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4a2d      	ldr	r2, [pc, #180]	@ (8002648 <TIM_OC3_SetConfig+0xe0>)
 8002594:	4013      	ands	r3, r2
 8002596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2203      	movs	r2, #3
 800259c:	4393      	bics	r3, r2
 800259e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68fa      	ldr	r2, [r7, #12]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	4a27      	ldr	r2, [pc, #156]	@ (800264c <TIM_OC3_SetConfig+0xe4>)
 80025ae:	4013      	ands	r3, r2
 80025b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	021b      	lsls	r3, r3, #8
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	4313      	orrs	r3, r2
 80025bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	4a23      	ldr	r2, [pc, #140]	@ (8002650 <TIM_OC3_SetConfig+0xe8>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d10d      	bne.n	80025e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	4a22      	ldr	r2, [pc, #136]	@ (8002654 <TIM_OC3_SetConfig+0xec>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	68db      	ldr	r3, [r3, #12]
 80025d2:	021b      	lsls	r3, r3, #8
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80025da:	697b      	ldr	r3, [r7, #20]
 80025dc:	4a1e      	ldr	r2, [pc, #120]	@ (8002658 <TIM_OC3_SetConfig+0xf0>)
 80025de:	4013      	ands	r3, r2
 80025e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a1a      	ldr	r2, [pc, #104]	@ (8002650 <TIM_OC3_SetConfig+0xe8>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d007      	beq.n	80025fa <TIM_OC3_SetConfig+0x92>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	4a1b      	ldr	r2, [pc, #108]	@ (800265c <TIM_OC3_SetConfig+0xf4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d003      	beq.n	80025fa <TIM_OC3_SetConfig+0x92>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	4a1a      	ldr	r2, [pc, #104]	@ (8002660 <TIM_OC3_SetConfig+0xf8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d113      	bne.n	8002622 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4a19      	ldr	r2, [pc, #100]	@ (8002664 <TIM_OC3_SetConfig+0xfc>)
 80025fe:	4013      	ands	r3, r2
 8002600:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	4a18      	ldr	r2, [pc, #96]	@ (8002668 <TIM_OC3_SetConfig+0x100>)
 8002606:	4013      	ands	r3, r2
 8002608:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	011b      	lsls	r3, r3, #4
 8002610:	693a      	ldr	r2, [r7, #16]
 8002612:	4313      	orrs	r3, r2
 8002614:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	699b      	ldr	r3, [r3, #24]
 800261a:	011b      	lsls	r3, r3, #4
 800261c:	693a      	ldr	r2, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	693a      	ldr	r2, [r7, #16]
 8002626:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68fa      	ldr	r2, [r7, #12]
 800262c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685a      	ldr	r2, [r3, #4]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	621a      	str	r2, [r3, #32]
}
 800263c:	46c0      	nop			@ (mov r8, r8)
 800263e:	46bd      	mov	sp, r7
 8002640:	b006      	add	sp, #24
 8002642:	bd80      	pop	{r7, pc}
 8002644:	fffffeff 	.word	0xfffffeff
 8002648:	fffeff8f 	.word	0xfffeff8f
 800264c:	fffffdff 	.word	0xfffffdff
 8002650:	40012c00 	.word	0x40012c00
 8002654:	fffff7ff 	.word	0xfffff7ff
 8002658:	fffffbff 	.word	0xfffffbff
 800265c:	40014400 	.word	0x40014400
 8002660:	40014800 	.word	0x40014800
 8002664:	ffffefff 	.word	0xffffefff
 8002668:	ffffdfff 	.word	0xffffdfff

0800266c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	4a24      	ldr	r2, [pc, #144]	@ (8002714 <TIM_OC4_SetConfig+0xa8>)
 8002682:	401a      	ands	r2, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	685b      	ldr	r3, [r3, #4]
 800268c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69db      	ldr	r3, [r3, #28]
 8002692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	4a20      	ldr	r2, [pc, #128]	@ (8002718 <TIM_OC4_SetConfig+0xac>)
 8002698:	4013      	ands	r3, r2
 800269a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4a1f      	ldr	r2, [pc, #124]	@ (800271c <TIM_OC4_SetConfig+0xb0>)
 80026a0:	4013      	ands	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	021b      	lsls	r3, r3, #8
 80026aa:	68fa      	ldr	r2, [r7, #12]
 80026ac:	4313      	orrs	r3, r2
 80026ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	4a1b      	ldr	r2, [pc, #108]	@ (8002720 <TIM_OC4_SetConfig+0xb4>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	031b      	lsls	r3, r3, #12
 80026be:	693a      	ldr	r2, [r7, #16]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a17      	ldr	r2, [pc, #92]	@ (8002724 <TIM_OC4_SetConfig+0xb8>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d007      	beq.n	80026dc <TIM_OC4_SetConfig+0x70>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	4a16      	ldr	r2, [pc, #88]	@ (8002728 <TIM_OC4_SetConfig+0xbc>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d003      	beq.n	80026dc <TIM_OC4_SetConfig+0x70>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	4a15      	ldr	r2, [pc, #84]	@ (800272c <TIM_OC4_SetConfig+0xc0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d109      	bne.n	80026f0 <TIM_OC4_SetConfig+0x84>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <TIM_OC4_SetConfig+0xc4>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	695b      	ldr	r3, [r3, #20]
 80026e8:	019b      	lsls	r3, r3, #6
 80026ea:	697a      	ldr	r2, [r7, #20]
 80026ec:	4313      	orrs	r3, r2
 80026ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685a      	ldr	r2, [r3, #4]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	693a      	ldr	r2, [r7, #16]
 8002708:	621a      	str	r2, [r3, #32]
}
 800270a:	46c0      	nop			@ (mov r8, r8)
 800270c:	46bd      	mov	sp, r7
 800270e:	b006      	add	sp, #24
 8002710:	bd80      	pop	{r7, pc}
 8002712:	46c0      	nop			@ (mov r8, r8)
 8002714:	ffffefff 	.word	0xffffefff
 8002718:	feff8fff 	.word	0xfeff8fff
 800271c:	fffffcff 	.word	0xfffffcff
 8002720:	ffffdfff 	.word	0xffffdfff
 8002724:	40012c00 	.word	0x40012c00
 8002728:	40014400 	.word	0x40014400
 800272c:	40014800 	.word	0x40014800
 8002730:	ffffbfff 	.word	0xffffbfff

08002734 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a21      	ldr	r2, [pc, #132]	@ (80027d0 <TIM_OC5_SetConfig+0x9c>)
 800274a:	401a      	ands	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800275a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	4a1d      	ldr	r2, [pc, #116]	@ (80027d4 <TIM_OC5_SetConfig+0xa0>)
 8002760:	4013      	ands	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	4313      	orrs	r3, r2
 800276c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	4a19      	ldr	r2, [pc, #100]	@ (80027d8 <TIM_OC5_SetConfig+0xa4>)
 8002772:	4013      	ands	r3, r2
 8002774:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	693a      	ldr	r2, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a15      	ldr	r2, [pc, #84]	@ (80027dc <TIM_OC5_SetConfig+0xa8>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d007      	beq.n	800279a <TIM_OC5_SetConfig+0x66>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a14      	ldr	r2, [pc, #80]	@ (80027e0 <TIM_OC5_SetConfig+0xac>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d003      	beq.n	800279a <TIM_OC5_SetConfig+0x66>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a13      	ldr	r2, [pc, #76]	@ (80027e4 <TIM_OC5_SetConfig+0xb0>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d109      	bne.n	80027ae <TIM_OC5_SetConfig+0x7a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	4a0c      	ldr	r2, [pc, #48]	@ (80027d0 <TIM_OC5_SetConfig+0x9c>)
 800279e:	4013      	ands	r3, r2
 80027a0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	021b      	lsls	r3, r3, #8
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	4313      	orrs	r3, r2
 80027ac:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685a      	ldr	r2, [r3, #4]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	621a      	str	r2, [r3, #32]
}
 80027c8:	46c0      	nop			@ (mov r8, r8)
 80027ca:	46bd      	mov	sp, r7
 80027cc:	b006      	add	sp, #24
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	fffeffff 	.word	0xfffeffff
 80027d4:	fffeff8f 	.word	0xfffeff8f
 80027d8:	fffdffff 	.word	0xfffdffff
 80027dc:	40012c00 	.word	0x40012c00
 80027e0:	40014400 	.word	0x40014400
 80027e4:	40014800 	.word	0x40014800

080027e8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a1b      	ldr	r3, [r3, #32]
 80027f6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4a22      	ldr	r2, [pc, #136]	@ (8002888 <TIM_OC6_SetConfig+0xa0>)
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800280e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a1e      	ldr	r2, [pc, #120]	@ (800288c <TIM_OC6_SetConfig+0xa4>)
 8002814:	4013      	ands	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	021b      	lsls	r3, r3, #8
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	4a1a      	ldr	r2, [pc, #104]	@ (8002890 <TIM_OC6_SetConfig+0xa8>)
 8002828:	4013      	ands	r3, r2
 800282a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	051b      	lsls	r3, r3, #20
 8002832:	693a      	ldr	r2, [r7, #16]
 8002834:	4313      	orrs	r3, r2
 8002836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a16      	ldr	r2, [pc, #88]	@ (8002894 <TIM_OC6_SetConfig+0xac>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d007      	beq.n	8002850 <TIM_OC6_SetConfig+0x68>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a15      	ldr	r2, [pc, #84]	@ (8002898 <TIM_OC6_SetConfig+0xb0>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d003      	beq.n	8002850 <TIM_OC6_SetConfig+0x68>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4a14      	ldr	r2, [pc, #80]	@ (800289c <TIM_OC6_SetConfig+0xb4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d109      	bne.n	8002864 <TIM_OC6_SetConfig+0x7c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	4a13      	ldr	r2, [pc, #76]	@ (80028a0 <TIM_OC6_SetConfig+0xb8>)
 8002854:	4013      	ands	r3, r2
 8002856:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	029b      	lsls	r3, r3, #10
 800285e:	697a      	ldr	r2, [r7, #20]
 8002860:	4313      	orrs	r3, r2
 8002862:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	697a      	ldr	r2, [r7, #20]
 8002868:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	68fa      	ldr	r2, [r7, #12]
 800286e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	693a      	ldr	r2, [r7, #16]
 800287c:	621a      	str	r2, [r3, #32]
}
 800287e:	46c0      	nop			@ (mov r8, r8)
 8002880:	46bd      	mov	sp, r7
 8002882:	b006      	add	sp, #24
 8002884:	bd80      	pop	{r7, pc}
 8002886:	46c0      	nop			@ (mov r8, r8)
 8002888:	ffefffff 	.word	0xffefffff
 800288c:	feff8fff 	.word	0xfeff8fff
 8002890:	ffdfffff 	.word	0xffdfffff
 8002894:	40012c00 	.word	0x40012c00
 8002898:	40014400 	.word	0x40014400
 800289c:	40014800 	.word	0x40014800
 80028a0:	fffbffff 	.word	0xfffbffff

080028a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	2201      	movs	r2, #1
 80028bc:	4393      	bics	r3, r2
 80028be:	001a      	movs	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	22f0      	movs	r2, #240	@ 0xf0
 80028ce:	4393      	bics	r3, r2
 80028d0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	220a      	movs	r2, #10
 80028e0:	4393      	bics	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	693a      	ldr	r2, [r7, #16]
 80028f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	621a      	str	r2, [r3, #32]
}
 80028f8:	46c0      	nop			@ (mov r8, r8)
 80028fa:	46bd      	mov	sp, r7
 80028fc:	b006      	add	sp, #24
 80028fe:	bd80      	pop	{r7, pc}

08002900 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	2210      	movs	r2, #16
 8002918:	4393      	bics	r3, r2
 800291a:	001a      	movs	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	4a0d      	ldr	r2, [pc, #52]	@ (8002960 <TIM_TI2_ConfigInputStage+0x60>)
 800292a:	4013      	ands	r3, r2
 800292c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	031b      	lsls	r3, r3, #12
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	4313      	orrs	r3, r2
 8002936:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	22a0      	movs	r2, #160	@ 0xa0
 800293c:	4393      	bics	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	693a      	ldr	r2, [r7, #16]
 800294e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	697a      	ldr	r2, [r7, #20]
 8002954:	621a      	str	r2, [r3, #32]
}
 8002956:	46c0      	nop			@ (mov r8, r8)
 8002958:	46bd      	mov	sp, r7
 800295a:	b006      	add	sp, #24
 800295c:	bd80      	pop	{r7, pc}
 800295e:	46c0      	nop			@ (mov r8, r8)
 8002960:	ffff0fff 	.word	0xffff0fff

08002964 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a08      	ldr	r2, [pc, #32]	@ (8002998 <TIM_ITRx_SetConfig+0x34>)
 8002978:	4013      	ands	r3, r2
 800297a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800297c:	683a      	ldr	r2, [r7, #0]
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4313      	orrs	r3, r2
 8002982:	2207      	movs	r2, #7
 8002984:	4313      	orrs	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68fa      	ldr	r2, [r7, #12]
 800298c:	609a      	str	r2, [r3, #8]
}
 800298e:	46c0      	nop			@ (mov r8, r8)
 8002990:	46bd      	mov	sp, r7
 8002992:	b004      	add	sp, #16
 8002994:	bd80      	pop	{r7, pc}
 8002996:	46c0      	nop			@ (mov r8, r8)
 8002998:	ffcfff8f 	.word	0xffcfff8f

0800299c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b086      	sub	sp, #24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
 80029a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4a09      	ldr	r2, [pc, #36]	@ (80029d8 <TIM_ETR_SetConfig+0x3c>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	021a      	lsls	r2, r3, #8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	431a      	orrs	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	609a      	str	r2, [r3, #8]
}
 80029d0:	46c0      	nop			@ (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b006      	add	sp, #24
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	ffff00ff 	.word	0xffff00ff

080029dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	223c      	movs	r2, #60	@ 0x3c
 80029ea:	5c9b      	ldrb	r3, [r3, r2]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d101      	bne.n	80029f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029f0:	2302      	movs	r3, #2
 80029f2:	e04a      	b.n	8002a8a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	223c      	movs	r2, #60	@ 0x3c
 80029f8:	2101      	movs	r1, #1
 80029fa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	223d      	movs	r2, #61	@ 0x3d
 8002a00:	2102      	movs	r1, #2
 8002a02:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1e      	ldr	r2, [pc, #120]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d108      	bne.n	8002a30 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4a1d      	ldr	r2, [pc, #116]	@ (8002a98 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002a22:	4013      	ands	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	2270      	movs	r2, #112	@ 0x70
 8002a34:	4393      	bics	r3, r2
 8002a36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4a11      	ldr	r2, [pc, #68]	@ (8002a94 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d004      	beq.n	8002a5e <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a10      	ldr	r2, [pc, #64]	@ (8002a9c <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d10c      	bne.n	8002a78 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2280      	movs	r2, #128	@ 0x80
 8002a62:	4393      	bics	r3, r2
 8002a64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	68ba      	ldr	r2, [r7, #8]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	223d      	movs	r2, #61	@ 0x3d
 8002a7c:	2101      	movs	r1, #1
 8002a7e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	223c      	movs	r2, #60	@ 0x3c
 8002a84:	2100      	movs	r1, #0
 8002a86:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	b004      	add	sp, #16
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	46c0      	nop			@ (mov r8, r8)
 8002a94:	40012c00 	.word	0x40012c00
 8002a98:	ff0fffff 	.word	0xff0fffff
 8002a9c:	40000400 	.word	0x40000400

08002aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002aa8:	46c0      	nop			@ (mov r8, r8)
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ab8:	46c0      	nop			@ (mov r8, r8)
 8002aba:	46bd      	mov	sp, r7
 8002abc:	b002      	add	sp, #8
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ac8:	46c0      	nop			@ (mov r8, r8)
 8002aca:	46bd      	mov	sp, r7
 8002acc:	b002      	add	sp, #8
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e04e      	b.n	8002b80 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2288      	movs	r2, #136	@ 0x88
 8002ae6:	589b      	ldr	r3, [r3, r2]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d107      	bne.n	8002afc <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2284      	movs	r2, #132	@ 0x84
 8002af0:	2100      	movs	r1, #0
 8002af2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f7fd fee2 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2288      	movs	r2, #136	@ 0x88
 8002b00:	2124      	movs	r1, #36	@ 0x24
 8002b02:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2101      	movs	r1, #1
 8002b10:	438a      	bics	r2, r1
 8002b12:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d003      	beq.n	8002b24 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	0018      	movs	r0, r3
 8002b20:	f000 fd14 	bl	800354c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f000 fb92 	bl	8003250 <UART_SetConfig>
 8002b2c:	0003      	movs	r3, r0
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d101      	bne.n	8002b36 <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e024      	b.n	8002b80 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4911      	ldr	r1, [pc, #68]	@ (8002b88 <HAL_HalfDuplex_Init+0xb8>)
 8002b42:	400a      	ands	r2, r1
 8002b44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	2122      	movs	r1, #34	@ 0x22
 8002b52:	438a      	bics	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2108      	movs	r1, #8
 8002b62:	430a      	orrs	r2, r1
 8002b64:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2101      	movs	r1, #1
 8002b72:	430a      	orrs	r2, r1
 8002b74:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	0018      	movs	r0, r3
 8002b7a:	f000 fd9b 	bl	80036b4 <UART_CheckIdleState>
 8002b7e:	0003      	movs	r3, r0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	ffffb7ff 	.word	0xffffb7ff

08002b8c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b8c:	b5b0      	push	{r4, r5, r7, lr}
 8002b8e:	b0aa      	sub	sp, #168	@ 0xa8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	22a4      	movs	r2, #164	@ 0xa4
 8002b9c:	18b9      	adds	r1, r7, r2
 8002b9e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	20a0      	movs	r0, #160	@ 0xa0
 8002ba8:	1839      	adds	r1, r7, r0
 8002baa:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	249c      	movs	r4, #156	@ 0x9c
 8002bb4:	1939      	adds	r1, r7, r4
 8002bb6:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bb8:	0011      	movs	r1, r2
 8002bba:	18bb      	adds	r3, r7, r2
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4aa2      	ldr	r2, [pc, #648]	@ (8002e48 <HAL_UART_IRQHandler+0x2bc>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	2298      	movs	r2, #152	@ 0x98
 8002bc4:	18bd      	adds	r5, r7, r2
 8002bc6:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002bc8:	18bb      	adds	r3, r7, r2
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d11a      	bne.n	8002c06 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002bd0:	187b      	adds	r3, r7, r1
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2220      	movs	r2, #32
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	d015      	beq.n	8002c06 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bda:	183b      	adds	r3, r7, r0
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2220      	movs	r2, #32
 8002be0:	4013      	ands	r3, r2
 8002be2:	d105      	bne.n	8002bf0 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002be4:	193b      	adds	r3, r7, r4
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	2380      	movs	r3, #128	@ 0x80
 8002bea:	055b      	lsls	r3, r3, #21
 8002bec:	4013      	ands	r3, r2
 8002bee:	d00a      	beq.n	8002c06 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d100      	bne.n	8002bfa <HAL_UART_IRQHandler+0x6e>
 8002bf8:	e2fb      	b.n	80031f2 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	0010      	movs	r0, r2
 8002c02:	4798      	blx	r3
      }
      return;
 8002c04:	e2f5      	b.n	80031f2 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c06:	2398      	movs	r3, #152	@ 0x98
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d100      	bne.n	8002c12 <HAL_UART_IRQHandler+0x86>
 8002c10:	e122      	b.n	8002e58 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002c12:	239c      	movs	r3, #156	@ 0x9c
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a8c      	ldr	r2, [pc, #560]	@ (8002e4c <HAL_UART_IRQHandler+0x2c0>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	d106      	bne.n	8002c2c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002c1e:	23a0      	movs	r3, #160	@ 0xa0
 8002c20:	18fb      	adds	r3, r7, r3
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a8a      	ldr	r2, [pc, #552]	@ (8002e50 <HAL_UART_IRQHandler+0x2c4>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	d100      	bne.n	8002c2c <HAL_UART_IRQHandler+0xa0>
 8002c2a:	e115      	b.n	8002e58 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c2c:	23a4      	movs	r3, #164	@ 0xa4
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	4013      	ands	r3, r2
 8002c36:	d012      	beq.n	8002c5e <HAL_UART_IRQHandler+0xd2>
 8002c38:	23a0      	movs	r3, #160	@ 0xa0
 8002c3a:	18fb      	adds	r3, r7, r3
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	2380      	movs	r3, #128	@ 0x80
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4013      	ands	r3, r2
 8002c44:	d00b      	beq.n	8002c5e <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2290      	movs	r2, #144	@ 0x90
 8002c52:	589b      	ldr	r3, [r3, r2]
 8002c54:	2201      	movs	r2, #1
 8002c56:	431a      	orrs	r2, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2190      	movs	r1, #144	@ 0x90
 8002c5c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c5e:	23a4      	movs	r3, #164	@ 0xa4
 8002c60:	18fb      	adds	r3, r7, r3
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2202      	movs	r2, #2
 8002c66:	4013      	ands	r3, r2
 8002c68:	d011      	beq.n	8002c8e <HAL_UART_IRQHandler+0x102>
 8002c6a:	239c      	movs	r3, #156	@ 0x9c
 8002c6c:	18fb      	adds	r3, r7, r3
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2201      	movs	r2, #1
 8002c72:	4013      	ands	r3, r2
 8002c74:	d00b      	beq.n	8002c8e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2290      	movs	r2, #144	@ 0x90
 8002c82:	589b      	ldr	r3, [r3, r2]
 8002c84:	2204      	movs	r2, #4
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2190      	movs	r1, #144	@ 0x90
 8002c8c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c8e:	23a4      	movs	r3, #164	@ 0xa4
 8002c90:	18fb      	adds	r3, r7, r3
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2204      	movs	r2, #4
 8002c96:	4013      	ands	r3, r2
 8002c98:	d011      	beq.n	8002cbe <HAL_UART_IRQHandler+0x132>
 8002c9a:	239c      	movs	r3, #156	@ 0x9c
 8002c9c:	18fb      	adds	r3, r7, r3
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	d00b      	beq.n	8002cbe <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2204      	movs	r2, #4
 8002cac:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2290      	movs	r2, #144	@ 0x90
 8002cb2:	589b      	ldr	r3, [r3, r2]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2190      	movs	r1, #144	@ 0x90
 8002cbc:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cbe:	23a4      	movs	r3, #164	@ 0xa4
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2208      	movs	r2, #8
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	d017      	beq.n	8002cfa <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cca:	23a0      	movs	r3, #160	@ 0xa0
 8002ccc:	18fb      	adds	r3, r7, r3
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	2220      	movs	r2, #32
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	d105      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002cd6:	239c      	movs	r3, #156	@ 0x9c
 8002cd8:	18fb      	adds	r3, r7, r3
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a5b      	ldr	r2, [pc, #364]	@ (8002e4c <HAL_UART_IRQHandler+0x2c0>)
 8002cde:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002ce0:	d00b      	beq.n	8002cfa <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2208      	movs	r2, #8
 8002ce8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2290      	movs	r2, #144	@ 0x90
 8002cee:	589b      	ldr	r3, [r3, r2]
 8002cf0:	2208      	movs	r2, #8
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2190      	movs	r1, #144	@ 0x90
 8002cf8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cfa:	23a4      	movs	r3, #164	@ 0xa4
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	2380      	movs	r3, #128	@ 0x80
 8002d02:	011b      	lsls	r3, r3, #4
 8002d04:	4013      	ands	r3, r2
 8002d06:	d013      	beq.n	8002d30 <HAL_UART_IRQHandler+0x1a4>
 8002d08:	23a0      	movs	r3, #160	@ 0xa0
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	2380      	movs	r3, #128	@ 0x80
 8002d10:	04db      	lsls	r3, r3, #19
 8002d12:	4013      	ands	r3, r2
 8002d14:	d00c      	beq.n	8002d30 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	2280      	movs	r2, #128	@ 0x80
 8002d1c:	0112      	lsls	r2, r2, #4
 8002d1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2290      	movs	r2, #144	@ 0x90
 8002d24:	589b      	ldr	r3, [r3, r2]
 8002d26:	2220      	movs	r2, #32
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2190      	movs	r1, #144	@ 0x90
 8002d2e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2290      	movs	r2, #144	@ 0x90
 8002d34:	589b      	ldr	r3, [r3, r2]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d100      	bne.n	8002d3c <HAL_UART_IRQHandler+0x1b0>
 8002d3a:	e25c      	b.n	80031f6 <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d3c:	23a4      	movs	r3, #164	@ 0xa4
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2220      	movs	r2, #32
 8002d44:	4013      	ands	r3, r2
 8002d46:	d015      	beq.n	8002d74 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d48:	23a0      	movs	r3, #160	@ 0xa0
 8002d4a:	18fb      	adds	r3, r7, r3
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	2220      	movs	r2, #32
 8002d50:	4013      	ands	r3, r2
 8002d52:	d106      	bne.n	8002d62 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d54:	239c      	movs	r3, #156	@ 0x9c
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	2380      	movs	r3, #128	@ 0x80
 8002d5c:	055b      	lsls	r3, r3, #21
 8002d5e:	4013      	ands	r3, r2
 8002d60:	d008      	beq.n	8002d74 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d004      	beq.n	8002d74 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	0010      	movs	r0, r2
 8002d72:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2290      	movs	r2, #144	@ 0x90
 8002d78:	589b      	ldr	r3, [r3, r2]
 8002d7a:	2194      	movs	r1, #148	@ 0x94
 8002d7c:	187a      	adds	r2, r7, r1
 8002d7e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	689b      	ldr	r3, [r3, #8]
 8002d86:	2240      	movs	r2, #64	@ 0x40
 8002d88:	4013      	ands	r3, r2
 8002d8a:	2b40      	cmp	r3, #64	@ 0x40
 8002d8c:	d004      	beq.n	8002d98 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d8e:	187b      	adds	r3, r7, r1
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2228      	movs	r2, #40	@ 0x28
 8002d94:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d96:	d04c      	beq.n	8002e32 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f000 fda4 	bl	80038e8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2240      	movs	r2, #64	@ 0x40
 8002da8:	4013      	ands	r3, r2
 8002daa:	2b40      	cmp	r3, #64	@ 0x40
 8002dac:	d13c      	bne.n	8002e28 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002dae:	f3ef 8310 	mrs	r3, PRIMASK
 8002db2:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002db4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002db6:	2090      	movs	r0, #144	@ 0x90
 8002db8:	183a      	adds	r2, r7, r0
 8002dba:	6013      	str	r3, [r2, #0]
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	667b      	str	r3, [r7, #100]	@ 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002dc2:	f383 8810 	msr	PRIMASK, r3
}
 8002dc6:	46c0      	nop			@ (mov r8, r8)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2140      	movs	r1, #64	@ 0x40
 8002dd4:	438a      	bics	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]
 8002dd8:	183b      	adds	r3, r7, r0
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002de0:	f383 8810 	msr	PRIMASK, r3
}
 8002de4:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2280      	movs	r2, #128	@ 0x80
 8002dea:	589b      	ldr	r3, [r3, r2]
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d016      	beq.n	8002e1e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2280      	movs	r2, #128	@ 0x80
 8002df4:	589b      	ldr	r3, [r3, r2]
 8002df6:	4a17      	ldr	r2, [pc, #92]	@ (8002e54 <HAL_UART_IRQHandler+0x2c8>)
 8002df8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2280      	movs	r2, #128	@ 0x80
 8002dfe:	589b      	ldr	r3, [r3, r2]
 8002e00:	0018      	movs	r0, r3
 8002e02:	f7fe f801 	bl	8000e08 <HAL_DMA_Abort_IT>
 8002e06:	1e03      	subs	r3, r0, #0
 8002e08:	d01c      	beq.n	8002e44 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2280      	movs	r2, #128	@ 0x80
 8002e0e:	589b      	ldr	r3, [r3, r2]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	2180      	movs	r1, #128	@ 0x80
 8002e16:	5852      	ldr	r2, [r2, r1]
 8002e18:	0010      	movs	r0, r2
 8002e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e1c:	e012      	b.n	8002e44 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fa01 	bl	8003228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e26:	e00d      	b.n	8002e44 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	0018      	movs	r0, r3
 8002e2c:	f000 f9fc 	bl	8003228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	e008      	b.n	8002e44 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f9f7 	bl	8003228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2290      	movs	r2, #144	@ 0x90
 8002e3e:	2100      	movs	r1, #0
 8002e40:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002e42:	e1d8      	b.n	80031f6 <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	46c0      	nop			@ (mov r8, r8)
    return;
 8002e46:	e1d6      	b.n	80031f6 <HAL_UART_IRQHandler+0x66a>
 8002e48:	0000080f 	.word	0x0000080f
 8002e4c:	10000001 	.word	0x10000001
 8002e50:	04000120 	.word	0x04000120
 8002e54:	080039b5 	.word	0x080039b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d000      	beq.n	8002e62 <HAL_UART_IRQHandler+0x2d6>
 8002e60:	e15d      	b.n	800311e <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e62:	23a4      	movs	r3, #164	@ 0xa4
 8002e64:	18fb      	adds	r3, r7, r3
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2210      	movs	r2, #16
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d100      	bne.n	8002e70 <HAL_UART_IRQHandler+0x2e4>
 8002e6e:	e156      	b.n	800311e <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e70:	23a0      	movs	r3, #160	@ 0xa0
 8002e72:	18fb      	adds	r3, r7, r3
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	2210      	movs	r2, #16
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d100      	bne.n	8002e7e <HAL_UART_IRQHandler+0x2f2>
 8002e7c:	e14f      	b.n	800311e <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2210      	movs	r2, #16
 8002e84:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2240      	movs	r2, #64	@ 0x40
 8002e8e:	4013      	ands	r3, r2
 8002e90:	2b40      	cmp	r3, #64	@ 0x40
 8002e92:	d000      	beq.n	8002e96 <HAL_UART_IRQHandler+0x30a>
 8002e94:	e0c3      	b.n	800301e <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2280      	movs	r2, #128	@ 0x80
 8002e9a:	589b      	ldr	r3, [r3, r2]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	217e      	movs	r1, #126	@ 0x7e
 8002ea2:	187b      	adds	r3, r7, r1
 8002ea4:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002ea6:	187b      	adds	r3, r7, r1
 8002ea8:	881b      	ldrh	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d100      	bne.n	8002eb0 <HAL_UART_IRQHandler+0x324>
 8002eae:	e097      	b.n	8002fe0 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	225c      	movs	r2, #92	@ 0x5c
 8002eb4:	5a9b      	ldrh	r3, [r3, r2]
 8002eb6:	187a      	adds	r2, r7, r1
 8002eb8:	8812      	ldrh	r2, [r2, #0]
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d300      	bcc.n	8002ec0 <HAL_UART_IRQHandler+0x334>
 8002ebe:	e08f      	b.n	8002fe0 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	187a      	adds	r2, r7, r1
 8002ec4:	215e      	movs	r1, #94	@ 0x5e
 8002ec6:	8812      	ldrh	r2, [r2, #0]
 8002ec8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2280      	movs	r2, #128	@ 0x80
 8002ece:	589b      	ldr	r3, [r3, r2]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	d170      	bne.n	8002fbc <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002eda:	f3ef 8310 	mrs	r3, PRIMASK
 8002ede:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8002ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ee2:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002eea:	f383 8810 	msr	PRIMASK, r3
}
 8002eee:	46c0      	nop			@ (mov r8, r8)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	49c4      	ldr	r1, [pc, #784]	@ (800320c <HAL_UART_IRQHandler+0x680>)
 8002efc:	400a      	ands	r2, r1
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002f02:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f06:	f383 8810 	msr	PRIMASK, r3
}
 8002f0a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f0c:	f3ef 8310 	mrs	r3, PRIMASK
 8002f10:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8002f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f14:	677b      	str	r3, [r7, #116]	@ 0x74
 8002f16:	2301      	movs	r3, #1
 8002f18:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f1c:	f383 8810 	msr	PRIMASK, r3
}
 8002f20:	46c0      	nop			@ (mov r8, r8)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	438a      	bics	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]
 8002f32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f34:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f38:	f383 8810 	msr	PRIMASK, r3
}
 8002f3c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f3e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f42:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002f44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f46:	673b      	str	r3, [r7, #112]	@ 0x70
 8002f48:	2301      	movs	r3, #1
 8002f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002f4e:	f383 8810 	msr	PRIMASK, r3
}
 8002f52:	46c0      	nop			@ (mov r8, r8)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2140      	movs	r1, #64	@ 0x40
 8002f60:	438a      	bics	r2, r1
 8002f62:	609a      	str	r2, [r3, #8]
 8002f64:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002f66:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f6a:	f383 8810 	msr	PRIMASK, r3
}
 8002f6e:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	228c      	movs	r2, #140	@ 0x8c
 8002f74:	2120      	movs	r1, #32
 8002f76:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8002f82:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002f84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f86:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002f88:	2301      	movs	r3, #1
 8002f8a:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002f8e:	f383 8810 	msr	PRIMASK, r3
}
 8002f92:	46c0      	nop			@ (mov r8, r8)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	2110      	movs	r1, #16
 8002fa0:	438a      	bics	r2, r1
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002faa:	f383 8810 	msr	PRIMASK, r3
}
 8002fae:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2280      	movs	r2, #128	@ 0x80
 8002fb4:	589b      	ldr	r3, [r3, r2]
 8002fb6:	0018      	movs	r0, r3
 8002fb8:	f7fd fec4 	bl	8000d44 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	225c      	movs	r2, #92	@ 0x5c
 8002fc6:	5a9a      	ldrh	r2, [r3, r2]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	215e      	movs	r1, #94	@ 0x5e
 8002fcc:	5a5b      	ldrh	r3, [r3, r1]
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 f92d 	bl	8003238 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002fde:	e10c      	b.n	80031fa <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	225c      	movs	r2, #92	@ 0x5c
 8002fe4:	5a9b      	ldrh	r3, [r3, r2]
 8002fe6:	227e      	movs	r2, #126	@ 0x7e
 8002fe8:	18ba      	adds	r2, r7, r2
 8002fea:	8812      	ldrh	r2, [r2, #0]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d000      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x466>
 8002ff0:	e103      	b.n	80031fa <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2280      	movs	r2, #128	@ 0x80
 8002ff6:	589b      	ldr	r3, [r3, r2]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2220      	movs	r2, #32
 8002ffe:	4013      	ands	r3, r2
 8003000:	2b20      	cmp	r3, #32
 8003002:	d000      	beq.n	8003006 <HAL_UART_IRQHandler+0x47a>
 8003004:	e0f9      	b.n	80031fa <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2202      	movs	r2, #2
 800300a:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	225c      	movs	r2, #92	@ 0x5c
 8003010:	5a9a      	ldrh	r2, [r3, r2]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0011      	movs	r1, r2
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f90e 	bl	8003238 <HAL_UARTEx_RxEventCallback>
      return;
 800301c:	e0ed      	b.n	80031fa <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	225c      	movs	r2, #92	@ 0x5c
 8003022:	5a99      	ldrh	r1, [r3, r2]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	225e      	movs	r2, #94	@ 0x5e
 8003028:	5a9b      	ldrh	r3, [r3, r2]
 800302a:	b29a      	uxth	r2, r3
 800302c:	208e      	movs	r0, #142	@ 0x8e
 800302e:	183b      	adds	r3, r7, r0
 8003030:	1a8a      	subs	r2, r1, r2
 8003032:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	225e      	movs	r2, #94	@ 0x5e
 8003038:	5a9b      	ldrh	r3, [r3, r2]
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d100      	bne.n	8003042 <HAL_UART_IRQHandler+0x4b6>
 8003040:	e0dd      	b.n	80031fe <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8003042:	183b      	adds	r3, r7, r0
 8003044:	881b      	ldrh	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d100      	bne.n	800304c <HAL_UART_IRQHandler+0x4c0>
 800304a:	e0d8      	b.n	80031fe <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800304c:	f3ef 8310 	mrs	r3, PRIMASK
 8003050:	60fb      	str	r3, [r7, #12]
  return(result);
 8003052:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003054:	2488      	movs	r4, #136	@ 0x88
 8003056:	193a      	adds	r2, r7, r4
 8003058:	6013      	str	r3, [r2, #0]
 800305a:	2301      	movs	r3, #1
 800305c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f383 8810 	msr	PRIMASK, r3
}
 8003064:	46c0      	nop			@ (mov r8, r8)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681a      	ldr	r2, [r3, #0]
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4967      	ldr	r1, [pc, #412]	@ (8003210 <HAL_UART_IRQHandler+0x684>)
 8003072:	400a      	ands	r2, r1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	193b      	adds	r3, r7, r4
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	f383 8810 	msr	PRIMASK, r3
}
 8003082:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003084:	f3ef 8310 	mrs	r3, PRIMASK
 8003088:	61bb      	str	r3, [r7, #24]
  return(result);
 800308a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800308c:	2484      	movs	r4, #132	@ 0x84
 800308e:	193a      	adds	r2, r7, r4
 8003090:	6013      	str	r3, [r2, #0]
 8003092:	2301      	movs	r3, #1
 8003094:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	f383 8810 	msr	PRIMASK, r3
}
 800309c:	46c0      	nop			@ (mov r8, r8)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	495a      	ldr	r1, [pc, #360]	@ (8003214 <HAL_UART_IRQHandler+0x688>)
 80030aa:	400a      	ands	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
 80030ae:	193b      	adds	r3, r7, r4
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b4:	6a3b      	ldr	r3, [r7, #32]
 80030b6:	f383 8810 	msr	PRIMASK, r3
}
 80030ba:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	228c      	movs	r2, #140	@ 0x8c
 80030c0:	2120      	movs	r1, #32
 80030c2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2200      	movs	r2, #0
 80030ce:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030d0:	f3ef 8310 	mrs	r3, PRIMASK
 80030d4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80030d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	2480      	movs	r4, #128	@ 0x80
 80030da:	193a      	adds	r2, r7, r4
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	2301      	movs	r3, #1
 80030e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	f383 8810 	msr	PRIMASK, r3
}
 80030e8:	46c0      	nop			@ (mov r8, r8)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2110      	movs	r1, #16
 80030f6:	438a      	bics	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	193b      	adds	r3, r7, r4
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003100:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003102:	f383 8810 	msr	PRIMASK, r3
}
 8003106:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800310e:	183b      	adds	r3, r7, r0
 8003110:	881a      	ldrh	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	0011      	movs	r1, r2
 8003116:	0018      	movs	r0, r3
 8003118:	f000 f88e 	bl	8003238 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800311c:	e06f      	b.n	80031fe <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800311e:	23a4      	movs	r3, #164	@ 0xa4
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	2380      	movs	r3, #128	@ 0x80
 8003126:	035b      	lsls	r3, r3, #13
 8003128:	4013      	ands	r3, r2
 800312a:	d010      	beq.n	800314e <HAL_UART_IRQHandler+0x5c2>
 800312c:	239c      	movs	r3, #156	@ 0x9c
 800312e:	18fb      	adds	r3, r7, r3
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	2380      	movs	r3, #128	@ 0x80
 8003134:	03db      	lsls	r3, r3, #15
 8003136:	4013      	ands	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2280      	movs	r2, #128	@ 0x80
 8003140:	0352      	lsls	r2, r2, #13
 8003142:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	0018      	movs	r0, r3
 8003148:	f000 fc73 	bl	8003a32 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800314c:	e05a      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800314e:	23a4      	movs	r3, #164	@ 0xa4
 8003150:	18fb      	adds	r3, r7, r3
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2280      	movs	r2, #128	@ 0x80
 8003156:	4013      	ands	r3, r2
 8003158:	d016      	beq.n	8003188 <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800315a:	23a0      	movs	r3, #160	@ 0xa0
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2280      	movs	r2, #128	@ 0x80
 8003162:	4013      	ands	r3, r2
 8003164:	d106      	bne.n	8003174 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003166:	239c      	movs	r3, #156	@ 0x9c
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	2380      	movs	r3, #128	@ 0x80
 800316e:	041b      	lsls	r3, r3, #16
 8003170:	4013      	ands	r3, r2
 8003172:	d009      	beq.n	8003188 <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003178:	2b00      	cmp	r3, #0
 800317a:	d042      	beq.n	8003202 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003180:	687a      	ldr	r2, [r7, #4]
 8003182:	0010      	movs	r0, r2
 8003184:	4798      	blx	r3
    }
    return;
 8003186:	e03c      	b.n	8003202 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003188:	23a4      	movs	r3, #164	@ 0xa4
 800318a:	18fb      	adds	r3, r7, r3
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2240      	movs	r2, #64	@ 0x40
 8003190:	4013      	ands	r3, r2
 8003192:	d00a      	beq.n	80031aa <HAL_UART_IRQHandler+0x61e>
 8003194:	23a0      	movs	r3, #160	@ 0xa0
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2240      	movs	r2, #64	@ 0x40
 800319c:	4013      	ands	r3, r2
 800319e:	d004      	beq.n	80031aa <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f000 fc19 	bl	80039da <UART_EndTransmit_IT>
    return;
 80031a8:	e02c      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80031aa:	23a4      	movs	r3, #164	@ 0xa4
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	041b      	lsls	r3, r3, #16
 80031b4:	4013      	ands	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <HAL_UART_IRQHandler+0x644>
 80031b8:	23a0      	movs	r3, #160	@ 0xa0
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	05db      	lsls	r3, r3, #23
 80031c2:	4013      	ands	r3, r2
 80031c4:	d004      	beq.n	80031d0 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 fc42 	bl	8003a52 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031ce:	e019      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80031d0:	23a4      	movs	r3, #164	@ 0xa4
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	2380      	movs	r3, #128	@ 0x80
 80031d8:	045b      	lsls	r3, r3, #17
 80031da:	4013      	ands	r3, r2
 80031dc:	d012      	beq.n	8003204 <HAL_UART_IRQHandler+0x678>
 80031de:	23a0      	movs	r3, #160	@ 0xa0
 80031e0:	18fb      	adds	r3, r7, r3
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	da0d      	bge.n	8003204 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 fc29 	bl	8003a42 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031f0:	e008      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
      return;
 80031f2:	46c0      	nop			@ (mov r8, r8)
 80031f4:	e006      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
    return;
 80031f6:	46c0      	nop			@ (mov r8, r8)
 80031f8:	e004      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
      return;
 80031fa:	46c0      	nop			@ (mov r8, r8)
 80031fc:	e002      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
      return;
 80031fe:	46c0      	nop			@ (mov r8, r8)
 8003200:	e000      	b.n	8003204 <HAL_UART_IRQHandler+0x678>
    return;
 8003202:	46c0      	nop			@ (mov r8, r8)
  }
}
 8003204:	46bd      	mov	sp, r7
 8003206:	b02a      	add	sp, #168	@ 0xa8
 8003208:	bdb0      	pop	{r4, r5, r7, pc}
 800320a:	46c0      	nop			@ (mov r8, r8)
 800320c:	fffffeff 	.word	0xfffffeff
 8003210:	fffffedf 	.word	0xfffffedf
 8003214:	effffffe 	.word	0xeffffffe

08003218 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003220:	46c0      	nop			@ (mov r8, r8)
 8003222:	46bd      	mov	sp, r7
 8003224:	b002      	add	sp, #8
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003230:	46c0      	nop			@ (mov r8, r8)
 8003232:	46bd      	mov	sp, r7
 8003234:	b002      	add	sp, #8
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b082      	sub	sp, #8
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	000a      	movs	r2, r1
 8003242:	1cbb      	adds	r3, r7, #2
 8003244:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003246:	46c0      	nop			@ (mov r8, r8)
 8003248:	46bd      	mov	sp, r7
 800324a:	b002      	add	sp, #8
 800324c:	bd80      	pop	{r7, pc}
	...

08003250 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003258:	231e      	movs	r3, #30
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	2200      	movs	r2, #0
 800325e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689a      	ldr	r2, [r3, #8]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	431a      	orrs	r2, r3
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	695b      	ldr	r3, [r3, #20]
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	69db      	ldr	r3, [r3, #28]
 8003274:	4313      	orrs	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4aab      	ldr	r2, [pc, #684]	@ (800352c <UART_SetConfig+0x2dc>)
 8003280:	4013      	ands	r3, r2
 8003282:	0019      	movs	r1, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	430a      	orrs	r2, r1
 800328c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	4aa6      	ldr	r2, [pc, #664]	@ (8003530 <UART_SetConfig+0x2e0>)
 8003296:	4013      	ands	r3, r2
 8003298:	0019      	movs	r1, r3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	68da      	ldr	r2, [r3, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a9d      	ldr	r2, [pc, #628]	@ (8003534 <UART_SetConfig+0x2e4>)
 80032be:	4013      	ands	r3, r2
 80032c0:	0019      	movs	r1, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	430a      	orrs	r2, r1
 80032ca:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d2:	220f      	movs	r2, #15
 80032d4:	4393      	bics	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a93      	ldr	r2, [pc, #588]	@ (8003538 <UART_SetConfig+0x2e8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d127      	bne.n	800333e <UART_SetConfig+0xee>
 80032ee:	4b93      	ldr	r3, [pc, #588]	@ (800353c <UART_SetConfig+0x2ec>)
 80032f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032f2:	2203      	movs	r2, #3
 80032f4:	4013      	ands	r3, r2
 80032f6:	2b03      	cmp	r3, #3
 80032f8:	d017      	beq.n	800332a <UART_SetConfig+0xda>
 80032fa:	d81b      	bhi.n	8003334 <UART_SetConfig+0xe4>
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d00a      	beq.n	8003316 <UART_SetConfig+0xc6>
 8003300:	d818      	bhi.n	8003334 <UART_SetConfig+0xe4>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d002      	beq.n	800330c <UART_SetConfig+0xbc>
 8003306:	2b01      	cmp	r3, #1
 8003308:	d00a      	beq.n	8003320 <UART_SetConfig+0xd0>
 800330a:	e013      	b.n	8003334 <UART_SetConfig+0xe4>
 800330c:	231f      	movs	r3, #31
 800330e:	18fb      	adds	r3, r7, r3
 8003310:	2200      	movs	r2, #0
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e021      	b.n	800335a <UART_SetConfig+0x10a>
 8003316:	231f      	movs	r3, #31
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	2202      	movs	r2, #2
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e01c      	b.n	800335a <UART_SetConfig+0x10a>
 8003320:	231f      	movs	r3, #31
 8003322:	18fb      	adds	r3, r7, r3
 8003324:	2204      	movs	r2, #4
 8003326:	701a      	strb	r2, [r3, #0]
 8003328:	e017      	b.n	800335a <UART_SetConfig+0x10a>
 800332a:	231f      	movs	r3, #31
 800332c:	18fb      	adds	r3, r7, r3
 800332e:	2208      	movs	r2, #8
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	e012      	b.n	800335a <UART_SetConfig+0x10a>
 8003334:	231f      	movs	r3, #31
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	2210      	movs	r2, #16
 800333a:	701a      	strb	r2, [r3, #0]
 800333c:	e00d      	b.n	800335a <UART_SetConfig+0x10a>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a7f      	ldr	r2, [pc, #508]	@ (8003540 <UART_SetConfig+0x2f0>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d104      	bne.n	8003352 <UART_SetConfig+0x102>
 8003348:	231f      	movs	r3, #31
 800334a:	18fb      	adds	r3, r7, r3
 800334c:	2200      	movs	r2, #0
 800334e:	701a      	strb	r2, [r3, #0]
 8003350:	e003      	b.n	800335a <UART_SetConfig+0x10a>
 8003352:	231f      	movs	r3, #31
 8003354:	18fb      	adds	r3, r7, r3
 8003356:	2210      	movs	r2, #16
 8003358:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	2380      	movs	r3, #128	@ 0x80
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	429a      	cmp	r2, r3
 8003364:	d000      	beq.n	8003368 <UART_SetConfig+0x118>
 8003366:	e06f      	b.n	8003448 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8003368:	231f      	movs	r3, #31
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b08      	cmp	r3, #8
 8003370:	d01f      	beq.n	80033b2 <UART_SetConfig+0x162>
 8003372:	dc22      	bgt.n	80033ba <UART_SetConfig+0x16a>
 8003374:	2b04      	cmp	r3, #4
 8003376:	d017      	beq.n	80033a8 <UART_SetConfig+0x158>
 8003378:	dc1f      	bgt.n	80033ba <UART_SetConfig+0x16a>
 800337a:	2b00      	cmp	r3, #0
 800337c:	d002      	beq.n	8003384 <UART_SetConfig+0x134>
 800337e:	2b02      	cmp	r3, #2
 8003380:	d005      	beq.n	800338e <UART_SetConfig+0x13e>
 8003382:	e01a      	b.n	80033ba <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003384:	f7fe fa68 	bl	8001858 <HAL_RCC_GetPCLK1Freq>
 8003388:	0003      	movs	r3, r0
 800338a:	61bb      	str	r3, [r7, #24]
        break;
 800338c:	e01c      	b.n	80033c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800338e:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <UART_SetConfig+0x2ec>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	2207      	movs	r2, #7
 8003396:	4013      	ands	r3, r2
 8003398:	3301      	adds	r3, #1
 800339a:	0019      	movs	r1, r3
 800339c:	4869      	ldr	r0, [pc, #420]	@ (8003544 <UART_SetConfig+0x2f4>)
 800339e:	f7fc feb3 	bl	8000108 <__udivsi3>
 80033a2:	0003      	movs	r3, r0
 80033a4:	61bb      	str	r3, [r7, #24]
        break;
 80033a6:	e00f      	b.n	80033c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033a8:	f7fe f9f6 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 80033ac:	0003      	movs	r3, r0
 80033ae:	61bb      	str	r3, [r7, #24]
        break;
 80033b0:	e00a      	b.n	80033c8 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033b2:	2380      	movs	r3, #128	@ 0x80
 80033b4:	021b      	lsls	r3, r3, #8
 80033b6:	61bb      	str	r3, [r7, #24]
        break;
 80033b8:	e006      	b.n	80033c8 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033be:	231e      	movs	r3, #30
 80033c0:	18fb      	adds	r3, r7, r3
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
        break;
 80033c6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033c8:	69bb      	ldr	r3, [r7, #24]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d100      	bne.n	80033d0 <UART_SetConfig+0x180>
 80033ce:	e097      	b.n	8003500 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033d4:	4b5c      	ldr	r3, [pc, #368]	@ (8003548 <UART_SetConfig+0x2f8>)
 80033d6:	0052      	lsls	r2, r2, #1
 80033d8:	5ad3      	ldrh	r3, [r2, r3]
 80033da:	0019      	movs	r1, r3
 80033dc:	69b8      	ldr	r0, [r7, #24]
 80033de:	f7fc fe93 	bl	8000108 <__udivsi3>
 80033e2:	0003      	movs	r3, r0
 80033e4:	005a      	lsls	r2, r3, #1
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	18d2      	adds	r2, r2, r3
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	0019      	movs	r1, r3
 80033f4:	0010      	movs	r0, r2
 80033f6:	f7fc fe87 	bl	8000108 <__udivsi3>
 80033fa:	0003      	movs	r3, r0
 80033fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	2b0f      	cmp	r3, #15
 8003402:	d91c      	bls.n	800343e <UART_SetConfig+0x1ee>
 8003404:	693a      	ldr	r2, [r7, #16]
 8003406:	2380      	movs	r3, #128	@ 0x80
 8003408:	025b      	lsls	r3, r3, #9
 800340a:	429a      	cmp	r2, r3
 800340c:	d217      	bcs.n	800343e <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	b29a      	uxth	r2, r3
 8003412:	200e      	movs	r0, #14
 8003414:	183b      	adds	r3, r7, r0
 8003416:	210f      	movs	r1, #15
 8003418:	438a      	bics	r2, r1
 800341a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	085b      	lsrs	r3, r3, #1
 8003420:	b29b      	uxth	r3, r3
 8003422:	2207      	movs	r2, #7
 8003424:	4013      	ands	r3, r2
 8003426:	b299      	uxth	r1, r3
 8003428:	183b      	adds	r3, r7, r0
 800342a:	183a      	adds	r2, r7, r0
 800342c:	8812      	ldrh	r2, [r2, #0]
 800342e:	430a      	orrs	r2, r1
 8003430:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	183a      	adds	r2, r7, r0
 8003438:	8812      	ldrh	r2, [r2, #0]
 800343a:	60da      	str	r2, [r3, #12]
 800343c:	e060      	b.n	8003500 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800343e:	231e      	movs	r3, #30
 8003440:	18fb      	adds	r3, r7, r3
 8003442:	2201      	movs	r2, #1
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e05b      	b.n	8003500 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003448:	231f      	movs	r3, #31
 800344a:	18fb      	adds	r3, r7, r3
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b08      	cmp	r3, #8
 8003450:	d01f      	beq.n	8003492 <UART_SetConfig+0x242>
 8003452:	dc22      	bgt.n	800349a <UART_SetConfig+0x24a>
 8003454:	2b04      	cmp	r3, #4
 8003456:	d017      	beq.n	8003488 <UART_SetConfig+0x238>
 8003458:	dc1f      	bgt.n	800349a <UART_SetConfig+0x24a>
 800345a:	2b00      	cmp	r3, #0
 800345c:	d002      	beq.n	8003464 <UART_SetConfig+0x214>
 800345e:	2b02      	cmp	r3, #2
 8003460:	d005      	beq.n	800346e <UART_SetConfig+0x21e>
 8003462:	e01a      	b.n	800349a <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003464:	f7fe f9f8 	bl	8001858 <HAL_RCC_GetPCLK1Freq>
 8003468:	0003      	movs	r3, r0
 800346a:	61bb      	str	r3, [r7, #24]
        break;
 800346c:	e01c      	b.n	80034a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 800346e:	4b33      	ldr	r3, [pc, #204]	@ (800353c <UART_SetConfig+0x2ec>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	2207      	movs	r2, #7
 8003476:	4013      	ands	r3, r2
 8003478:	3301      	adds	r3, #1
 800347a:	0019      	movs	r1, r3
 800347c:	4831      	ldr	r0, [pc, #196]	@ (8003544 <UART_SetConfig+0x2f4>)
 800347e:	f7fc fe43 	bl	8000108 <__udivsi3>
 8003482:	0003      	movs	r3, r0
 8003484:	61bb      	str	r3, [r7, #24]
        break;
 8003486:	e00f      	b.n	80034a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003488:	f7fe f986 	bl	8001798 <HAL_RCC_GetSysClockFreq>
 800348c:	0003      	movs	r3, r0
 800348e:	61bb      	str	r3, [r7, #24]
        break;
 8003490:	e00a      	b.n	80034a8 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003492:	2380      	movs	r3, #128	@ 0x80
 8003494:	021b      	lsls	r3, r3, #8
 8003496:	61bb      	str	r3, [r7, #24]
        break;
 8003498:	e006      	b.n	80034a8 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800349e:	231e      	movs	r3, #30
 80034a0:	18fb      	adds	r3, r7, r3
 80034a2:	2201      	movs	r2, #1
 80034a4:	701a      	strb	r2, [r3, #0]
        break;
 80034a6:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80034a8:	69bb      	ldr	r3, [r7, #24]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d028      	beq.n	8003500 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80034b2:	4b25      	ldr	r3, [pc, #148]	@ (8003548 <UART_SetConfig+0x2f8>)
 80034b4:	0052      	lsls	r2, r2, #1
 80034b6:	5ad3      	ldrh	r3, [r2, r3]
 80034b8:	0019      	movs	r1, r3
 80034ba:	69b8      	ldr	r0, [r7, #24]
 80034bc:	f7fc fe24 	bl	8000108 <__udivsi3>
 80034c0:	0003      	movs	r3, r0
 80034c2:	001a      	movs	r2, r3
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	085b      	lsrs	r3, r3, #1
 80034ca:	18d2      	adds	r2, r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	0019      	movs	r1, r3
 80034d2:	0010      	movs	r0, r2
 80034d4:	f7fc fe18 	bl	8000108 <__udivsi3>
 80034d8:	0003      	movs	r3, r0
 80034da:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	2b0f      	cmp	r3, #15
 80034e0:	d90a      	bls.n	80034f8 <UART_SetConfig+0x2a8>
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	2380      	movs	r3, #128	@ 0x80
 80034e6:	025b      	lsls	r3, r3, #9
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d205      	bcs.n	80034f8 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	b29a      	uxth	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	e003      	b.n	8003500 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 80034f8:	231e      	movs	r3, #30
 80034fa:	18fb      	adds	r3, r7, r3
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	226a      	movs	r2, #106	@ 0x6a
 8003504:	2101      	movs	r1, #1
 8003506:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2268      	movs	r2, #104	@ 0x68
 800350c:	2101      	movs	r1, #1
 800350e:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2200      	movs	r2, #0
 8003514:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800351c:	231e      	movs	r3, #30
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	781b      	ldrb	r3, [r3, #0]
}
 8003522:	0018      	movs	r0, r3
 8003524:	46bd      	mov	sp, r7
 8003526:	b008      	add	sp, #32
 8003528:	bd80      	pop	{r7, pc}
 800352a:	46c0      	nop			@ (mov r8, r8)
 800352c:	cfff69f3 	.word	0xcfff69f3
 8003530:	ffffcfff 	.word	0xffffcfff
 8003534:	11fff4ff 	.word	0x11fff4ff
 8003538:	40013800 	.word	0x40013800
 800353c:	40021000 	.word	0x40021000
 8003540:	40004400 	.word	0x40004400
 8003544:	02dc6c00 	.word	0x02dc6c00
 8003548:	08003dbc 	.word	0x08003dbc

0800354c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003558:	2208      	movs	r2, #8
 800355a:	4013      	ands	r3, r2
 800355c:	d00b      	beq.n	8003576 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a4a      	ldr	r2, [pc, #296]	@ (8003690 <UART_AdvFeatureConfig+0x144>)
 8003566:	4013      	ands	r3, r2
 8003568:	0019      	movs	r1, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800357a:	2201      	movs	r2, #1
 800357c:	4013      	ands	r3, r2
 800357e:	d00b      	beq.n	8003598 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	4a43      	ldr	r2, [pc, #268]	@ (8003694 <UART_AdvFeatureConfig+0x148>)
 8003588:	4013      	ands	r3, r2
 800358a:	0019      	movs	r1, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	2202      	movs	r2, #2
 800359e:	4013      	ands	r3, r2
 80035a0:	d00b      	beq.n	80035ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	4a3b      	ldr	r2, [pc, #236]	@ (8003698 <UART_AdvFeatureConfig+0x14c>)
 80035aa:	4013      	ands	r3, r2
 80035ac:	0019      	movs	r1, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035be:	2204      	movs	r2, #4
 80035c0:	4013      	ands	r3, r2
 80035c2:	d00b      	beq.n	80035dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4a34      	ldr	r2, [pc, #208]	@ (800369c <UART_AdvFeatureConfig+0x150>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	0019      	movs	r1, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	430a      	orrs	r2, r1
 80035da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e0:	2210      	movs	r2, #16
 80035e2:	4013      	ands	r3, r2
 80035e4:	d00b      	beq.n	80035fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	4a2c      	ldr	r2, [pc, #176]	@ (80036a0 <UART_AdvFeatureConfig+0x154>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003602:	2220      	movs	r2, #32
 8003604:	4013      	ands	r3, r2
 8003606:	d00b      	beq.n	8003620 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	4a25      	ldr	r2, [pc, #148]	@ (80036a4 <UART_AdvFeatureConfig+0x158>)
 8003610:	4013      	ands	r3, r2
 8003612:	0019      	movs	r1, r3
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	430a      	orrs	r2, r1
 800361e:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003624:	2240      	movs	r2, #64	@ 0x40
 8003626:	4013      	ands	r3, r2
 8003628:	d01d      	beq.n	8003666 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4a1d      	ldr	r2, [pc, #116]	@ (80036a8 <UART_AdvFeatureConfig+0x15c>)
 8003632:	4013      	ands	r3, r2
 8003634:	0019      	movs	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	430a      	orrs	r2, r1
 8003640:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003646:	2380      	movs	r3, #128	@ 0x80
 8003648:	035b      	lsls	r3, r3, #13
 800364a:	429a      	cmp	r2, r3
 800364c:	d10b      	bne.n	8003666 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a15      	ldr	r2, [pc, #84]	@ (80036ac <UART_AdvFeatureConfig+0x160>)
 8003656:	4013      	ands	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800366a:	2280      	movs	r2, #128	@ 0x80
 800366c:	4013      	ands	r3, r2
 800366e:	d00b      	beq.n	8003688 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4a0e      	ldr	r2, [pc, #56]	@ (80036b0 <UART_AdvFeatureConfig+0x164>)
 8003678:	4013      	ands	r3, r2
 800367a:	0019      	movs	r1, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	430a      	orrs	r2, r1
 8003686:	605a      	str	r2, [r3, #4]
  }
}
 8003688:	46c0      	nop			@ (mov r8, r8)
 800368a:	46bd      	mov	sp, r7
 800368c:	b002      	add	sp, #8
 800368e:	bd80      	pop	{r7, pc}
 8003690:	ffff7fff 	.word	0xffff7fff
 8003694:	fffdffff 	.word	0xfffdffff
 8003698:	fffeffff 	.word	0xfffeffff
 800369c:	fffbffff 	.word	0xfffbffff
 80036a0:	ffffefff 	.word	0xffffefff
 80036a4:	ffffdfff 	.word	0xffffdfff
 80036a8:	ffefffff 	.word	0xffefffff
 80036ac:	ff9fffff 	.word	0xff9fffff
 80036b0:	fff7ffff 	.word	0xfff7ffff

080036b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b092      	sub	sp, #72	@ 0x48
 80036b8:	af02      	add	r7, sp, #8
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2290      	movs	r2, #144	@ 0x90
 80036c0:	2100      	movs	r1, #0
 80036c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036c4:	f7fd fa56 	bl	8000b74 <HAL_GetTick>
 80036c8:	0003      	movs	r3, r0
 80036ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2208      	movs	r2, #8
 80036d4:	4013      	ands	r3, r2
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d12d      	bne.n	8003736 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036dc:	2280      	movs	r2, #128	@ 0x80
 80036de:	0391      	lsls	r1, r2, #14
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	4a47      	ldr	r2, [pc, #284]	@ (8003800 <UART_CheckIdleState+0x14c>)
 80036e4:	9200      	str	r2, [sp, #0]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f000 f88e 	bl	8003808 <UART_WaitOnFlagUntilTimeout>
 80036ec:	1e03      	subs	r3, r0, #0
 80036ee:	d022      	beq.n	8003736 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036f0:	f3ef 8310 	mrs	r3, PRIMASK
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80036f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80036f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036fa:	2301      	movs	r3, #1
 80036fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003700:	f383 8810 	msr	PRIMASK, r3
}
 8003704:	46c0      	nop			@ (mov r8, r8)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2180      	movs	r1, #128	@ 0x80
 8003712:	438a      	bics	r2, r1
 8003714:	601a      	str	r2, [r3, #0]
 8003716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371c:	f383 8810 	msr	PRIMASK, r3
}
 8003720:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2288      	movs	r2, #136	@ 0x88
 8003726:	2120      	movs	r1, #32
 8003728:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2284      	movs	r2, #132	@ 0x84
 800372e:	2100      	movs	r1, #0
 8003730:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e060      	b.n	80037f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2204      	movs	r2, #4
 800373e:	4013      	ands	r3, r2
 8003740:	2b04      	cmp	r3, #4
 8003742:	d146      	bne.n	80037d2 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003744:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003746:	2280      	movs	r2, #128	@ 0x80
 8003748:	03d1      	lsls	r1, r2, #15
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	4a2c      	ldr	r2, [pc, #176]	@ (8003800 <UART_CheckIdleState+0x14c>)
 800374e:	9200      	str	r2, [sp, #0]
 8003750:	2200      	movs	r2, #0
 8003752:	f000 f859 	bl	8003808 <UART_WaitOnFlagUntilTimeout>
 8003756:	1e03      	subs	r3, r0, #0
 8003758:	d03b      	beq.n	80037d2 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800375a:	f3ef 8310 	mrs	r3, PRIMASK
 800375e:	60fb      	str	r3, [r7, #12]
  return(result);
 8003760:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003762:	637b      	str	r3, [r7, #52]	@ 0x34
 8003764:	2301      	movs	r3, #1
 8003766:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f383 8810 	msr	PRIMASK, r3
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681a      	ldr	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4922      	ldr	r1, [pc, #136]	@ (8003804 <UART_CheckIdleState+0x150>)
 800377c:	400a      	ands	r2, r1
 800377e:	601a      	str	r2, [r3, #0]
 8003780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003782:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f383 8810 	msr	PRIMASK, r3
}
 800378a:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800378c:	f3ef 8310 	mrs	r3, PRIMASK
 8003790:	61bb      	str	r3, [r7, #24]
  return(result);
 8003792:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003794:	633b      	str	r3, [r7, #48]	@ 0x30
 8003796:	2301      	movs	r3, #1
 8003798:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	f383 8810 	msr	PRIMASK, r3
}
 80037a0:	46c0      	nop			@ (mov r8, r8)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2101      	movs	r1, #1
 80037ae:	438a      	bics	r2, r1
 80037b0:	609a      	str	r2, [r3, #8]
 80037b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037b4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b6:	6a3b      	ldr	r3, [r7, #32]
 80037b8:	f383 8810 	msr	PRIMASK, r3
}
 80037bc:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	228c      	movs	r2, #140	@ 0x8c
 80037c2:	2120      	movs	r1, #32
 80037c4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2284      	movs	r2, #132	@ 0x84
 80037ca:	2100      	movs	r1, #0
 80037cc:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e012      	b.n	80037f8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2288      	movs	r2, #136	@ 0x88
 80037d6:	2120      	movs	r1, #32
 80037d8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	228c      	movs	r2, #140	@ 0x8c
 80037de:	2120      	movs	r1, #32
 80037e0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2284      	movs	r2, #132	@ 0x84
 80037f2:	2100      	movs	r1, #0
 80037f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037f6:	2300      	movs	r3, #0
}
 80037f8:	0018      	movs	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	b010      	add	sp, #64	@ 0x40
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	01ffffff 	.word	0x01ffffff
 8003804:	fffffedf 	.word	0xfffffedf

08003808 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	603b      	str	r3, [r7, #0]
 8003814:	1dfb      	adds	r3, r7, #7
 8003816:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003818:	e051      	b.n	80038be <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800381a:	69bb      	ldr	r3, [r7, #24]
 800381c:	3301      	adds	r3, #1
 800381e:	d04e      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003820:	f7fd f9a8 	bl	8000b74 <HAL_GetTick>
 8003824:	0002      	movs	r2, r0
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	69ba      	ldr	r2, [r7, #24]
 800382c:	429a      	cmp	r2, r3
 800382e:	d302      	bcc.n	8003836 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d101      	bne.n	800383a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e051      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2204      	movs	r2, #4
 8003842:	4013      	ands	r3, r2
 8003844:	d03b      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0xb6>
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2b80      	cmp	r3, #128	@ 0x80
 800384a:	d038      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0xb6>
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b40      	cmp	r3, #64	@ 0x40
 8003850:	d035      	beq.n	80038be <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	69db      	ldr	r3, [r3, #28]
 8003858:	2208      	movs	r2, #8
 800385a:	4013      	ands	r3, r2
 800385c:	2b08      	cmp	r3, #8
 800385e:	d111      	bne.n	8003884 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2208      	movs	r2, #8
 8003866:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	0018      	movs	r0, r3
 800386c:	f000 f83c 	bl	80038e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	2290      	movs	r2, #144	@ 0x90
 8003874:	2108      	movs	r1, #8
 8003876:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2284      	movs	r2, #132	@ 0x84
 800387c:	2100      	movs	r1, #0
 800387e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e02c      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	69da      	ldr	r2, [r3, #28]
 800388a:	2380      	movs	r3, #128	@ 0x80
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	401a      	ands	r2, r3
 8003890:	2380      	movs	r3, #128	@ 0x80
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	429a      	cmp	r2, r3
 8003896:	d112      	bne.n	80038be <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2280      	movs	r2, #128	@ 0x80
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	0018      	movs	r0, r3
 80038a6:	f000 f81f 	bl	80038e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2290      	movs	r2, #144	@ 0x90
 80038ae:	2120      	movs	r1, #32
 80038b0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2284      	movs	r2, #132	@ 0x84
 80038b6:	2100      	movs	r1, #0
 80038b8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80038ba:	2303      	movs	r3, #3
 80038bc:	e00f      	b.n	80038de <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	68ba      	ldr	r2, [r7, #8]
 80038c6:	4013      	ands	r3, r2
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	425a      	negs	r2, r3
 80038ce:	4153      	adcs	r3, r2
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	001a      	movs	r2, r3
 80038d4:	1dfb      	adds	r3, r7, #7
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d09e      	beq.n	800381a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038dc:	2300      	movs	r3, #0
}
 80038de:	0018      	movs	r0, r3
 80038e0:	46bd      	mov	sp, r7
 80038e2:	b004      	add	sp, #16
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b08e      	sub	sp, #56	@ 0x38
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80038f0:	f3ef 8310 	mrs	r3, PRIMASK
 80038f4:	617b      	str	r3, [r7, #20]
  return(result);
 80038f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80038fa:	2301      	movs	r3, #1
 80038fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fe:	69bb      	ldr	r3, [r7, #24]
 8003900:	f383 8810 	msr	PRIMASK, r3
}
 8003904:	46c0      	nop			@ (mov r8, r8)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4926      	ldr	r1, [pc, #152]	@ (80039ac <UART_EndRxTransfer+0xc4>)
 8003912:	400a      	ands	r2, r1
 8003914:	601a      	str	r2, [r3, #0]
 8003916:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003918:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	f383 8810 	msr	PRIMASK, r3
}
 8003920:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003922:	f3ef 8310 	mrs	r3, PRIMASK
 8003926:	623b      	str	r3, [r7, #32]
  return(result);
 8003928:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800392a:	633b      	str	r3, [r7, #48]	@ 0x30
 800392c:	2301      	movs	r3, #1
 800392e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003932:	f383 8810 	msr	PRIMASK, r3
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	491b      	ldr	r1, [pc, #108]	@ (80039b0 <UART_EndRxTransfer+0xc8>)
 8003944:	400a      	ands	r2, r1
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800394a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394e:	f383 8810 	msr	PRIMASK, r3
}
 8003952:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003958:	2b01      	cmp	r3, #1
 800395a:	d118      	bne.n	800398e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800395c:	f3ef 8310 	mrs	r3, PRIMASK
 8003960:	60bb      	str	r3, [r7, #8]
  return(result);
 8003962:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003964:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003966:	2301      	movs	r3, #1
 8003968:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f383 8810 	msr	PRIMASK, r3
}
 8003970:	46c0      	nop			@ (mov r8, r8)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2110      	movs	r1, #16
 800397e:	438a      	bics	r2, r1
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003984:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	f383 8810 	msr	PRIMASK, r3
}
 800398c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	228c      	movs	r2, #140	@ 0x8c
 8003992:	2120      	movs	r1, #32
 8003994:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80039a2:	46c0      	nop			@ (mov r8, r8)
 80039a4:	46bd      	mov	sp, r7
 80039a6:	b00e      	add	sp, #56	@ 0x38
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	fffffedf 	.word	0xfffffedf
 80039b0:	effffffe 	.word	0xeffffffe

080039b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	225e      	movs	r2, #94	@ 0x5e
 80039c6:	2100      	movs	r1, #0
 80039c8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0018      	movs	r0, r3
 80039ce:	f7ff fc2b 	bl	8003228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	46bd      	mov	sp, r7
 80039d6:	b004      	add	sp, #16
 80039d8:	bd80      	pop	{r7, pc}

080039da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	b086      	sub	sp, #24
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80039e2:	f3ef 8310 	mrs	r3, PRIMASK
 80039e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80039e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	2301      	movs	r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f383 8810 	msr	PRIMASK, r3
}
 80039f6:	46c0      	nop			@ (mov r8, r8)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2140      	movs	r1, #64	@ 0x40
 8003a04:	438a      	bics	r2, r1
 8003a06:	601a      	str	r2, [r3, #0]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f383 8810 	msr	PRIMASK, r3
}
 8003a12:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2288      	movs	r2, #136	@ 0x88
 8003a18:	2120      	movs	r1, #32
 8003a1a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7ff fbf7 	bl	8003218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2a:	46c0      	nop			@ (mov r8, r8)
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	b006      	add	sp, #24
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b082      	sub	sp, #8
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3a:	46c0      	nop			@ (mov r8, r8)
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	b002      	add	sp, #8
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b082      	sub	sp, #8
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4a:	46c0      	nop			@ (mov r8, r8)
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	b002      	add	sp, #8
 8003a50:	bd80      	pop	{r7, pc}

08003a52 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a52:	b580      	push	{r7, lr}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a5a:	46c0      	nop			@ (mov r8, r8)
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b002      	add	sp, #8
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2284      	movs	r2, #132	@ 0x84
 8003a70:	5c9b      	ldrb	r3, [r3, r2]
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d101      	bne.n	8003a7a <HAL_UARTEx_DisableFifoMode+0x16>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e027      	b.n	8003aca <HAL_UARTEx_DisableFifoMode+0x66>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2284      	movs	r2, #132	@ 0x84
 8003a7e:	2101      	movs	r1, #1
 8003a80:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2288      	movs	r2, #136	@ 0x88
 8003a86:	2124      	movs	r1, #36	@ 0x24
 8003a88:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	438a      	bics	r2, r1
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	4a0b      	ldr	r2, [pc, #44]	@ (8003ad4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2288      	movs	r2, #136	@ 0x88
 8003abc:	2120      	movs	r1, #32
 8003abe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2284      	movs	r2, #132	@ 0x84
 8003ac4:	2100      	movs	r1, #0
 8003ac6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	0018      	movs	r0, r3
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b004      	add	sp, #16
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	46c0      	nop			@ (mov r8, r8)
 8003ad4:	dfffffff 	.word	0xdfffffff

08003ad8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2284      	movs	r2, #132	@ 0x84
 8003ae6:	5c9b      	ldrb	r3, [r3, r2]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003aec:	2302      	movs	r3, #2
 8003aee:	e02e      	b.n	8003b4e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2284      	movs	r2, #132	@ 0x84
 8003af4:	2101      	movs	r1, #1
 8003af6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2288      	movs	r2, #136	@ 0x88
 8003afc:	2124      	movs	r1, #36	@ 0x24
 8003afe:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	2101      	movs	r1, #1
 8003b14:	438a      	bics	r2, r1
 8003b16:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	00db      	lsls	r3, r3, #3
 8003b20:	08d9      	lsrs	r1, r3, #3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	683a      	ldr	r2, [r7, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0018      	movs	r0, r3
 8003b30:	f000 f854 	bl	8003bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2288      	movs	r2, #136	@ 0x88
 8003b40:	2120      	movs	r1, #32
 8003b42:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2284      	movs	r2, #132	@ 0x84
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	0018      	movs	r0, r3
 8003b50:	46bd      	mov	sp, r7
 8003b52:	b004      	add	sp, #16
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2284      	movs	r2, #132	@ 0x84
 8003b66:	5c9b      	ldrb	r3, [r3, r2]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d101      	bne.n	8003b70 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	e02f      	b.n	8003bd0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2284      	movs	r2, #132	@ 0x84
 8003b74:	2101      	movs	r1, #1
 8003b76:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2288      	movs	r2, #136	@ 0x88
 8003b7c:	2124      	movs	r1, #36	@ 0x24
 8003b7e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681a      	ldr	r2, [r3, #0]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2101      	movs	r1, #1
 8003b94:	438a      	bics	r2, r1
 8003b96:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	4a0e      	ldr	r2, [pc, #56]	@ (8003bd8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	0019      	movs	r1, r3
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	683a      	ldr	r2, [r7, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f000 f813 	bl	8003bdc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2288      	movs	r2, #136	@ 0x88
 8003bc2:	2120      	movs	r1, #32
 8003bc4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2284      	movs	r2, #132	@ 0x84
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	f1ffffff 	.word	0xf1ffffff

08003bdc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	226a      	movs	r2, #106	@ 0x6a
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2268      	movs	r2, #104	@ 0x68
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003bfc:	e043      	b.n	8003c86 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003bfe:	260f      	movs	r6, #15
 8003c00:	19bb      	adds	r3, r7, r6
 8003c02:	2208      	movs	r2, #8
 8003c04:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c06:	200e      	movs	r0, #14
 8003c08:	183b      	adds	r3, r7, r0
 8003c0a:	2208      	movs	r2, #8
 8003c0c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	0e5b      	lsrs	r3, r3, #25
 8003c16:	b2da      	uxtb	r2, r3
 8003c18:	240d      	movs	r4, #13
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	2107      	movs	r1, #7
 8003c1e:	400a      	ands	r2, r1
 8003c20:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	0f5b      	lsrs	r3, r3, #29
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	250c      	movs	r5, #12
 8003c2e:	197b      	adds	r3, r7, r5
 8003c30:	2107      	movs	r1, #7
 8003c32:	400a      	ands	r2, r1
 8003c34:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c36:	183b      	adds	r3, r7, r0
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	197a      	adds	r2, r7, r5
 8003c3c:	7812      	ldrb	r2, [r2, #0]
 8003c3e:	4914      	ldr	r1, [pc, #80]	@ (8003c90 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c40:	5c8a      	ldrb	r2, [r1, r2]
 8003c42:	435a      	muls	r2, r3
 8003c44:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	4a12      	ldr	r2, [pc, #72]	@ (8003c94 <UARTEx_SetNbDataToProcess+0xb8>)
 8003c4c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c4e:	0019      	movs	r1, r3
 8003c50:	f7fc fae4 	bl	800021c <__divsi3>
 8003c54:	0003      	movs	r3, r0
 8003c56:	b299      	uxth	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	226a      	movs	r2, #106	@ 0x6a
 8003c5c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c5e:	19bb      	adds	r3, r7, r6
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	193a      	adds	r2, r7, r4
 8003c64:	7812      	ldrb	r2, [r2, #0]
 8003c66:	490a      	ldr	r1, [pc, #40]	@ (8003c90 <UARTEx_SetNbDataToProcess+0xb4>)
 8003c68:	5c8a      	ldrb	r2, [r1, r2]
 8003c6a:	435a      	muls	r2, r3
 8003c6c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c6e:	193b      	adds	r3, r7, r4
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	4a08      	ldr	r2, [pc, #32]	@ (8003c94 <UARTEx_SetNbDataToProcess+0xb8>)
 8003c74:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c76:	0019      	movs	r1, r3
 8003c78:	f7fc fad0 	bl	800021c <__divsi3>
 8003c7c:	0003      	movs	r3, r0
 8003c7e:	b299      	uxth	r1, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2268      	movs	r2, #104	@ 0x68
 8003c84:	5299      	strh	r1, [r3, r2]
}
 8003c86:	46c0      	nop			@ (mov r8, r8)
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	b005      	add	sp, #20
 8003c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c8e:	46c0      	nop			@ (mov r8, r8)
 8003c90:	08003dd4 	.word	0x08003dd4
 8003c94:	08003ddc 	.word	0x08003ddc

08003c98 <memset>:
 8003c98:	0003      	movs	r3, r0
 8003c9a:	1882      	adds	r2, r0, r2
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d100      	bne.n	8003ca2 <memset+0xa>
 8003ca0:	4770      	bx	lr
 8003ca2:	7019      	strb	r1, [r3, #0]
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	e7f9      	b.n	8003c9c <memset+0x4>

08003ca8 <__libc_init_array>:
 8003ca8:	b570      	push	{r4, r5, r6, lr}
 8003caa:	2600      	movs	r6, #0
 8003cac:	4c0c      	ldr	r4, [pc, #48]	@ (8003ce0 <__libc_init_array+0x38>)
 8003cae:	4d0d      	ldr	r5, [pc, #52]	@ (8003ce4 <__libc_init_array+0x3c>)
 8003cb0:	1b64      	subs	r4, r4, r5
 8003cb2:	10a4      	asrs	r4, r4, #2
 8003cb4:	42a6      	cmp	r6, r4
 8003cb6:	d109      	bne.n	8003ccc <__libc_init_array+0x24>
 8003cb8:	2600      	movs	r6, #0
 8003cba:	f000 f819 	bl	8003cf0 <_init>
 8003cbe:	4c0a      	ldr	r4, [pc, #40]	@ (8003ce8 <__libc_init_array+0x40>)
 8003cc0:	4d0a      	ldr	r5, [pc, #40]	@ (8003cec <__libc_init_array+0x44>)
 8003cc2:	1b64      	subs	r4, r4, r5
 8003cc4:	10a4      	asrs	r4, r4, #2
 8003cc6:	42a6      	cmp	r6, r4
 8003cc8:	d105      	bne.n	8003cd6 <__libc_init_array+0x2e>
 8003cca:	bd70      	pop	{r4, r5, r6, pc}
 8003ccc:	00b3      	lsls	r3, r6, #2
 8003cce:	58eb      	ldr	r3, [r5, r3]
 8003cd0:	4798      	blx	r3
 8003cd2:	3601      	adds	r6, #1
 8003cd4:	e7ee      	b.n	8003cb4 <__libc_init_array+0xc>
 8003cd6:	00b3      	lsls	r3, r6, #2
 8003cd8:	58eb      	ldr	r3, [r5, r3]
 8003cda:	4798      	blx	r3
 8003cdc:	3601      	adds	r6, #1
 8003cde:	e7f2      	b.n	8003cc6 <__libc_init_array+0x1e>
 8003ce0:	08003de4 	.word	0x08003de4
 8003ce4:	08003de4 	.word	0x08003de4
 8003ce8:	08003de8 	.word	0x08003de8
 8003cec:	08003de4 	.word	0x08003de4

08003cf0 <_init>:
 8003cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cf2:	46c0      	nop			@ (mov r8, r8)
 8003cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cf6:	bc08      	pop	{r3}
 8003cf8:	469e      	mov	lr, r3
 8003cfa:	4770      	bx	lr

08003cfc <_fini>:
 8003cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d02:	bc08      	pop	{r3}
 8003d04:	469e      	mov	lr, r3
 8003d06:	4770      	bx	lr
