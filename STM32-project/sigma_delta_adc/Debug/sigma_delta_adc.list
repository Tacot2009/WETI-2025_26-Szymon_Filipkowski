
sigma_delta_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000396c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003a2c  08003a2c  00004a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ab4  08003ab4  00005010  2**0
                  CONTENTS
  4 .ARM          00000000  08003ab4  08003ab4  00005010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ab4  08003ab4  00005010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab4  08003ab4  00004ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ab8  08003ab8  00004ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08003abc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  08003acc  00005010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08003acc  00005168  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00005010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbcb  00000000  00000000  00005038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000211d  00000000  00000000  00014c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d88  00000000  00000000  00016d20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab1  00000000  00000000  00017aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001306c  00000000  00000000  00018559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010599  00000000  00000000  0002b5c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007a7ed  00000000  00000000  0003bb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b634b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003120  00000000  00000000  000b6390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000b94b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003a14 	.word	0x08003a14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08003a14 	.word	0x08003a14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003f8:	f000 fb71 	bl	8000ade <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003fc:	f000 f810 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000400:	f000 f928 	bl	8000654 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000404:	f000 f8d8 	bl	80005b8 <MX_USART1_UART_Init>
  MX_TIM17_Init();
 8000408:	f000 f8ae 	bl	8000568 <MX_TIM17_Init>
  MX_TIM3_Init();
 800040c:	f000 f856 	bl	80004bc <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim17);
 8000410:	4b02      	ldr	r3, [pc, #8]	@ (800041c <main+0x28>)
 8000412:	0018      	movs	r0, r3
 8000414:	f001 fbc2 	bl	8001b9c <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000418:	46c0      	nop			@ (mov r8, r8)
 800041a:	e7fd      	b.n	8000418 <main+0x24>
 800041c:	20000078 	.word	0x20000078

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b590      	push	{r4, r7, lr}
 8000422:	b08d      	sub	sp, #52	@ 0x34
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	2414      	movs	r4, #20
 8000428:	193b      	adds	r3, r7, r4
 800042a:	0018      	movs	r0, r3
 800042c:	231c      	movs	r3, #28
 800042e:	001a      	movs	r2, r3
 8000430:	2100      	movs	r1, #0
 8000432:	f003 fac3 	bl	80039bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000436:	003b      	movs	r3, r7
 8000438:	0018      	movs	r0, r3
 800043a:	2314      	movs	r3, #20
 800043c:	001a      	movs	r2, r3
 800043e:	2100      	movs	r1, #0
 8000440:	f003 fabc 	bl	80039bc <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000444:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <SystemClock_Config+0x98>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	2207      	movs	r2, #7
 800044a:	4393      	bics	r3, r2
 800044c:	001a      	movs	r2, r3
 800044e:	4b1a      	ldr	r3, [pc, #104]	@ (80004b8 <SystemClock_Config+0x98>)
 8000450:	2101      	movs	r1, #1
 8000452:	430a      	orrs	r2, r1
 8000454:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000456:	193b      	adds	r3, r7, r4
 8000458:	2202      	movs	r2, #2
 800045a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800045c:	193b      	adds	r3, r7, r4
 800045e:	2280      	movs	r2, #128	@ 0x80
 8000460:	0052      	lsls	r2, r2, #1
 8000462:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000464:	193b      	adds	r3, r7, r4
 8000466:	2200      	movs	r2, #0
 8000468:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046a:	193b      	adds	r3, r7, r4
 800046c:	2240      	movs	r2, #64	@ 0x40
 800046e:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000470:	193b      	adds	r3, r7, r4
 8000472:	0018      	movs	r0, r3
 8000474:	f000 fef2 	bl	800125c <HAL_RCC_OscConfig>
 8000478:	1e03      	subs	r3, r0, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x60>
  {
    Error_Handler();
 800047c:	f000 f9e2 	bl	8000844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000480:	003b      	movs	r3, r7
 8000482:	2207      	movs	r2, #7
 8000484:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000486:	003b      	movs	r3, r7
 8000488:	2200      	movs	r2, #0
 800048a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800048c:	003b      	movs	r3, r7
 800048e:	2200      	movs	r2, #0
 8000490:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000492:	003b      	movs	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000498:	003b      	movs	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800049e:	003b      	movs	r3, r7
 80004a0:	2101      	movs	r1, #1
 80004a2:	0018      	movs	r0, r3
 80004a4:	f001 f8be 	bl	8001624 <HAL_RCC_ClockConfig>
 80004a8:	1e03      	subs	r3, r0, #0
 80004aa:	d001      	beq.n	80004b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80004ac:	f000 f9ca 	bl	8000844 <Error_Handler>
  }
}
 80004b0:	46c0      	nop			@ (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b00d      	add	sp, #52	@ 0x34
 80004b6:	bd90      	pop	{r4, r7, pc}
 80004b8:	40022000 	.word	0x40022000

080004bc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b088      	sub	sp, #32
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004c2:	2310      	movs	r3, #16
 80004c4:	18fb      	adds	r3, r7, r3
 80004c6:	0018      	movs	r0, r3
 80004c8:	2310      	movs	r3, #16
 80004ca:	001a      	movs	r2, r3
 80004cc:	2100      	movs	r1, #0
 80004ce:	f003 fa75 	bl	80039bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004d2:	1d3b      	adds	r3, r7, #4
 80004d4:	0018      	movs	r0, r3
 80004d6:	230c      	movs	r3, #12
 80004d8:	001a      	movs	r2, r3
 80004da:	2100      	movs	r1, #0
 80004dc:	f003 fa6e 	bl	80039bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80004e0:	4b1e      	ldr	r3, [pc, #120]	@ (800055c <MX_TIM3_Init+0xa0>)
 80004e2:	4a1f      	ldr	r2, [pc, #124]	@ (8000560 <MX_TIM3_Init+0xa4>)
 80004e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 46875;
 80004e6:	4b1d      	ldr	r3, [pc, #116]	@ (800055c <MX_TIM3_Init+0xa0>)
 80004e8:	4a1e      	ldr	r2, [pc, #120]	@ (8000564 <MX_TIM3_Init+0xa8>)
 80004ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004ec:	4b1b      	ldr	r3, [pc, #108]	@ (800055c <MX_TIM3_Init+0xa0>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1024;
 80004f2:	4b1a      	ldr	r3, [pc, #104]	@ (800055c <MX_TIM3_Init+0xa0>)
 80004f4:	2280      	movs	r2, #128	@ 0x80
 80004f6:	00d2      	lsls	r2, r2, #3
 80004f8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004fa:	4b18      	ldr	r3, [pc, #96]	@ (800055c <MX_TIM3_Init+0xa0>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000500:	4b16      	ldr	r3, [pc, #88]	@ (800055c <MX_TIM3_Init+0xa0>)
 8000502:	2200      	movs	r2, #0
 8000504:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000506:	4b15      	ldr	r3, [pc, #84]	@ (800055c <MX_TIM3_Init+0xa0>)
 8000508:	0018      	movs	r0, r3
 800050a:	f001 faef 	bl	8001aec <HAL_TIM_Base_Init>
 800050e:	1e03      	subs	r3, r0, #0
 8000510:	d001      	beq.n	8000516 <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000512:	f000 f997 	bl	8000844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000516:	2110      	movs	r1, #16
 8000518:	187b      	adds	r3, r7, r1
 800051a:	2280      	movs	r2, #128	@ 0x80
 800051c:	0152      	lsls	r2, r2, #5
 800051e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000520:	187a      	adds	r2, r7, r1
 8000522:	4b0e      	ldr	r3, [pc, #56]	@ (800055c <MX_TIM3_Init+0xa0>)
 8000524:	0011      	movs	r1, r2
 8000526:	0018      	movs	r0, r3
 8000528:	f001 fc8e 	bl	8001e48 <HAL_TIM_ConfigClockSource>
 800052c:	1e03      	subs	r3, r0, #0
 800052e:	d001      	beq.n	8000534 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000530:	f000 f988 	bl	8000844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	2200      	movs	r2, #0
 8000538:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2200      	movs	r2, #0
 800053e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000540:	1d3a      	adds	r2, r7, #4
 8000542:	4b06      	ldr	r3, [pc, #24]	@ (800055c <MX_TIM3_Init+0xa0>)
 8000544:	0011      	movs	r1, r2
 8000546:	0018      	movs	r0, r3
 8000548:	f001 fe8a 	bl	8002260 <HAL_TIMEx_MasterConfigSynchronization>
 800054c:	1e03      	subs	r3, r0, #0
 800054e:	d001      	beq.n	8000554 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000550:	f000 f978 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000554:	46c0      	nop			@ (mov r8, r8)
 8000556:	46bd      	mov	sp, r7
 8000558:	b008      	add	sp, #32
 800055a:	bd80      	pop	{r7, pc}
 800055c:	2000002c 	.word	0x2000002c
 8000560:	40000400 	.word	0x40000400
 8000564:	0000b71b 	.word	0x0000b71b

08000568 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800056c:	4b0f      	ldr	r3, [pc, #60]	@ (80005ac <MX_TIM17_Init+0x44>)
 800056e:	4a10      	ldr	r2, [pc, #64]	@ (80005b0 <MX_TIM17_Init+0x48>)
 8000570:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 46875-1;
 8000572:	4b0e      	ldr	r3, [pc, #56]	@ (80005ac <MX_TIM17_Init+0x44>)
 8000574:	4a0f      	ldr	r2, [pc, #60]	@ (80005b4 <MX_TIM17_Init+0x4c>)
 8000576:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b0c      	ldr	r3, [pc, #48]	@ (80005ac <MX_TIM17_Init+0x44>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 2-1;
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <MX_TIM17_Init+0x44>)
 8000580:	2201      	movs	r2, #1
 8000582:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000584:	4b09      	ldr	r3, [pc, #36]	@ (80005ac <MX_TIM17_Init+0x44>)
 8000586:	2200      	movs	r2, #0
 8000588:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800058a:	4b08      	ldr	r3, [pc, #32]	@ (80005ac <MX_TIM17_Init+0x44>)
 800058c:	2200      	movs	r2, #0
 800058e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000590:	4b06      	ldr	r3, [pc, #24]	@ (80005ac <MX_TIM17_Init+0x44>)
 8000592:	2200      	movs	r2, #0
 8000594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <MX_TIM17_Init+0x44>)
 8000598:	0018      	movs	r0, r3
 800059a:	f001 faa7 	bl	8001aec <HAL_TIM_Base_Init>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <MX_TIM17_Init+0x3e>
  {
    Error_Handler();
 80005a2:	f000 f94f 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	20000078 	.word	0x20000078
 80005b0:	40014800 	.word	0x40014800
 80005b4:	0000b71a 	.word	0x0000b71a

080005b8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005bc:	4b23      	ldr	r3, [pc, #140]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005be:	4a24      	ldr	r2, [pc, #144]	@ (8000650 <MX_USART1_UART_Init+0x98>)
 80005c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005c2:	4b22      	ldr	r3, [pc, #136]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005c4:	22e1      	movs	r2, #225	@ 0xe1
 80005c6:	0252      	lsls	r2, r2, #9
 80005c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005ca:	4b20      	ldr	r3, [pc, #128]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005d0:	4b1e      	ldr	r3, [pc, #120]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005d6:	4b1d      	ldr	r3, [pc, #116]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80005dc:	4b1b      	ldr	r3, [pc, #108]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005de:	2208      	movs	r2, #8
 80005e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005e2:	4b1a      	ldr	r3, [pc, #104]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005e8:	4b18      	ldr	r3, [pc, #96]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005ee:	4b17      	ldr	r3, [pc, #92]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005f4:	4b15      	ldr	r3, [pc, #84]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005fa:	4b14      	ldr	r3, [pc, #80]	@ (800064c <MX_USART1_UART_Init+0x94>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_HalfDuplex_Init(&huart1) != HAL_OK)
 8000600:	4b12      	ldr	r3, [pc, #72]	@ (800064c <MX_USART1_UART_Init+0x94>)
 8000602:	0018      	movs	r0, r3
 8000604:	f001 fea6 	bl	8002354 <HAL_HalfDuplex_Init>
 8000608:	1e03      	subs	r3, r0, #0
 800060a:	d001      	beq.n	8000610 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800060c:	f000 f91a 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <MX_USART1_UART_Init+0x94>)
 8000612:	2100      	movs	r1, #0
 8000614:	0018      	movs	r0, r3
 8000616:	f003 f8f1 	bl	80037fc <HAL_UARTEx_SetTxFifoThreshold>
 800061a:	1e03      	subs	r3, r0, #0
 800061c:	d001      	beq.n	8000622 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800061e:	f000 f911 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000622:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <MX_USART1_UART_Init+0x94>)
 8000624:	2100      	movs	r1, #0
 8000626:	0018      	movs	r0, r3
 8000628:	f003 f928 	bl	800387c <HAL_UARTEx_SetRxFifoThreshold>
 800062c:	1e03      	subs	r3, r0, #0
 800062e:	d001      	beq.n	8000634 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000630:	f000 f908 	bl	8000844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000634:	4b05      	ldr	r3, [pc, #20]	@ (800064c <MX_USART1_UART_Init+0x94>)
 8000636:	0018      	movs	r0, r3
 8000638:	f003 f8a6 	bl	8003788 <HAL_UARTEx_DisableFifoMode>
 800063c:	1e03      	subs	r3, r0, #0
 800063e:	d001      	beq.n	8000644 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000640:	f000 f900 	bl	8000844 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000644:	46c0      	nop			@ (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			@ (mov r8, r8)
 800064c:	200000c4 	.word	0x200000c4
 8000650:	40013800 	.word	0x40013800

08000654 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000654:	b590      	push	{r4, r7, lr}
 8000656:	b089      	sub	sp, #36	@ 0x24
 8000658:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	240c      	movs	r4, #12
 800065c:	193b      	adds	r3, r7, r4
 800065e:	0018      	movs	r0, r3
 8000660:	2314      	movs	r3, #20
 8000662:	001a      	movs	r2, r3
 8000664:	2100      	movs	r1, #0
 8000666:	f003 f9a9 	bl	80039bc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b1e      	ldr	r3, [pc, #120]	@ (80006e4 <MX_GPIO_Init+0x90>)
 800066c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800066e:	4b1d      	ldr	r3, [pc, #116]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000670:	2101      	movs	r1, #1
 8000672:	430a      	orrs	r2, r1
 8000674:	635a      	str	r2, [r3, #52]	@ 0x34
 8000676:	4b1b      	ldr	r3, [pc, #108]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000678:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800067a:	2201      	movs	r2, #1
 800067c:	4013      	ands	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b18      	ldr	r3, [pc, #96]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000684:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000686:	4b17      	ldr	r3, [pc, #92]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000688:	2102      	movs	r1, #2
 800068a:	430a      	orrs	r2, r1
 800068c:	635a      	str	r2, [r3, #52]	@ 0x34
 800068e:	4b15      	ldr	r3, [pc, #84]	@ (80006e4 <MX_GPIO_Init+0x90>)
 8000690:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000692:	2202      	movs	r2, #2
 8000694:	4013      	ands	r3, r2
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : DIGITAL_INPUT_Pin */
  GPIO_InitStruct.Pin = DIGITAL_INPUT_Pin;
 800069a:	193b      	adds	r3, r7, r4
 800069c:	2202      	movs	r2, #2
 800069e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a0:	193b      	adds	r3, r7, r4
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	193b      	adds	r3, r7, r4
 80006a8:	2200      	movs	r2, #0
 80006aa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIGITAL_INPUT_GPIO_Port, &GPIO_InitStruct);
 80006ac:	193a      	adds	r2, r7, r4
 80006ae:	23a0      	movs	r3, #160	@ 0xa0
 80006b0:	05db      	lsls	r3, r3, #23
 80006b2:	0011      	movs	r1, r2
 80006b4:	0018      	movs	r0, r3
 80006b6:	f000 fc49 	bl	8000f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : MODE_SELECT_Pin */
  GPIO_InitStruct.Pin = MODE_SELECT_Pin;
 80006ba:	193b      	adds	r3, r7, r4
 80006bc:	2204      	movs	r2, #4
 80006be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80006c0:	193b      	adds	r3, r7, r4
 80006c2:	4a09      	ldr	r2, [pc, #36]	@ (80006e8 <MX_GPIO_Init+0x94>)
 80006c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_SELECT_GPIO_Port, &GPIO_InitStruct);
 80006cc:	193a      	adds	r2, r7, r4
 80006ce:	23a0      	movs	r3, #160	@ 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fc39 	bl	8000f4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006da:	46c0      	nop			@ (mov r8, r8)
 80006dc:	46bd      	mov	sp, r7
 80006de:	b009      	add	sp, #36	@ 0x24
 80006e0:	bd90      	pop	{r4, r7, pc}
 80006e2:	46c0      	nop			@ (mov r8, r8)
 80006e4:	40021000 	.word	0x40021000
 80006e8:	10310000 	.word	0x10310000

080006ec <MODE_CHECK>:


*/

void MODE_CHECK() //checking auto or hold/manual mode enabled
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	//if MODE pin on PCB is disconnected => auto mode
	//if MODE pin on PCB is jumped/connected to 3.3 => manual mode
	MODE = HAL_GPIO_ReadPin(MODE_SELECT_GPIO_Port, MODE_SELECT_Pin);
 80006f0:	23a0      	movs	r3, #160	@ 0xa0
 80006f2:	05db      	lsls	r3, r3, #23
 80006f4:	2104      	movs	r1, #4
 80006f6:	0018      	movs	r0, r3
 80006f8:	f000 fd92 	bl	8001220 <HAL_GPIO_ReadPin>
 80006fc:	0003      	movs	r3, r0
 80006fe:	001a      	movs	r2, r3
 8000700:	4b02      	ldr	r3, [pc, #8]	@ (800070c <MODE_CHECK+0x20>)
 8000702:	701a      	strb	r2, [r3, #0]
}
 8000704:	46c0      	nop			@ (mov r8, r8)
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	46c0      	nop			@ (mov r8, r8)
 800070c:	20000158 	.word	0x20000158

08000710 <ANALOG_TO_DIGITAL>:

uint8_t ANALOG_TO_DIGITAL() //conversion from sigma delta hardware output to digital data
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0
	data = HAL_GPIO_ReadPin(DIGITAL_INPUT_GPIO_Port, DIGITAL_INPUT_Pin);
 8000714:	23a0      	movs	r3, #160	@ 0xa0
 8000716:	05db      	lsls	r3, r3, #23
 8000718:	2102      	movs	r1, #2
 800071a:	0018      	movs	r0, r3
 800071c:	f000 fd80 	bl	8001220 <HAL_GPIO_ReadPin>
 8000720:	0003      	movs	r3, r0
 8000722:	001a      	movs	r2, r3
 8000724:	4b29      	ldr	r3, [pc, #164]	@ (80007cc <ANALOG_TO_DIGITAL+0xbc>)
 8000726:	701a      	strb	r2, [r3, #0]

	ticks = ticks + 1;
 8000728:	4b29      	ldr	r3, [pc, #164]	@ (80007d0 <ANALOG_TO_DIGITAL+0xc0>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	3301      	adds	r3, #1
 800072e:	b29a      	uxth	r2, r3
 8000730:	4b27      	ldr	r3, [pc, #156]	@ (80007d0 <ANALOG_TO_DIGITAL+0xc0>)
 8000732:	801a      	strh	r2, [r3, #0]

	if((was_high == true && data == HIGH) || ticks >= MAX_TICKS) //back on high
 8000734:	4b27      	ldr	r3, [pc, #156]	@ (80007d4 <ANALOG_TO_DIGITAL+0xc4>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	2b01      	cmp	r3, #1
 800073a:	d103      	bne.n	8000744 <ANALOG_TO_DIGITAL+0x34>
 800073c:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <ANALOG_TO_DIGITAL+0xbc>)
 800073e:	781b      	ldrb	r3, [r3, #0]
 8000740:	2b01      	cmp	r3, #1
 8000742:	d003      	beq.n	800074c <ANALOG_TO_DIGITAL+0x3c>
 8000744:	4b22      	ldr	r3, [pc, #136]	@ (80007d0 <ANALOG_TO_DIGITAL+0xc0>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	2bfe      	cmp	r3, #254	@ 0xfe
 800074a:	d926      	bls.n	800079a <ANALOG_TO_DIGITAL+0x8a>
	{
		VOLTAGE = ticks_high / ticks_low * MAGIC_VOLTAGE_MULTIPLIER;
 800074c:	4b22      	ldr	r3, [pc, #136]	@ (80007d8 <ANALOG_TO_DIGITAL+0xc8>)
 800074e:	881a      	ldrh	r2, [r3, #0]
 8000750:	4b22      	ldr	r3, [pc, #136]	@ (80007dc <ANALOG_TO_DIGITAL+0xcc>)
 8000752:	881b      	ldrh	r3, [r3, #0]
 8000754:	0019      	movs	r1, r3
 8000756:	0010      	movs	r0, r2
 8000758:	f7ff fcd6 	bl	8000108 <__udivsi3>
 800075c:	0003      	movs	r3, r0
 800075e:	b29b      	uxth	r3, r3
 8000760:	b2db      	uxtb	r3, r3
 8000762:	425b      	negs	r3, r3
 8000764:	b2da      	uxtb	r2, r3
 8000766:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <ANALOG_TO_DIGITAL+0xd0>)
 8000768:	701a      	strb	r2, [r3, #0]
		SEND_VIA_UART(VOLTAGE * STATIC_VOLTAGE_MULTIPLIER + VOLTAGE_OFFSET);
 800076a:	4b1d      	ldr	r3, [pc, #116]	@ (80007e0 <ANALOG_TO_DIGITAL+0xd0>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	3301      	adds	r3, #1
 8000770:	b2db      	uxtb	r3, r3
 8000772:	0018      	movs	r0, r3
 8000774:	f000 f836 	bl	80007e4 <SEND_VIA_UART>
		//for new run
		ticks = 1;
 8000778:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <ANALOG_TO_DIGITAL+0xc0>)
 800077a:	2201      	movs	r2, #1
 800077c:	801a      	strh	r2, [r3, #0]
		ticks_high = 1;
 800077e:	4b16      	ldr	r3, [pc, #88]	@ (80007d8 <ANALOG_TO_DIGITAL+0xc8>)
 8000780:	2201      	movs	r2, #1
 8000782:	801a      	strh	r2, [r3, #0]
		ticks_low = 0;
 8000784:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <ANALOG_TO_DIGITAL+0xcc>)
 8000786:	2200      	movs	r2, #0
 8000788:	801a      	strh	r2, [r3, #0]
		ticks = 1;
 800078a:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <ANALOG_TO_DIGITAL+0xc0>)
 800078c:	2201      	movs	r2, #1
 800078e:	801a      	strh	r2, [r3, #0]
		was_high=false;
 8000790:	4b10      	ldr	r3, [pc, #64]	@ (80007d4 <ANALOG_TO_DIGITAL+0xc4>)
 8000792:	2200      	movs	r2, #0
 8000794:	701a      	strb	r2, [r3, #0]
		return 1; //voltage analysis done
 8000796:	2301      	movs	r3, #1
 8000798:	e014      	b.n	80007c4 <ANALOG_TO_DIGITAL+0xb4>
	}
	else if(data == HIGH) //first high
 800079a:	4b0c      	ldr	r3, [pc, #48]	@ (80007cc <ANALOG_TO_DIGITAL+0xbc>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d106      	bne.n	80007b0 <ANALOG_TO_DIGITAL+0xa0>
	{
		ticks_high = ticks_high + 1;
 80007a2:	4b0d      	ldr	r3, [pc, #52]	@ (80007d8 <ANALOG_TO_DIGITAL+0xc8>)
 80007a4:	881b      	ldrh	r3, [r3, #0]
 80007a6:	3301      	adds	r3, #1
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b0b      	ldr	r3, [pc, #44]	@ (80007d8 <ANALOG_TO_DIGITAL+0xc8>)
 80007ac:	801a      	strh	r2, [r3, #0]
 80007ae:	e008      	b.n	80007c2 <ANALOG_TO_DIGITAL+0xb2>
	}
	else //func went down
	{
		ticks_low = ticks_low + 1;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	@ (80007dc <ANALOG_TO_DIGITAL+0xcc>)
 80007b2:	881b      	ldrh	r3, [r3, #0]
 80007b4:	3301      	adds	r3, #1
 80007b6:	b29a      	uxth	r2, r3
 80007b8:	4b08      	ldr	r3, [pc, #32]	@ (80007dc <ANALOG_TO_DIGITAL+0xcc>)
 80007ba:	801a      	strh	r2, [r3, #0]
		was_high = true;
 80007bc:	4b05      	ldr	r3, [pc, #20]	@ (80007d4 <ANALOG_TO_DIGITAL+0xc4>)
 80007be:	2201      	movs	r2, #1
 80007c0:	701a      	strb	r2, [r3, #0]
	}

	return 0; //nothing
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	0018      	movs	r0, r3
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			@ (mov r8, r8)
 80007cc:	2000015a 	.word	0x2000015a
 80007d0:	20000160 	.word	0x20000160
 80007d4:	20000159 	.word	0x20000159
 80007d8:	2000015c 	.word	0x2000015c
 80007dc:	2000015e 	.word	0x2000015e
 80007e0:	20000000 	.word	0x20000000

080007e4 <SEND_VIA_UART>:


}

void SEND_VIA_UART(uint8_t toSend) //send analog output via uart tx
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	0002      	movs	r2, r0
 80007ec:	1dfb      	adds	r3, r7, #7
 80007ee:	701a      	strb	r2, [r3, #0]
	 	 */


	uint8_t uart_tx[2];

	uart_tx[0] = 0x59;
 80007f0:	210c      	movs	r1, #12
 80007f2:	187b      	adds	r3, r7, r1
 80007f4:	2259      	movs	r2, #89	@ 0x59
 80007f6:	701a      	strb	r2, [r3, #0]
	uart_tx[1] = VOLTAGE;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <SEND_VIA_UART+0x30>)
 80007fa:	781a      	ldrb	r2, [r3, #0]
 80007fc:	187b      	adds	r3, r7, r1
 80007fe:	705a      	strb	r2, [r3, #1]
	//HAL_UART_Transmit(&huart1, uart_tx, 3, 100); //TODO check if works
	HAL_UART_Transmit_IT(&huart1, uart_tx, 2);
 8000800:	1879      	adds	r1, r7, r1
 8000802:	4b05      	ldr	r3, [pc, #20]	@ (8000818 <SEND_VIA_UART+0x34>)
 8000804:	2202      	movs	r2, #2
 8000806:	0018      	movs	r0, r3
 8000808:	f001 fe02 	bl	8002410 <HAL_UART_Transmit_IT>
}
 800080c:	46c0      	nop			@ (mov r8, r8)
 800080e:	46bd      	mov	sp, r7
 8000810:	b004      	add	sp, #16
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20000000 	.word	0x20000000
 8000818:	200000c4 	.word	0x200000c4

0800081c <HAL_TIM_PeriodElapsedCallback>:
    	MODE_CHECK();
    }
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) //time based interrupts
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b082      	sub	sp, #8
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
	  if(htim->Instance == TIM17) //execute every something of time
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	4a05      	ldr	r2, [pc, #20]	@ (8000840 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800082a:	4293      	cmp	r3, r2
 800082c:	d103      	bne.n	8000836 <HAL_TIM_PeriodElapsedCallback+0x1a>
	  {
		  MODE_CHECK();
 800082e:	f7ff ff5d 	bl	80006ec <MODE_CHECK>
		  ANALOG_TO_DIGITAL();
 8000832:	f7ff ff6d 	bl	8000710 <ANALOG_TO_DIGITAL>
	  }
}
 8000836:	46c0      	nop			@ (mov r8, r8)
 8000838:	46bd      	mov	sp, r7
 800083a:	b002      	add	sp, #8
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	40014800 	.word	0x40014800

08000844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000848:	b672      	cpsid	i
}
 800084a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
																																//TODO user output of error in uart?

  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800084c:	46c0      	nop			@ (mov r8, r8)
 800084e:	e7fd      	b.n	800084c <Error_Handler+0x8>

08000850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000856:	4b0f      	ldr	r3, [pc, #60]	@ (8000894 <HAL_MspInit+0x44>)
 8000858:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800085a:	4b0e      	ldr	r3, [pc, #56]	@ (8000894 <HAL_MspInit+0x44>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	641a      	str	r2, [r3, #64]	@ 0x40
 8000862:	4b0c      	ldr	r3, [pc, #48]	@ (8000894 <HAL_MspInit+0x44>)
 8000864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000866:	2201      	movs	r2, #1
 8000868:	4013      	ands	r3, r2
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800086e:	4b09      	ldr	r3, [pc, #36]	@ (8000894 <HAL_MspInit+0x44>)
 8000870:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000872:	4b08      	ldr	r3, [pc, #32]	@ (8000894 <HAL_MspInit+0x44>)
 8000874:	2180      	movs	r1, #128	@ 0x80
 8000876:	0549      	lsls	r1, r1, #21
 8000878:	430a      	orrs	r2, r1
 800087a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800087c:	4b05      	ldr	r3, [pc, #20]	@ (8000894 <HAL_MspInit+0x44>)
 800087e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000880:	2380      	movs	r3, #128	@ 0x80
 8000882:	055b      	lsls	r3, r3, #21
 8000884:	4013      	ands	r3, r2
 8000886:	603b      	str	r3, [r7, #0]
 8000888:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800088a:	46c0      	nop			@ (mov r8, r8)
 800088c:	46bd      	mov	sp, r7
 800088e:	b002      	add	sp, #8
 8000890:	bd80      	pop	{r7, pc}
 8000892:	46c0      	nop			@ (mov r8, r8)
 8000894:	40021000 	.word	0x40021000

08000898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a17      	ldr	r2, [pc, #92]	@ (8000904 <HAL_TIM_Base_MspInit+0x6c>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d10c      	bne.n	80008c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80008aa:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <HAL_TIM_Base_MspInit+0x70>)
 80008ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80008ae:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <HAL_TIM_Base_MspInit+0x70>)
 80008b0:	2102      	movs	r1, #2
 80008b2:	430a      	orrs	r2, r1
 80008b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008b6:	4b14      	ldr	r3, [pc, #80]	@ (8000908 <HAL_TIM_Base_MspInit+0x70>)
 80008b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80008ba:	2202      	movs	r2, #2
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80008c2:	e01a      	b.n	80008fa <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM17)
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a10      	ldr	r2, [pc, #64]	@ (800090c <HAL_TIM_Base_MspInit+0x74>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d115      	bne.n	80008fa <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80008ce:	4b0e      	ldr	r3, [pc, #56]	@ (8000908 <HAL_TIM_Base_MspInit+0x70>)
 80008d0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008d2:	4b0d      	ldr	r3, [pc, #52]	@ (8000908 <HAL_TIM_Base_MspInit+0x70>)
 80008d4:	2180      	movs	r1, #128	@ 0x80
 80008d6:	02c9      	lsls	r1, r1, #11
 80008d8:	430a      	orrs	r2, r1
 80008da:	641a      	str	r2, [r3, #64]	@ 0x40
 80008dc:	4b0a      	ldr	r3, [pc, #40]	@ (8000908 <HAL_TIM_Base_MspInit+0x70>)
 80008de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80008e0:	2380      	movs	r3, #128	@ 0x80
 80008e2:	02db      	lsls	r3, r3, #11
 80008e4:	4013      	ands	r3, r2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM17_IRQn, 0, 0);
 80008ea:	2200      	movs	r2, #0
 80008ec:	2100      	movs	r1, #0
 80008ee:	2016      	movs	r0, #22
 80008f0:	f000 fa1e 	bl	8000d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM17_IRQn);
 80008f4:	2016      	movs	r0, #22
 80008f6:	f000 fa30 	bl	8000d5a <HAL_NVIC_EnableIRQ>
}
 80008fa:	46c0      	nop			@ (mov r8, r8)
 80008fc:	46bd      	mov	sp, r7
 80008fe:	b004      	add	sp, #16
 8000900:	bd80      	pop	{r7, pc}
 8000902:	46c0      	nop			@ (mov r8, r8)
 8000904:	40000400 	.word	0x40000400
 8000908:	40021000 	.word	0x40021000
 800090c:	40014800 	.word	0x40014800

08000910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b091      	sub	sp, #68	@ 0x44
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	232c      	movs	r3, #44	@ 0x2c
 800091a:	18fb      	adds	r3, r7, r3
 800091c:	0018      	movs	r0, r3
 800091e:	2314      	movs	r3, #20
 8000920:	001a      	movs	r2, r3
 8000922:	2100      	movs	r1, #0
 8000924:	f003 f84a 	bl	80039bc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000928:	2410      	movs	r4, #16
 800092a:	193b      	adds	r3, r7, r4
 800092c:	0018      	movs	r0, r3
 800092e:	231c      	movs	r3, #28
 8000930:	001a      	movs	r2, r3
 8000932:	2100      	movs	r1, #0
 8000934:	f003 f842 	bl	80039bc <memset>
  if(huart->Instance==USART1)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a31      	ldr	r2, [pc, #196]	@ (8000a04 <HAL_UART_MspInit+0xf4>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d15b      	bne.n	80009fa <HAL_UART_MspInit+0xea>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000942:	193b      	adds	r3, r7, r4
 8000944:	2201      	movs	r2, #1
 8000946:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800094e:	193b      	adds	r3, r7, r4
 8000950:	0018      	movs	r0, r3
 8000952:	f000 ffdf 	bl	8001914 <HAL_RCCEx_PeriphCLKConfig>
 8000956:	1e03      	subs	r3, r0, #0
 8000958:	d001      	beq.n	800095e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800095a:	f7ff ff73 	bl	8000844 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800095e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a08 <HAL_UART_MspInit+0xf8>)
 8000960:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000962:	4b29      	ldr	r3, [pc, #164]	@ (8000a08 <HAL_UART_MspInit+0xf8>)
 8000964:	2180      	movs	r1, #128	@ 0x80
 8000966:	01c9      	lsls	r1, r1, #7
 8000968:	430a      	orrs	r2, r1
 800096a:	641a      	str	r2, [r3, #64]	@ 0x40
 800096c:	4b26      	ldr	r3, [pc, #152]	@ (8000a08 <HAL_UART_MspInit+0xf8>)
 800096e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	01db      	lsls	r3, r3, #7
 8000974:	4013      	ands	r3, r2
 8000976:	60fb      	str	r3, [r7, #12]
 8000978:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097a:	4b23      	ldr	r3, [pc, #140]	@ (8000a08 <HAL_UART_MspInit+0xf8>)
 800097c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800097e:	4b22      	ldr	r3, [pc, #136]	@ (8000a08 <HAL_UART_MspInit+0xf8>)
 8000980:	2102      	movs	r1, #2
 8000982:	430a      	orrs	r2, r1
 8000984:	635a      	str	r2, [r3, #52]	@ 0x34
 8000986:	4b20      	ldr	r3, [pc, #128]	@ (8000a08 <HAL_UART_MspInit+0xf8>)
 8000988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800098a:	2202      	movs	r2, #2
 800098c:	4013      	ands	r3, r2
 800098e:	60bb      	str	r3, [r7, #8]
 8000990:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000992:	242c      	movs	r4, #44	@ 0x2c
 8000994:	193b      	adds	r3, r7, r4
 8000996:	2240      	movs	r2, #64	@ 0x40
 8000998:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800099a:	193b      	adds	r3, r7, r4
 800099c:	2212      	movs	r2, #18
 800099e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	2201      	movs	r2, #1
 80009a4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a6:	193b      	adds	r3, r7, r4
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009ac:	193b      	adds	r3, r7, r4
 80009ae:	2200      	movs	r2, #0
 80009b0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009b2:	193b      	adds	r3, r7, r4
 80009b4:	4a15      	ldr	r2, [pc, #84]	@ (8000a0c <HAL_UART_MspInit+0xfc>)
 80009b6:	0019      	movs	r1, r3
 80009b8:	0010      	movs	r0, r2
 80009ba:	f000 fac7 	bl	8000f4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USART1_RX__Pin;
 80009be:	0021      	movs	r1, r4
 80009c0:	187b      	adds	r3, r7, r1
 80009c2:	2280      	movs	r2, #128	@ 0x80
 80009c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c6:	187b      	adds	r3, r7, r1
 80009c8:	2202      	movs	r2, #2
 80009ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	187b      	adds	r3, r7, r1
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2200      	movs	r2, #0
 80009d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2200      	movs	r2, #0
 80009dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(USART1_RX__GPIO_Port, &GPIO_InitStruct);
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	4a0a      	ldr	r2, [pc, #40]	@ (8000a0c <HAL_UART_MspInit+0xfc>)
 80009e2:	0019      	movs	r1, r3
 80009e4:	0010      	movs	r0, r2
 80009e6:	f000 fab1 	bl	8000f4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80009ea:	2200      	movs	r2, #0
 80009ec:	2100      	movs	r1, #0
 80009ee:	201b      	movs	r0, #27
 80009f0:	f000 f99e 	bl	8000d30 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009f4:	201b      	movs	r0, #27
 80009f6:	f000 f9b0 	bl	8000d5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80009fa:	46c0      	nop			@ (mov r8, r8)
 80009fc:	46bd      	mov	sp, r7
 80009fe:	b011      	add	sp, #68	@ 0x44
 8000a00:	bd90      	pop	{r4, r7, pc}
 8000a02:	46c0      	nop			@ (mov r8, r8)
 8000a04:	40013800 	.word	0x40013800
 8000a08:	40021000 	.word	0x40021000
 8000a0c:	50000400 	.word	0x50000400

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	46c0      	nop			@ (mov r8, r8)
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	46c0      	nop			@ (mov r8, r8)
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a24:	46c0      	nop			@ (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}

08000a34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a38:	f000 f8b2 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3c:	46c0      	nop			@ (mov r8, r8)
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <TIM17_IRQHandler+0x14>)
 8000a4a:	0018      	movs	r0, r3
 8000a4c:	f001 f8f4 	bl	8001c38 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8000a50:	46c0      	nop			@ (mov r8, r8)
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	46c0      	nop			@ (mov r8, r8)
 8000a58:	20000078 	.word	0x20000078

08000a5c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a60:	4b03      	ldr	r3, [pc, #12]	@ (8000a70 <USART1_IRQHandler+0x14>)
 8000a62:	0018      	movs	r0, r3
 8000a64:	f001 fd7c 	bl	8002560 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a68:	46c0      	nop			@ (mov r8, r8)
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	46c0      	nop			@ (mov r8, r8)
 8000a70:	200000c4 	.word	0x200000c4

08000a74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a78:	4b03      	ldr	r3, [pc, #12]	@ (8000a88 <SystemInit+0x14>)
 8000a7a:	2280      	movs	r2, #128	@ 0x80
 8000a7c:	0512      	lsls	r2, r2, #20
 8000a7e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a80:	46c0      	nop			@ (mov r8, r8)
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	46c0      	nop			@ (mov r8, r8)
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a8c:	480d      	ldr	r0, [pc, #52]	@ (8000ac4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a8e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a90:	f7ff fff0 	bl	8000a74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a94:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a96:	e003      	b.n	8000aa0 <LoopCopyDataInit>

08000a98 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a98:	4b0b      	ldr	r3, [pc, #44]	@ (8000ac8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a9a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a9c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a9e:	3104      	adds	r1, #4

08000aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000aa0:	480a      	ldr	r0, [pc, #40]	@ (8000acc <LoopForever+0xa>)
  ldr r3, =_edata
 8000aa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ad0 <LoopForever+0xe>)
  adds r2, r0, r1
 8000aa4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000aa6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000aa8:	d3f6      	bcc.n	8000a98 <CopyDataInit>
  ldr r2, =_sbss
 8000aaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ad4 <LoopForever+0x12>)
  b LoopFillZerobss
 8000aac:	e002      	b.n	8000ab4 <LoopFillZerobss>

08000aae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000aae:	2300      	movs	r3, #0
  str  r3, [r2]
 8000ab0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ab2:	3204      	adds	r2, #4

08000ab4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000ab4:	4b08      	ldr	r3, [pc, #32]	@ (8000ad8 <LoopForever+0x16>)
  cmp r2, r3
 8000ab6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ab8:	d3f9      	bcc.n	8000aae <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000aba:	f002 ff87 	bl	80039cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000abe:	f7ff fc99 	bl	80003f4 <main>

08000ac2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ac2:	e7fe      	b.n	8000ac2 <LoopForever>
  ldr   r0, =_estack
 8000ac4:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000ac8:	08003abc 	.word	0x08003abc
  ldr r0, =_sdata
 8000acc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ad0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000ad4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000ad8:	20000168 	.word	0x20000168

08000adc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000adc:	e7fe      	b.n	8000adc <ADC1_IRQHandler>

08000ade <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ade:	b580      	push	{r7, lr}
 8000ae0:	b082      	sub	sp, #8
 8000ae2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae4:	1dfb      	adds	r3, r7, #7
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aea:	2003      	movs	r0, #3
 8000aec:	f000 f80e 	bl	8000b0c <HAL_InitTick>
 8000af0:	1e03      	subs	r3, r0, #0
 8000af2:	d003      	beq.n	8000afc <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000af4:	1dfb      	adds	r3, r7, #7
 8000af6:	2201      	movs	r2, #1
 8000af8:	701a      	strb	r2, [r3, #0]
 8000afa:	e001      	b.n	8000b00 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afc:	f7ff fea8 	bl	8000850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	781b      	ldrb	r3, [r3, #0]
}
 8000b04:	0018      	movs	r0, r3
 8000b06:	46bd      	mov	sp, r7
 8000b08:	b002      	add	sp, #8
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b590      	push	{r4, r7, lr}
 8000b0e:	b085      	sub	sp, #20
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2200      	movs	r2, #0
 8000b1a:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000b94 <HAL_InitTick+0x88>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d02b      	beq.n	8000b7c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000b24:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_InitTick+0x8c>)
 8000b26:	681c      	ldr	r4, [r3, #0]
 8000b28:	4b1a      	ldr	r3, [pc, #104]	@ (8000b94 <HAL_InitTick+0x88>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	23fa      	movs	r3, #250	@ 0xfa
 8000b30:	0098      	lsls	r0, r3, #2
 8000b32:	f7ff fae9 	bl	8000108 <__udivsi3>
 8000b36:	0003      	movs	r3, r0
 8000b38:	0019      	movs	r1, r3
 8000b3a:	0020      	movs	r0, r4
 8000b3c:	f7ff fae4 	bl	8000108 <__udivsi3>
 8000b40:	0003      	movs	r3, r0
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 f919 	bl	8000d7a <HAL_SYSTICK_Config>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d112      	bne.n	8000b72 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b03      	cmp	r3, #3
 8000b50:	d80a      	bhi.n	8000b68 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2301      	movs	r3, #1
 8000b56:	425b      	negs	r3, r3
 8000b58:	2200      	movs	r2, #0
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f000 f8e8 	bl	8000d30 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b60:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <HAL_InitTick+0x90>)
 8000b62:	687a      	ldr	r2, [r7, #4]
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	e00d      	b.n	8000b84 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b68:	230f      	movs	r3, #15
 8000b6a:	18fb      	adds	r3, r7, r3
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	701a      	strb	r2, [r3, #0]
 8000b70:	e008      	b.n	8000b84 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b72:	230f      	movs	r3, #15
 8000b74:	18fb      	adds	r3, r7, r3
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
 8000b7a:	e003      	b.n	8000b84 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	18fb      	adds	r3, r7, r3
 8000b80:	2201      	movs	r2, #1
 8000b82:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b84:	230f      	movs	r3, #15
 8000b86:	18fb      	adds	r3, r7, r3
 8000b88:	781b      	ldrb	r3, [r3, #0]
}
 8000b8a:	0018      	movs	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b005      	add	sp, #20
 8000b90:	bd90      	pop	{r4, r7, pc}
 8000b92:	46c0      	nop			@ (mov r8, r8)
 8000b94:	2000000c 	.word	0x2000000c
 8000b98:	20000004 	.word	0x20000004
 8000b9c:	20000008 	.word	0x20000008

08000ba0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <HAL_IncTick+0x1c>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	001a      	movs	r2, r3
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <HAL_IncTick+0x20>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	18d2      	adds	r2, r2, r3
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <HAL_IncTick+0x20>)
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	46c0      	nop			@ (mov r8, r8)
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	46c0      	nop			@ (mov r8, r8)
 8000bbc:	2000000c 	.word	0x2000000c
 8000bc0:	20000164 	.word	0x20000164

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b02      	ldr	r3, [pc, #8]	@ (8000bd4 <HAL_GetTick+0x10>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	0018      	movs	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	46c0      	nop			@ (mov r8, r8)
 8000bd4:	20000164 	.word	0x20000164

08000bd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	0002      	movs	r2, r0
 8000be0:	1dfb      	adds	r3, r7, #7
 8000be2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b7f      	cmp	r3, #127	@ 0x7f
 8000bea:	d809      	bhi.n	8000c00 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bec:	1dfb      	adds	r3, r7, #7
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	001a      	movs	r2, r3
 8000bf2:	231f      	movs	r3, #31
 8000bf4:	401a      	ands	r2, r3
 8000bf6:	4b04      	ldr	r3, [pc, #16]	@ (8000c08 <__NVIC_EnableIRQ+0x30>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	4091      	lsls	r1, r2
 8000bfc:	000a      	movs	r2, r1
 8000bfe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000c00:	46c0      	nop			@ (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b002      	add	sp, #8
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	e000e100 	.word	0xe000e100

08000c0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c0c:	b590      	push	{r4, r7, lr}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	0002      	movs	r2, r0
 8000c14:	6039      	str	r1, [r7, #0]
 8000c16:	1dfb      	adds	r3, r7, #7
 8000c18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8000c20:	d828      	bhi.n	8000c74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c22:	4a2f      	ldr	r2, [pc, #188]	@ (8000ce0 <__NVIC_SetPriority+0xd4>)
 8000c24:	1dfb      	adds	r3, r7, #7
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	b25b      	sxtb	r3, r3
 8000c2a:	089b      	lsrs	r3, r3, #2
 8000c2c:	33c0      	adds	r3, #192	@ 0xc0
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	589b      	ldr	r3, [r3, r2]
 8000c32:	1dfa      	adds	r2, r7, #7
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	0011      	movs	r1, r2
 8000c38:	2203      	movs	r2, #3
 8000c3a:	400a      	ands	r2, r1
 8000c3c:	00d2      	lsls	r2, r2, #3
 8000c3e:	21ff      	movs	r1, #255	@ 0xff
 8000c40:	4091      	lsls	r1, r2
 8000c42:	000a      	movs	r2, r1
 8000c44:	43d2      	mvns	r2, r2
 8000c46:	401a      	ands	r2, r3
 8000c48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	22ff      	movs	r2, #255	@ 0xff
 8000c50:	401a      	ands	r2, r3
 8000c52:	1dfb      	adds	r3, r7, #7
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	0018      	movs	r0, r3
 8000c58:	2303      	movs	r3, #3
 8000c5a:	4003      	ands	r3, r0
 8000c5c:	00db      	lsls	r3, r3, #3
 8000c5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c60:	481f      	ldr	r0, [pc, #124]	@ (8000ce0 <__NVIC_SetPriority+0xd4>)
 8000c62:	1dfb      	adds	r3, r7, #7
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	b25b      	sxtb	r3, r3
 8000c68:	089b      	lsrs	r3, r3, #2
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	33c0      	adds	r3, #192	@ 0xc0
 8000c6e:	009b      	lsls	r3, r3, #2
 8000c70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000c72:	e031      	b.n	8000cd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c74:	4a1b      	ldr	r2, [pc, #108]	@ (8000ce4 <__NVIC_SetPriority+0xd8>)
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	0019      	movs	r1, r3
 8000c7c:	230f      	movs	r3, #15
 8000c7e:	400b      	ands	r3, r1
 8000c80:	3b08      	subs	r3, #8
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3306      	adds	r3, #6
 8000c86:	009b      	lsls	r3, r3, #2
 8000c88:	18d3      	adds	r3, r2, r3
 8000c8a:	3304      	adds	r3, #4
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	1dfa      	adds	r2, r7, #7
 8000c90:	7812      	ldrb	r2, [r2, #0]
 8000c92:	0011      	movs	r1, r2
 8000c94:	2203      	movs	r2, #3
 8000c96:	400a      	ands	r2, r1
 8000c98:	00d2      	lsls	r2, r2, #3
 8000c9a:	21ff      	movs	r1, #255	@ 0xff
 8000c9c:	4091      	lsls	r1, r2
 8000c9e:	000a      	movs	r2, r1
 8000ca0:	43d2      	mvns	r2, r2
 8000ca2:	401a      	ands	r2, r3
 8000ca4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	019b      	lsls	r3, r3, #6
 8000caa:	22ff      	movs	r2, #255	@ 0xff
 8000cac:	401a      	ands	r2, r3
 8000cae:	1dfb      	adds	r3, r7, #7
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	2303      	movs	r3, #3
 8000cb6:	4003      	ands	r3, r0
 8000cb8:	00db      	lsls	r3, r3, #3
 8000cba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000cbc:	4809      	ldr	r0, [pc, #36]	@ (8000ce4 <__NVIC_SetPriority+0xd8>)
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	001c      	movs	r4, r3
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	4023      	ands	r3, r4
 8000cc8:	3b08      	subs	r3, #8
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	430a      	orrs	r2, r1
 8000cce:	3306      	adds	r3, #6
 8000cd0:	009b      	lsls	r3, r3, #2
 8000cd2:	18c3      	adds	r3, r0, r3
 8000cd4:	3304      	adds	r3, #4
 8000cd6:	601a      	str	r2, [r3, #0]
}
 8000cd8:	46c0      	nop			@ (mov r8, r8)
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	b003      	add	sp, #12
 8000cde:	bd90      	pop	{r4, r7, pc}
 8000ce0:	e000e100 	.word	0xe000e100
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	1e5a      	subs	r2, r3, #1
 8000cf4:	2380      	movs	r3, #128	@ 0x80
 8000cf6:	045b      	lsls	r3, r3, #17
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d301      	bcc.n	8000d00 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e010      	b.n	8000d22 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d00:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <SysTick_Config+0x44>)
 8000d02:	687a      	ldr	r2, [r7, #4]
 8000d04:	3a01      	subs	r2, #1
 8000d06:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d08:	2301      	movs	r3, #1
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	2103      	movs	r1, #3
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f7ff ff7c 	bl	8000c0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d14:	4b05      	ldr	r3, [pc, #20]	@ (8000d2c <SysTick_Config+0x44>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1a:	4b04      	ldr	r3, [pc, #16]	@ (8000d2c <SysTick_Config+0x44>)
 8000d1c:	2207      	movs	r2, #7
 8000d1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b002      	add	sp, #8
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	46c0      	nop			@ (mov r8, r8)
 8000d2c:	e000e010 	.word	0xe000e010

08000d30 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	60b9      	str	r1, [r7, #8]
 8000d38:	607a      	str	r2, [r7, #4]
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	1c02      	adds	r2, r0, #0
 8000d40:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000d42:	68ba      	ldr	r2, [r7, #8]
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	b25b      	sxtb	r3, r3
 8000d4a:	0011      	movs	r1, r2
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f7ff ff5d 	bl	8000c0c <__NVIC_SetPriority>
}
 8000d52:	46c0      	nop			@ (mov r8, r8)
 8000d54:	46bd      	mov	sp, r7
 8000d56:	b004      	add	sp, #16
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b082      	sub	sp, #8
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	0002      	movs	r2, r0
 8000d62:	1dfb      	adds	r3, r7, #7
 8000d64:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	b25b      	sxtb	r3, r3
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	f7ff ff33 	bl	8000bd8 <__NVIC_EnableIRQ>
}
 8000d72:	46c0      	nop			@ (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b002      	add	sp, #8
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff ffaf 	bl	8000ce8 <SysTick_Config>
 8000d8a:	0003      	movs	r3, r0
}
 8000d8c:	0018      	movs	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	b002      	add	sp, #8
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	e050      	b.n	8000e48 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2225      	movs	r2, #37	@ 0x25
 8000daa:	5c9b      	ldrb	r3, [r3, r2]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d008      	beq.n	8000dc4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2204      	movs	r2, #4
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2224      	movs	r2, #36	@ 0x24
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	e041      	b.n	8000e48 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	210e      	movs	r1, #14
 8000dd0:	438a      	bics	r2, r1
 8000dd2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dd8:	681a      	ldr	r2, [r3, #0]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dde:	491c      	ldr	r1, [pc, #112]	@ (8000e50 <HAL_DMA_Abort+0xbc>)
 8000de0:	400a      	ands	r2, r1
 8000de2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	2101      	movs	r1, #1
 8000df0:	438a      	bics	r2, r1
 8000df2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8000df4:	4b17      	ldr	r3, [pc, #92]	@ (8000e54 <HAL_DMA_Abort+0xc0>)
 8000df6:	6859      	ldr	r1, [r3, #4]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfc:	221c      	movs	r2, #28
 8000dfe:	4013      	ands	r3, r2
 8000e00:	2201      	movs	r2, #1
 8000e02:	409a      	lsls	r2, r3
 8000e04:	4b13      	ldr	r3, [pc, #76]	@ (8000e54 <HAL_DMA_Abort+0xc0>)
 8000e06:	430a      	orrs	r2, r1
 8000e08:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000e0e:	687a      	ldr	r2, [r7, #4]
 8000e10:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000e12:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d00c      	beq.n	8000e36 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000e26:	490a      	ldr	r1, [pc, #40]	@ (8000e50 <HAL_DMA_Abort+0xbc>)
 8000e28:	400a      	ands	r2, r1
 8000e2a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e30:	687a      	ldr	r2, [r7, #4]
 8000e32:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000e34:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2225      	movs	r2, #37	@ 0x25
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2224      	movs	r2, #36	@ 0x24
 8000e42:	2100      	movs	r1, #0
 8000e44:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8000e46:	2300      	movs	r3, #0
}
 8000e48:	0018      	movs	r0, r3
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	b002      	add	sp, #8
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	fffffeff 	.word	0xfffffeff
 8000e54:	40020000 	.word	0x40020000

08000e58 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e60:	230f      	movs	r3, #15
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2224      	movs	r2, #36	@ 0x24
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2224      	movs	r2, #36	@ 0x24
 8000e74:	5c9b      	ldrb	r3, [r3, r2]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d101      	bne.n	8000e7e <HAL_DMA_Abort_IT+0x26>
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	e05e      	b.n	8000f3c <HAL_DMA_Abort_IT+0xe4>
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2224      	movs	r2, #36	@ 0x24
 8000e82:	2101      	movs	r1, #1
 8000e84:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2225      	movs	r2, #37	@ 0x25
 8000e8a:	5c9b      	ldrb	r3, [r3, r2]
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d007      	beq.n	8000ea2 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2204      	movs	r2, #4
 8000e96:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000e98:	230f      	movs	r3, #15
 8000e9a:	18fb      	adds	r3, r7, r3
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	701a      	strb	r2, [r3, #0]
 8000ea0:	e049      	b.n	8000f36 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	681a      	ldr	r2, [r3, #0]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	210e      	movs	r1, #14
 8000eae:	438a      	bics	r2, r1
 8000eb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	438a      	bics	r2, r1
 8000ec0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ecc:	491d      	ldr	r1, [pc, #116]	@ (8000f44 <HAL_DMA_Abort_IT+0xec>)
 8000ece:	400a      	ands	r2, r1
 8000ed0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8000ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f48 <HAL_DMA_Abort_IT+0xf0>)
 8000ed4:	6859      	ldr	r1, [r3, #4]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eda:	221c      	movs	r2, #28
 8000edc:	4013      	ands	r3, r2
 8000ede:	2201      	movs	r2, #1
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	4b19      	ldr	r3, [pc, #100]	@ (8000f48 <HAL_DMA_Abort_IT+0xf0>)
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8000ef0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d00c      	beq.n	8000f14 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000f04:	490f      	ldr	r1, [pc, #60]	@ (8000f44 <HAL_DMA_Abort_IT+0xec>)
 8000f06:	400a      	ands	r2, r1
 8000f08:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000f0e:	687a      	ldr	r2, [r7, #4]
 8000f10:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8000f12:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2225      	movs	r2, #37	@ 0x25
 8000f18:	2101      	movs	r1, #1
 8000f1a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2224      	movs	r2, #36	@ 0x24
 8000f20:	2100      	movs	r1, #0
 8000f22:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d004      	beq.n	8000f36 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	0010      	movs	r0, r2
 8000f34:	4798      	blx	r3
    }
  }
  return status;
 8000f36:	230f      	movs	r3, #15
 8000f38:	18fb      	adds	r3, r7, r3
 8000f3a:	781b      	ldrb	r3, [r3, #0]
}
 8000f3c:	0018      	movs	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b004      	add	sp, #16
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	fffffeff 	.word	0xfffffeff
 8000f48:	40020000 	.word	0x40020000

08000f4c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
 8000f54:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000f5a:	e14d      	b.n	80011f8 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2101      	movs	r1, #1
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4091      	lsls	r1, r2
 8000f66:	000a      	movs	r2, r1
 8000f68:	4013      	ands	r3, r2
 8000f6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d100      	bne.n	8000f74 <HAL_GPIO_Init+0x28>
 8000f72:	e13e      	b.n	80011f2 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x38>
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	d125      	bne.n	8000fd0 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000f84:	693b      	ldr	r3, [r7, #16]
 8000f86:	08da      	lsrs	r2, r3, #3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3208      	adds	r2, #8
 8000f8c:	0092      	lsls	r2, r2, #2
 8000f8e:	58d3      	ldr	r3, [r2, r3]
 8000f90:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	2207      	movs	r2, #7
 8000f96:	4013      	ands	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	220f      	movs	r2, #15
 8000f9c:	409a      	lsls	r2, r3
 8000f9e:	0013      	movs	r3, r2
 8000fa0:	43da      	mvns	r2, r3
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	691b      	ldr	r3, [r3, #16]
 8000fac:	220f      	movs	r2, #15
 8000fae:	401a      	ands	r2, r3
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	2107      	movs	r1, #7
 8000fb4:	400b      	ands	r3, r1
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	409a      	lsls	r2, r3
 8000fba:	0013      	movs	r3, r2
 8000fbc:	697a      	ldr	r2, [r7, #20]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	08da      	lsrs	r2, r3, #3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3208      	adds	r2, #8
 8000fca:	0092      	lsls	r2, r2, #2
 8000fcc:	6979      	ldr	r1, [r7, #20]
 8000fce:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	2203      	movs	r2, #3
 8000fdc:	409a      	lsls	r2, r3
 8000fde:	0013      	movs	r3, r2
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	2203      	movs	r2, #3
 8000fee:	401a      	ands	r2, r3
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	005b      	lsls	r3, r3, #1
 8000ff4:	409a      	lsls	r2, r3
 8000ff6:	0013      	movs	r3, r2
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	4313      	orrs	r3, r2
 8000ffc:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d00b      	beq.n	8001024 <HAL_GPIO_Init+0xd8>
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	2b02      	cmp	r3, #2
 8001012:	d007      	beq.n	8001024 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001018:	2b11      	cmp	r3, #17
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b12      	cmp	r3, #18
 8001022:	d130      	bne.n	8001086 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	005b      	lsls	r3, r3, #1
 800102e:	2203      	movs	r2, #3
 8001030:	409a      	lsls	r2, r3
 8001032:	0013      	movs	r3, r2
 8001034:	43da      	mvns	r2, r3
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	4013      	ands	r3, r2
 800103a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68da      	ldr	r2, [r3, #12]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	409a      	lsls	r2, r3
 8001046:	0013      	movs	r3, r2
 8001048:	697a      	ldr	r2, [r7, #20]
 800104a:	4313      	orrs	r3, r2
 800104c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	697a      	ldr	r2, [r7, #20]
 8001052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 800105a:	2201      	movs	r2, #1
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	409a      	lsls	r2, r3
 8001060:	0013      	movs	r3, r2
 8001062:	43da      	mvns	r2, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	4013      	ands	r3, r2
 8001068:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	091b      	lsrs	r3, r3, #4
 8001070:	2201      	movs	r2, #1
 8001072:	401a      	ands	r2, r3
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	409a      	lsls	r2, r3
 8001078:	0013      	movs	r3, r2
 800107a:	697a      	ldr	r2, [r7, #20]
 800107c:	4313      	orrs	r3, r2
 800107e:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	697a      	ldr	r2, [r7, #20]
 8001084:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	409a      	lsls	r2, r3
 800109c:	0013      	movs	r3, r2
 800109e:	43da      	mvns	r2, r3
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	4013      	ands	r3, r2
 80010a4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	693b      	ldr	r3, [r7, #16]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	409a      	lsls	r2, r3
 80010b0:	0013      	movs	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	697a      	ldr	r2, [r7, #20]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	2380      	movs	r3, #128	@ 0x80
 80010c4:	055b      	lsls	r3, r3, #21
 80010c6:	4013      	ands	r3, r2
 80010c8:	d100      	bne.n	80010cc <HAL_GPIO_Init+0x180>
 80010ca:	e092      	b.n	80011f2 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80010cc:	4a50      	ldr	r2, [pc, #320]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	089b      	lsrs	r3, r3, #2
 80010d2:	3318      	adds	r3, #24
 80010d4:	009b      	lsls	r3, r3, #2
 80010d6:	589b      	ldr	r3, [r3, r2]
 80010d8:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	2203      	movs	r2, #3
 80010de:	4013      	ands	r3, r2
 80010e0:	00db      	lsls	r3, r3, #3
 80010e2:	220f      	movs	r2, #15
 80010e4:	409a      	lsls	r2, r3
 80010e6:	0013      	movs	r3, r2
 80010e8:	43da      	mvns	r2, r3
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	4013      	ands	r3, r2
 80010ee:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	23a0      	movs	r3, #160	@ 0xa0
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d013      	beq.n	8001122 <HAL_GPIO_Init+0x1d6>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a45      	ldr	r2, [pc, #276]	@ (8001214 <HAL_GPIO_Init+0x2c8>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d00d      	beq.n	800111e <HAL_GPIO_Init+0x1d2>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a44      	ldr	r2, [pc, #272]	@ (8001218 <HAL_GPIO_Init+0x2cc>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d007      	beq.n	800111a <HAL_GPIO_Init+0x1ce>
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a43      	ldr	r2, [pc, #268]	@ (800121c <HAL_GPIO_Init+0x2d0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d101      	bne.n	8001116 <HAL_GPIO_Init+0x1ca>
 8001112:	2305      	movs	r3, #5
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x1d8>
 8001116:	2306      	movs	r3, #6
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x1d8>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x1d8>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x1d8>
 8001122:	2300      	movs	r3, #0
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	2103      	movs	r1, #3
 8001128:	400a      	ands	r2, r1
 800112a:	00d2      	lsls	r2, r2, #3
 800112c:	4093      	lsls	r3, r2
 800112e:	697a      	ldr	r2, [r7, #20]
 8001130:	4313      	orrs	r3, r2
 8001132:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001134:	4936      	ldr	r1, [pc, #216]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3318      	adds	r3, #24
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	697a      	ldr	r2, [r7, #20]
 8001140:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001142:	4a33      	ldr	r2, [pc, #204]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 8001144:	2380      	movs	r3, #128	@ 0x80
 8001146:	58d3      	ldr	r3, [r2, r3]
 8001148:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	43da      	mvns	r2, r3
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	4013      	ands	r3, r2
 8001152:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685a      	ldr	r2, [r3, #4]
 8001158:	2380      	movs	r3, #128	@ 0x80
 800115a:	025b      	lsls	r3, r3, #9
 800115c:	4013      	ands	r3, r2
 800115e:	d003      	beq.n	8001168 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4313      	orrs	r3, r2
 8001166:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001168:	4929      	ldr	r1, [pc, #164]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 800116a:	2280      	movs	r2, #128	@ 0x80
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001170:	4a27      	ldr	r2, [pc, #156]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 8001172:	2384      	movs	r3, #132	@ 0x84
 8001174:	58d3      	ldr	r3, [r2, r3]
 8001176:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	43da      	mvns	r2, r3
 800117c:	697b      	ldr	r3, [r7, #20]
 800117e:	4013      	ands	r3, r2
 8001180:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685a      	ldr	r2, [r3, #4]
 8001186:	2380      	movs	r3, #128	@ 0x80
 8001188:	029b      	lsls	r3, r3, #10
 800118a:	4013      	ands	r3, r2
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 800118e:	697a      	ldr	r2, [r7, #20]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	4313      	orrs	r3, r2
 8001194:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001196:	491e      	ldr	r1, [pc, #120]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 8001198:	2284      	movs	r2, #132	@ 0x84
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 800119e:	4b1c      	ldr	r3, [pc, #112]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43da      	mvns	r2, r3
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	4013      	ands	r3, r2
 80011ac:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	@ 0x80
 80011b4:	035b      	lsls	r3, r3, #13
 80011b6:	4013      	ands	r3, r2
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80011ba:	697a      	ldr	r2, [r7, #20]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80011c2:	4b13      	ldr	r3, [pc, #76]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 80011c4:	697a      	ldr	r2, [r7, #20]
 80011c6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80011c8:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43da      	mvns	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	4013      	ands	r3, r2
 80011d6:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	@ 0x80
 80011de:	039b      	lsls	r3, r3, #14
 80011e0:	4013      	ands	r3, r2
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80011ec:	4b08      	ldr	r3, [pc, #32]	@ (8001210 <HAL_GPIO_Init+0x2c4>)
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	3301      	adds	r3, #1
 80011f6:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	40da      	lsrs	r2, r3
 8001200:	1e13      	subs	r3, r2, #0
 8001202:	d000      	beq.n	8001206 <HAL_GPIO_Init+0x2ba>
 8001204:	e6aa      	b.n	8000f5c <HAL_GPIO_Init+0x10>
  }
}
 8001206:	46c0      	nop			@ (mov r8, r8)
 8001208:	46c0      	nop			@ (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b006      	add	sp, #24
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40021800 	.word	0x40021800
 8001214:	50000400 	.word	0x50000400
 8001218:	50000800 	.word	0x50000800
 800121c:	50001400 	.word	0x50001400

08001220 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	000a      	movs	r2, r1
 800122a:	1cbb      	adds	r3, r7, #2
 800122c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	1cba      	adds	r2, r7, #2
 8001234:	8812      	ldrh	r2, [r2, #0]
 8001236:	4013      	ands	r3, r2
 8001238:	d004      	beq.n	8001244 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800123a:	230f      	movs	r3, #15
 800123c:	18fb      	adds	r3, r7, r3
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
 8001242:	e003      	b.n	800124c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001244:	230f      	movs	r3, #15
 8001246:	18fb      	adds	r3, r7, r3
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800124c:	230f      	movs	r3, #15
 800124e:	18fb      	adds	r3, r7, r3
 8001250:	781b      	ldrb	r3, [r3, #0]
}
 8001252:	0018      	movs	r0, r3
 8001254:	46bd      	mov	sp, r7
 8001256:	b004      	add	sp, #16
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b086      	sub	sp, #24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e1d0      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	2201      	movs	r2, #1
 8001274:	4013      	ands	r3, r2
 8001276:	d100      	bne.n	800127a <HAL_RCC_OscConfig+0x1e>
 8001278:	e069      	b.n	800134e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800127a:	4bc8      	ldr	r3, [pc, #800]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	2238      	movs	r2, #56	@ 0x38
 8001280:	4013      	ands	r3, r2
 8001282:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	2b08      	cmp	r3, #8
 8001288:	d105      	bne.n	8001296 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d15d      	bne.n	800134e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e1bc      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	2380      	movs	r3, #128	@ 0x80
 800129c:	025b      	lsls	r3, r3, #9
 800129e:	429a      	cmp	r2, r3
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_OscConfig+0x56>
 80012a2:	4bbe      	ldr	r3, [pc, #760]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	4bbd      	ldr	r3, [pc, #756]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012a8:	2180      	movs	r1, #128	@ 0x80
 80012aa:	0249      	lsls	r1, r1, #9
 80012ac:	430a      	orrs	r2, r1
 80012ae:	601a      	str	r2, [r3, #0]
 80012b0:	e020      	b.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685a      	ldr	r2, [r3, #4]
 80012b6:	23a0      	movs	r3, #160	@ 0xa0
 80012b8:	02db      	lsls	r3, r3, #11
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d10e      	bne.n	80012dc <HAL_RCC_OscConfig+0x80>
 80012be:	4bb7      	ldr	r3, [pc, #732]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	4bb6      	ldr	r3, [pc, #728]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012c4:	2180      	movs	r1, #128	@ 0x80
 80012c6:	02c9      	lsls	r1, r1, #11
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	4bb3      	ldr	r3, [pc, #716]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4bb2      	ldr	r3, [pc, #712]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012d2:	2180      	movs	r1, #128	@ 0x80
 80012d4:	0249      	lsls	r1, r1, #9
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0x98>
 80012dc:	4baf      	ldr	r3, [pc, #700]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4bae      	ldr	r3, [pc, #696]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012e2:	49af      	ldr	r1, [pc, #700]	@ (80015a0 <HAL_RCC_OscConfig+0x344>)
 80012e4:	400a      	ands	r2, r1
 80012e6:	601a      	str	r2, [r3, #0]
 80012e8:	4bac      	ldr	r3, [pc, #688]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4bab      	ldr	r3, [pc, #684]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80012ee:	49ad      	ldr	r1, [pc, #692]	@ (80015a4 <HAL_RCC_OscConfig+0x348>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d014      	beq.n	8001326 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc62 	bl	8000bc4 <HAL_GetTick>
 8001300:	0003      	movs	r3, r0
 8001302:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001304:	e008      	b.n	8001318 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001306:	f7ff fc5d 	bl	8000bc4 <HAL_GetTick>
 800130a:	0002      	movs	r2, r0
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	2b64      	cmp	r3, #100	@ 0x64
 8001312:	d901      	bls.n	8001318 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001314:	2303      	movs	r3, #3
 8001316:	e17b      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001318:	4ba0      	ldr	r3, [pc, #640]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	2380      	movs	r3, #128	@ 0x80
 800131e:	029b      	lsls	r3, r3, #10
 8001320:	4013      	ands	r3, r2
 8001322:	d0f0      	beq.n	8001306 <HAL_RCC_OscConfig+0xaa>
 8001324:	e013      	b.n	800134e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001326:	f7ff fc4d 	bl	8000bc4 <HAL_GetTick>
 800132a:	0003      	movs	r3, r0
 800132c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800132e:	e008      	b.n	8001342 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001330:	f7ff fc48 	bl	8000bc4 <HAL_GetTick>
 8001334:	0002      	movs	r2, r0
 8001336:	693b      	ldr	r3, [r7, #16]
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	2b64      	cmp	r3, #100	@ 0x64
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e166      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001342:	4b96      	ldr	r3, [pc, #600]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	2380      	movs	r3, #128	@ 0x80
 8001348:	029b      	lsls	r3, r3, #10
 800134a:	4013      	ands	r3, r2
 800134c:	d1f0      	bne.n	8001330 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2202      	movs	r2, #2
 8001354:	4013      	ands	r3, r2
 8001356:	d100      	bne.n	800135a <HAL_RCC_OscConfig+0xfe>
 8001358:	e086      	b.n	8001468 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135a:	4b90      	ldr	r3, [pc, #576]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2238      	movs	r2, #56	@ 0x38
 8001360:	4013      	ands	r3, r2
 8001362:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d12f      	bne.n	80013ca <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	68db      	ldr	r3, [r3, #12]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d101      	bne.n	8001376 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e14c      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b89      	ldr	r3, [pc, #548]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	4a8b      	ldr	r2, [pc, #556]	@ (80015a8 <HAL_RCC_OscConfig+0x34c>)
 800137c:	4013      	ands	r3, r2
 800137e:	0019      	movs	r1, r3
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	695b      	ldr	r3, [r3, #20]
 8001384:	021a      	lsls	r2, r3, #8
 8001386:	4b85      	ldr	r3, [pc, #532]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001388:	430a      	orrs	r2, r1
 800138a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d112      	bne.n	80013b8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001392:	4b82      	ldr	r3, [pc, #520]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a85      	ldr	r2, [pc, #532]	@ (80015ac <HAL_RCC_OscConfig+0x350>)
 8001398:	4013      	ands	r3, r2
 800139a:	0019      	movs	r1, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	4b7e      	ldr	r3, [pc, #504]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80013a6:	4b7d      	ldr	r3, [pc, #500]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	0adb      	lsrs	r3, r3, #11
 80013ac:	2207      	movs	r2, #7
 80013ae:	4013      	ands	r3, r2
 80013b0:	4a7f      	ldr	r2, [pc, #508]	@ (80015b0 <HAL_RCC_OscConfig+0x354>)
 80013b2:	40da      	lsrs	r2, r3
 80013b4:	4b7f      	ldr	r3, [pc, #508]	@ (80015b4 <HAL_RCC_OscConfig+0x358>)
 80013b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80013b8:	4b7f      	ldr	r3, [pc, #508]	@ (80015b8 <HAL_RCC_OscConfig+0x35c>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff fba5 	bl	8000b0c <HAL_InitTick>
 80013c2:	1e03      	subs	r3, r0, #0
 80013c4:	d050      	beq.n	8001468 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e122      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d030      	beq.n	8001434 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80013d2:	4b72      	ldr	r3, [pc, #456]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a75      	ldr	r2, [pc, #468]	@ (80015ac <HAL_RCC_OscConfig+0x350>)
 80013d8:	4013      	ands	r3, r2
 80013da:	0019      	movs	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	4b6e      	ldr	r3, [pc, #440]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80013e6:	4b6d      	ldr	r3, [pc, #436]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80013e8:	681a      	ldr	r2, [r3, #0]
 80013ea:	4b6c      	ldr	r3, [pc, #432]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80013ec:	2180      	movs	r1, #128	@ 0x80
 80013ee:	0049      	lsls	r1, r1, #1
 80013f0:	430a      	orrs	r2, r1
 80013f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013f4:	f7ff fbe6 	bl	8000bc4 <HAL_GetTick>
 80013f8:	0003      	movs	r3, r0
 80013fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80013fe:	f7ff fbe1 	bl	8000bc4 <HAL_GetTick>
 8001402:	0002      	movs	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e0ff      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001410:	4b62      	ldr	r3, [pc, #392]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001412:	681a      	ldr	r2, [r3, #0]
 8001414:	2380      	movs	r3, #128	@ 0x80
 8001416:	00db      	lsls	r3, r3, #3
 8001418:	4013      	ands	r3, r2
 800141a:	d0f0      	beq.n	80013fe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800141c:	4b5f      	ldr	r3, [pc, #380]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	4a61      	ldr	r2, [pc, #388]	@ (80015a8 <HAL_RCC_OscConfig+0x34c>)
 8001422:	4013      	ands	r3, r2
 8001424:	0019      	movs	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	695b      	ldr	r3, [r3, #20]
 800142a:	021a      	lsls	r2, r3, #8
 800142c:	4b5b      	ldr	r3, [pc, #364]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800142e:	430a      	orrs	r2, r1
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	e019      	b.n	8001468 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001434:	4b59      	ldr	r3, [pc, #356]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b58      	ldr	r3, [pc, #352]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800143a:	4960      	ldr	r1, [pc, #384]	@ (80015bc <HAL_RCC_OscConfig+0x360>)
 800143c:	400a      	ands	r2, r1
 800143e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001440:	f7ff fbc0 	bl	8000bc4 <HAL_GetTick>
 8001444:	0003      	movs	r3, r0
 8001446:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800144a:	f7ff fbbb 	bl	8000bc4 <HAL_GetTick>
 800144e:	0002      	movs	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e0d9      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800145c:	4b4f      	ldr	r3, [pc, #316]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2380      	movs	r3, #128	@ 0x80
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	4013      	ands	r3, r2
 8001466:	d1f0      	bne.n	800144a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2208      	movs	r2, #8
 800146e:	4013      	ands	r3, r2
 8001470:	d042      	beq.n	80014f8 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001472:	4b4a      	ldr	r3, [pc, #296]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001474:	689b      	ldr	r3, [r3, #8]
 8001476:	2238      	movs	r2, #56	@ 0x38
 8001478:	4013      	ands	r3, r2
 800147a:	2b18      	cmp	r3, #24
 800147c:	d105      	bne.n	800148a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d138      	bne.n	80014f8 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e0c2      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d019      	beq.n	80014c6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001492:	4b42      	ldr	r3, [pc, #264]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001494:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001496:	4b41      	ldr	r3, [pc, #260]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001498:	2101      	movs	r1, #1
 800149a:	430a      	orrs	r2, r1
 800149c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff fb91 	bl	8000bc4 <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014a8:	f7ff fb8c 	bl	8000bc4 <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e0aa      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80014ba:	4b38      	ldr	r3, [pc, #224]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80014bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d0f1      	beq.n	80014a8 <HAL_RCC_OscConfig+0x24c>
 80014c4:	e018      	b.n	80014f8 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80014c6:	4b35      	ldr	r3, [pc, #212]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80014c8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80014ca:	4b34      	ldr	r3, [pc, #208]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80014cc:	2101      	movs	r1, #1
 80014ce:	438a      	bics	r2, r1
 80014d0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d2:	f7ff fb77 	bl	8000bc4 <HAL_GetTick>
 80014d6:	0003      	movs	r3, r0
 80014d8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80014dc:	f7ff fb72 	bl	8000bc4 <HAL_GetTick>
 80014e0:	0002      	movs	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b02      	cmp	r3, #2
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e090      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80014ee:	4b2b      	ldr	r3, [pc, #172]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 80014f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014f2:	2202      	movs	r2, #2
 80014f4:	4013      	ands	r3, r2
 80014f6:	d1f1      	bne.n	80014dc <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2204      	movs	r2, #4
 80014fe:	4013      	ands	r3, r2
 8001500:	d100      	bne.n	8001504 <HAL_RCC_OscConfig+0x2a8>
 8001502:	e084      	b.n	800160e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001504:	230f      	movs	r3, #15
 8001506:	18fb      	adds	r3, r7, r3
 8001508:	2200      	movs	r2, #0
 800150a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800150c:	4b23      	ldr	r3, [pc, #140]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	2238      	movs	r2, #56	@ 0x38
 8001512:	4013      	ands	r3, r2
 8001514:	2b20      	cmp	r3, #32
 8001516:	d106      	bne.n	8001526 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d000      	beq.n	8001522 <HAL_RCC_OscConfig+0x2c6>
 8001520:	e075      	b.n	800160e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	e074      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b01      	cmp	r3, #1
 800152c:	d106      	bne.n	800153c <HAL_RCC_OscConfig+0x2e0>
 800152e:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001530:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001534:	2101      	movs	r1, #1
 8001536:	430a      	orrs	r2, r1
 8001538:	65da      	str	r2, [r3, #92]	@ 0x5c
 800153a:	e01c      	b.n	8001576 <HAL_RCC_OscConfig+0x31a>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689b      	ldr	r3, [r3, #8]
 8001540:	2b05      	cmp	r3, #5
 8001542:	d10c      	bne.n	800155e <HAL_RCC_OscConfig+0x302>
 8001544:	4b15      	ldr	r3, [pc, #84]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001546:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800154a:	2104      	movs	r1, #4
 800154c:	430a      	orrs	r2, r1
 800154e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001550:	4b12      	ldr	r3, [pc, #72]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001552:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001556:	2101      	movs	r1, #1
 8001558:	430a      	orrs	r2, r1
 800155a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800155c:	e00b      	b.n	8001576 <HAL_RCC_OscConfig+0x31a>
 800155e:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001560:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001564:	2101      	movs	r1, #1
 8001566:	438a      	bics	r2, r1
 8001568:	65da      	str	r2, [r3, #92]	@ 0x5c
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 800156c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <HAL_RCC_OscConfig+0x340>)
 8001570:	2104      	movs	r1, #4
 8001572:	438a      	bics	r2, r1
 8001574:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d028      	beq.n	80015d0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800157e:	f7ff fb21 	bl	8000bc4 <HAL_GetTick>
 8001582:	0003      	movs	r3, r0
 8001584:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001586:	e01d      	b.n	80015c4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001588:	f7ff fb1c 	bl	8000bc4 <HAL_GetTick>
 800158c:	0002      	movs	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	4a0b      	ldr	r2, [pc, #44]	@ (80015c0 <HAL_RCC_OscConfig+0x364>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d915      	bls.n	80015c4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001598:	2303      	movs	r3, #3
 800159a:	e039      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
 800159c:	40021000 	.word	0x40021000
 80015a0:	fffeffff 	.word	0xfffeffff
 80015a4:	fffbffff 	.word	0xfffbffff
 80015a8:	ffff80ff 	.word	0xffff80ff
 80015ac:	ffffc7ff 	.word	0xffffc7ff
 80015b0:	02dc6c00 	.word	0x02dc6c00
 80015b4:	20000004 	.word	0x20000004
 80015b8:	20000008 	.word	0x20000008
 80015bc:	fffffeff 	.word	0xfffffeff
 80015c0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <HAL_RCC_OscConfig+0x3bc>)
 80015c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015c8:	2202      	movs	r2, #2
 80015ca:	4013      	ands	r3, r2
 80015cc:	d0dc      	beq.n	8001588 <HAL_RCC_OscConfig+0x32c>
 80015ce:	e013      	b.n	80015f8 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d0:	f7ff faf8 	bl	8000bc4 <HAL_GetTick>
 80015d4:	0003      	movs	r3, r0
 80015d6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80015d8:	e009      	b.n	80015ee <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015da:	f7ff faf3 	bl	8000bc4 <HAL_GetTick>
 80015de:	0002      	movs	r2, r0
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_RCC_OscConfig+0x3c0>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e010      	b.n	8001610 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80015ee:	4b0a      	ldr	r3, [pc, #40]	@ (8001618 <HAL_RCC_OscConfig+0x3bc>)
 80015f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015f2:	2202      	movs	r2, #2
 80015f4:	4013      	ands	r3, r2
 80015f6:	d1f0      	bne.n	80015da <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80015f8:	230f      	movs	r3, #15
 80015fa:	18fb      	adds	r3, r7, r3
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d105      	bne.n	800160e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001602:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <HAL_RCC_OscConfig+0x3bc>)
 8001604:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001606:	4b04      	ldr	r3, [pc, #16]	@ (8001618 <HAL_RCC_OscConfig+0x3bc>)
 8001608:	4905      	ldr	r1, [pc, #20]	@ (8001620 <HAL_RCC_OscConfig+0x3c4>)
 800160a:	400a      	ands	r2, r1
 800160c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800160e:	2300      	movs	r3, #0
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b006      	add	sp, #24
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40021000 	.word	0x40021000
 800161c:	00001388 	.word	0x00001388
 8001620:	efffffff 	.word	0xefffffff

08001624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d101      	bne.n	8001638 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001634:	2301      	movs	r3, #1
 8001636:	e0df      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001638:	4b71      	ldr	r3, [pc, #452]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2207      	movs	r2, #7
 800163e:	4013      	ands	r3, r2
 8001640:	683a      	ldr	r2, [r7, #0]
 8001642:	429a      	cmp	r2, r3
 8001644:	d91e      	bls.n	8001684 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001646:	4b6e      	ldr	r3, [pc, #440]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2207      	movs	r2, #7
 800164c:	4393      	bics	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	4b6b      	ldr	r3, [pc, #428]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 8001652:	683a      	ldr	r2, [r7, #0]
 8001654:	430a      	orrs	r2, r1
 8001656:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001658:	f7ff fab4 	bl	8000bc4 <HAL_GetTick>
 800165c:	0003      	movs	r3, r0
 800165e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001660:	e009      	b.n	8001676 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001662:	f7ff faaf 	bl	8000bc4 <HAL_GetTick>
 8001666:	0002      	movs	r2, r0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	1ad3      	subs	r3, r2, r3
 800166c:	4a65      	ldr	r2, [pc, #404]	@ (8001804 <HAL_RCC_ClockConfig+0x1e0>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0c0      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001676:	4b62      	ldr	r3, [pc, #392]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2207      	movs	r2, #7
 800167c:	4013      	ands	r3, r2
 800167e:	683a      	ldr	r2, [r7, #0]
 8001680:	429a      	cmp	r2, r3
 8001682:	d1ee      	bne.n	8001662 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2202      	movs	r2, #2
 800168a:	4013      	ands	r3, r2
 800168c:	d017      	beq.n	80016be <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	2204      	movs	r2, #4
 8001694:	4013      	ands	r3, r2
 8001696:	d008      	beq.n	80016aa <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001698:	4b5b      	ldr	r3, [pc, #364]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	4a5b      	ldr	r2, [pc, #364]	@ (800180c <HAL_RCC_ClockConfig+0x1e8>)
 800169e:	401a      	ands	r2, r3
 80016a0:	4b59      	ldr	r3, [pc, #356]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80016a2:	21b0      	movs	r1, #176	@ 0xb0
 80016a4:	0109      	lsls	r1, r1, #4
 80016a6:	430a      	orrs	r2, r1
 80016a8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016aa:	4b57      	ldr	r3, [pc, #348]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	4a58      	ldr	r2, [pc, #352]	@ (8001810 <HAL_RCC_ClockConfig+0x1ec>)
 80016b0:	4013      	ands	r3, r2
 80016b2:	0019      	movs	r1, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	4b53      	ldr	r3, [pc, #332]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80016ba:	430a      	orrs	r2, r1
 80016bc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2201      	movs	r2, #1
 80016c4:	4013      	ands	r3, r2
 80016c6:	d04b      	beq.n	8001760 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d107      	bne.n	80016e0 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2380      	movs	r3, #128	@ 0x80
 80016d6:	029b      	lsls	r3, r3, #10
 80016d8:	4013      	ands	r3, r2
 80016da:	d11f      	bne.n	800171c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e08b      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d107      	bne.n	80016f8 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e8:	4b47      	ldr	r3, [pc, #284]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	2380      	movs	r3, #128	@ 0x80
 80016ee:	00db      	lsls	r3, r3, #3
 80016f0:	4013      	ands	r3, r2
 80016f2:	d113      	bne.n	800171c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e07f      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	2b03      	cmp	r3, #3
 80016fe:	d106      	bne.n	800170e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001700:	4b41      	ldr	r3, [pc, #260]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 8001702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001704:	2202      	movs	r2, #2
 8001706:	4013      	ands	r3, r2
 8001708:	d108      	bne.n	800171c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e074      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800170e:	4b3e      	ldr	r3, [pc, #248]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 8001710:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001712:	2202      	movs	r2, #2
 8001714:	4013      	ands	r3, r2
 8001716:	d101      	bne.n	800171c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e06d      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800171c:	4b3a      	ldr	r3, [pc, #232]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2207      	movs	r2, #7
 8001722:	4393      	bics	r3, r2
 8001724:	0019      	movs	r1, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	685a      	ldr	r2, [r3, #4]
 800172a:	4b37      	ldr	r3, [pc, #220]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 800172c:	430a      	orrs	r2, r1
 800172e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001730:	f7ff fa48 	bl	8000bc4 <HAL_GetTick>
 8001734:	0003      	movs	r3, r0
 8001736:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001738:	e009      	b.n	800174e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800173a:	f7ff fa43 	bl	8000bc4 <HAL_GetTick>
 800173e:	0002      	movs	r2, r0
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	4a2f      	ldr	r2, [pc, #188]	@ (8001804 <HAL_RCC_ClockConfig+0x1e0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d901      	bls.n	800174e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e054      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	4b2e      	ldr	r3, [pc, #184]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	2238      	movs	r2, #56	@ 0x38
 8001754:	401a      	ands	r2, r3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	00db      	lsls	r3, r3, #3
 800175c:	429a      	cmp	r2, r3
 800175e:	d1ec      	bne.n	800173a <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001760:	4b27      	ldr	r3, [pc, #156]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2207      	movs	r2, #7
 8001766:	4013      	ands	r3, r2
 8001768:	683a      	ldr	r2, [r7, #0]
 800176a:	429a      	cmp	r2, r3
 800176c:	d21e      	bcs.n	80017ac <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800176e:	4b24      	ldr	r3, [pc, #144]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	2207      	movs	r2, #7
 8001774:	4393      	bics	r3, r2
 8001776:	0019      	movs	r1, r3
 8001778:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001780:	f7ff fa20 	bl	8000bc4 <HAL_GetTick>
 8001784:	0003      	movs	r3, r0
 8001786:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001788:	e009      	b.n	800179e <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800178a:	f7ff fa1b 	bl	8000bc4 <HAL_GetTick>
 800178e:	0002      	movs	r2, r0
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	4a1b      	ldr	r2, [pc, #108]	@ (8001804 <HAL_RCC_ClockConfig+0x1e0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d901      	bls.n	800179e <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e02c      	b.n	80017f8 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800179e:	4b18      	ldr	r3, [pc, #96]	@ (8001800 <HAL_RCC_ClockConfig+0x1dc>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	2207      	movs	r2, #7
 80017a4:	4013      	ands	r3, r2
 80017a6:	683a      	ldr	r2, [r7, #0]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	d1ee      	bne.n	800178a <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2204      	movs	r2, #4
 80017b2:	4013      	ands	r3, r2
 80017b4:	d009      	beq.n	80017ca <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80017b6:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	4a16      	ldr	r2, [pc, #88]	@ (8001814 <HAL_RCC_ClockConfig+0x1f0>)
 80017bc:	4013      	ands	r3, r2
 80017be:	0019      	movs	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	691a      	ldr	r2, [r3, #16]
 80017c4:	4b10      	ldr	r3, [pc, #64]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80017c6:	430a      	orrs	r2, r1
 80017c8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017ca:	f000 f82b 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017ce:	0001      	movs	r1, r0
 80017d0:	4b0d      	ldr	r3, [pc, #52]	@ (8001808 <HAL_RCC_ClockConfig+0x1e4>)
 80017d2:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017d4:	0a1b      	lsrs	r3, r3, #8
 80017d6:	220f      	movs	r2, #15
 80017d8:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017da:	4b0f      	ldr	r3, [pc, #60]	@ (8001818 <HAL_RCC_ClockConfig+0x1f4>)
 80017dc:	0092      	lsls	r2, r2, #2
 80017de:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80017e0:	221f      	movs	r2, #31
 80017e2:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80017e4:	000a      	movs	r2, r1
 80017e6:	40da      	lsrs	r2, r3
 80017e8:	4b0c      	ldr	r3, [pc, #48]	@ (800181c <HAL_RCC_ClockConfig+0x1f8>)
 80017ea:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80017ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001820 <HAL_RCC_ClockConfig+0x1fc>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	0018      	movs	r0, r3
 80017f2:	f7ff f98b 	bl	8000b0c <HAL_InitTick>
 80017f6:	0003      	movs	r3, r0
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	40022000 	.word	0x40022000
 8001804:	00001388 	.word	0x00001388
 8001808:	40021000 	.word	0x40021000
 800180c:	ffff84ff 	.word	0xffff84ff
 8001810:	fffff0ff 	.word	0xfffff0ff
 8001814:	ffff8fff 	.word	0xffff8fff
 8001818:	08003a2c 	.word	0x08003a2c
 800181c:	20000004 	.word	0x20000004
 8001820:	20000008 	.word	0x20000008

08001824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800182a:	4b1c      	ldr	r3, [pc, #112]	@ (800189c <HAL_RCC_GetSysClockFreq+0x78>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	2238      	movs	r2, #56	@ 0x38
 8001830:	4013      	ands	r3, r2
 8001832:	d10f      	bne.n	8001854 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001834:	4b19      	ldr	r3, [pc, #100]	@ (800189c <HAL_RCC_GetSysClockFreq+0x78>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	0adb      	lsrs	r3, r3, #11
 800183a:	2207      	movs	r2, #7
 800183c:	4013      	ands	r3, r2
 800183e:	2201      	movs	r2, #1
 8001840:	409a      	lsls	r2, r3
 8001842:	0013      	movs	r3, r2
 8001844:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001846:	6839      	ldr	r1, [r7, #0]
 8001848:	4815      	ldr	r0, [pc, #84]	@ (80018a0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800184a:	f7fe fc5d 	bl	8000108 <__udivsi3>
 800184e:	0003      	movs	r3, r0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	e01e      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <HAL_RCC_GetSysClockFreq+0x78>)
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	2238      	movs	r2, #56	@ 0x38
 800185a:	4013      	ands	r3, r2
 800185c:	2b08      	cmp	r3, #8
 800185e:	d102      	bne.n	8001866 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001860:	4b10      	ldr	r3, [pc, #64]	@ (80018a4 <HAL_RCC_GetSysClockFreq+0x80>)
 8001862:	607b      	str	r3, [r7, #4]
 8001864:	e015      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001866:	4b0d      	ldr	r3, [pc, #52]	@ (800189c <HAL_RCC_GetSysClockFreq+0x78>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2238      	movs	r2, #56	@ 0x38
 800186c:	4013      	ands	r3, r2
 800186e:	2b20      	cmp	r3, #32
 8001870:	d103      	bne.n	800187a <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001872:	2380      	movs	r3, #128	@ 0x80
 8001874:	021b      	lsls	r3, r3, #8
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	e00b      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_RCC_GetSysClockFreq+0x78>)
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2238      	movs	r2, #56	@ 0x38
 8001880:	4013      	ands	r3, r2
 8001882:	2b18      	cmp	r3, #24
 8001884:	d103      	bne.n	800188e <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001886:	23fa      	movs	r3, #250	@ 0xfa
 8001888:	01db      	lsls	r3, r3, #7
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	e001      	b.n	8001892 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800188e:	2300      	movs	r3, #0
 8001890:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001892:	687b      	ldr	r3, [r7, #4]
}
 8001894:	0018      	movs	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	b002      	add	sp, #8
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40021000 	.word	0x40021000
 80018a0:	02dc6c00 	.word	0x02dc6c00
 80018a4:	007a1200 	.word	0x007a1200

080018a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018ac:	f7ff ffba 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80018b0:	0001      	movs	r1, r0
 80018b2:	4b09      	ldr	r3, [pc, #36]	@ (80018d8 <HAL_RCC_GetHCLKFreq+0x30>)
 80018b4:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018b6:	0a1b      	lsrs	r3, r3, #8
 80018b8:	220f      	movs	r2, #15
 80018ba:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018bc:	4b07      	ldr	r3, [pc, #28]	@ (80018dc <HAL_RCC_GetHCLKFreq+0x34>)
 80018be:	0092      	lsls	r2, r2, #2
 80018c0:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80018c2:	221f      	movs	r2, #31
 80018c4:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80018c6:	000a      	movs	r2, r1
 80018c8:	40da      	lsrs	r2, r3
 80018ca:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <HAL_RCC_GetHCLKFreq+0x38>)
 80018cc:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <HAL_RCC_GetHCLKFreq+0x38>)
 80018d0:	681b      	ldr	r3, [r3, #0]
}
 80018d2:	0018      	movs	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08003a2c 	.word	0x08003a2c
 80018e0:	20000004 	.word	0x20000004

080018e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80018e8:	f7ff ffde 	bl	80018a8 <HAL_RCC_GetHCLKFreq>
 80018ec:	0001      	movs	r1, r0
 80018ee:	4b07      	ldr	r3, [pc, #28]	@ (800190c <HAL_RCC_GetPCLK1Freq+0x28>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	0b1b      	lsrs	r3, r3, #12
 80018f4:	2207      	movs	r2, #7
 80018f6:	401a      	ands	r2, r3
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80018fa:	0092      	lsls	r2, r2, #2
 80018fc:	58d3      	ldr	r3, [r2, r3]
 80018fe:	221f      	movs	r2, #31
 8001900:	4013      	ands	r3, r2
 8001902:	40d9      	lsrs	r1, r3
 8001904:	000b      	movs	r3, r1
}
 8001906:	0018      	movs	r0, r3
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	08003a6c 	.word	0x08003a6c

08001914 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800191c:	2313      	movs	r3, #19
 800191e:	18fb      	adds	r3, r7, r3
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001924:	2312      	movs	r3, #18
 8001926:	18fb      	adds	r3, r7, r3
 8001928:	2200      	movs	r2, #0
 800192a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2240      	movs	r2, #64	@ 0x40
 8001932:	4013      	ands	r3, r2
 8001934:	d100      	bne.n	8001938 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8001936:	e079      	b.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001938:	2011      	movs	r0, #17
 800193a:	183b      	adds	r3, r7, r0
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001940:	4b63      	ldr	r3, [pc, #396]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001942:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001944:	2380      	movs	r3, #128	@ 0x80
 8001946:	055b      	lsls	r3, r3, #21
 8001948:	4013      	ands	r3, r2
 800194a:	d110      	bne.n	800196e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800194c:	4b60      	ldr	r3, [pc, #384]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800194e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001950:	4b5f      	ldr	r3, [pc, #380]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001952:	2180      	movs	r1, #128	@ 0x80
 8001954:	0549      	lsls	r1, r1, #21
 8001956:	430a      	orrs	r2, r1
 8001958:	63da      	str	r2, [r3, #60]	@ 0x3c
 800195a:	4b5d      	ldr	r3, [pc, #372]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800195c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800195e:	2380      	movs	r3, #128	@ 0x80
 8001960:	055b      	lsls	r3, r3, #21
 8001962:	4013      	ands	r3, r2
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001968:	183b      	adds	r3, r7, r0
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800196e:	4b58      	ldr	r3, [pc, #352]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001970:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001972:	23c0      	movs	r3, #192	@ 0xc0
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4013      	ands	r3, r2
 8001978:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d019      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	429a      	cmp	r2, r3
 8001988:	d014      	beq.n	80019b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800198a:	4b51      	ldr	r3, [pc, #324]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800198c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800198e:	4a51      	ldr	r2, [pc, #324]	@ (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001990:	4013      	ands	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001994:	4b4e      	ldr	r3, [pc, #312]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001996:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001998:	4b4d      	ldr	r3, [pc, #308]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800199a:	2180      	movs	r1, #128	@ 0x80
 800199c:	0249      	lsls	r1, r1, #9
 800199e:	430a      	orrs	r2, r1
 80019a0:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019a2:	4b4b      	ldr	r3, [pc, #300]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80019a6:	4b4a      	ldr	r3, [pc, #296]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019a8:	494b      	ldr	r1, [pc, #300]	@ (8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80019aa:	400a      	ands	r2, r1
 80019ac:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80019ae:	4b48      	ldr	r3, [pc, #288]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2201      	movs	r2, #1
 80019b8:	4013      	ands	r3, r2
 80019ba:	d016      	beq.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019bc:	f7ff f902 	bl	8000bc4 <HAL_GetTick>
 80019c0:	0003      	movs	r3, r0
 80019c2:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80019c4:	e00c      	b.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c6:	f7ff f8fd 	bl	8000bc4 <HAL_GetTick>
 80019ca:	0002      	movs	r2, r0
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	4a42      	ldr	r2, [pc, #264]	@ (8001adc <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d904      	bls.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80019d6:	2313      	movs	r3, #19
 80019d8:	18fb      	adds	r3, r7, r3
 80019da:	2203      	movs	r2, #3
 80019dc:	701a      	strb	r2, [r3, #0]
          break;
 80019de:	e004      	b.n	80019ea <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80019e0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	2202      	movs	r2, #2
 80019e6:	4013      	ands	r3, r2
 80019e8:	d0ed      	beq.n	80019c6 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80019ea:	2313      	movs	r3, #19
 80019ec:	18fb      	adds	r3, r7, r3
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d10a      	bne.n	8001a0a <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80019f4:	4b36      	ldr	r3, [pc, #216]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80019f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019f8:	4a36      	ldr	r2, [pc, #216]	@ (8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80019fa:	4013      	ands	r3, r2
 80019fc:	0019      	movs	r1, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	699a      	ldr	r2, [r3, #24]
 8001a02:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a04:	430a      	orrs	r2, r1
 8001a06:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001a08:	e005      	b.n	8001a16 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a0a:	2312      	movs	r3, #18
 8001a0c:	18fb      	adds	r3, r7, r3
 8001a0e:	2213      	movs	r2, #19
 8001a10:	18ba      	adds	r2, r7, r2
 8001a12:	7812      	ldrb	r2, [r2, #0]
 8001a14:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a16:	2311      	movs	r3, #17
 8001a18:	18fb      	adds	r3, r7, r3
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d105      	bne.n	8001a2c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a20:	4b2b      	ldr	r3, [pc, #172]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a24:	4b2a      	ldr	r3, [pc, #168]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a26:	492e      	ldr	r1, [pc, #184]	@ (8001ae0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8001a28:	400a      	ands	r2, r1
 8001a2a:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	4013      	ands	r3, r2
 8001a34:	d009      	beq.n	8001a4a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a36:	4b26      	ldr	r3, [pc, #152]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	4393      	bics	r3, r2
 8001a3e:	0019      	movs	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689a      	ldr	r2, [r3, #8]
 8001a44:	4b22      	ldr	r3, [pc, #136]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a46:	430a      	orrs	r2, r1
 8001a48:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d009      	beq.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a54:	4b1e      	ldr	r3, [pc, #120]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	0019      	movs	r1, r3
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	68da      	ldr	r2, [r3, #12]
 8001a62:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a64:	430a      	orrs	r2, r1
 8001a66:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2220      	movs	r2, #32
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d008      	beq.n	8001a84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001a72:	4b17      	ldr	r3, [pc, #92]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	0899      	lsrs	r1, r3, #2
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	4b14      	ldr	r3, [pc, #80]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a80:	430a      	orrs	r2, r1
 8001a82:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	2204      	movs	r2, #4
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a92:	4a15      	ldr	r2, [pc, #84]	@ (8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001a94:	4013      	ands	r3, r2
 8001a96:	0019      	movs	r1, r3
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	691a      	ldr	r2, [r3, #16]
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2280      	movs	r2, #128	@ 0x80
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	d009      	beq.n	8001ac0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	22e0      	movs	r2, #224	@ 0xe0
 8001ab2:	4393      	bics	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685a      	ldr	r2, [r3, #4]
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]
  }
  return status;
 8001ac0:	2312      	movs	r3, #18
 8001ac2:	18fb      	adds	r3, r7, r3
 8001ac4:	781b      	ldrb	r3, [r3, #0]
}
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	b006      	add	sp, #24
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	46c0      	nop			@ (mov r8, r8)
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	fffffcff 	.word	0xfffffcff
 8001ad8:	fffeffff 	.word	0xfffeffff
 8001adc:	00001388 	.word	0x00001388
 8001ae0:	efffffff 	.word	0xefffffff
 8001ae4:	ffffcfff 	.word	0xffffcfff
 8001ae8:	ffff3fff 	.word	0xffff3fff

08001aec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b082      	sub	sp, #8
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d101      	bne.n	8001afe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e04a      	b.n	8001b94 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	223d      	movs	r2, #61	@ 0x3d
 8001b02:	5c9b      	ldrb	r3, [r3, r2]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d107      	bne.n	8001b1a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	223c      	movs	r2, #60	@ 0x3c
 8001b0e:	2100      	movs	r1, #0
 8001b10:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	0018      	movs	r0, r3
 8001b16:	f7fe febf 	bl	8000898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	223d      	movs	r2, #61	@ 0x3d
 8001b1e:	2102      	movs	r1, #2
 8001b20:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	0010      	movs	r0, r2
 8001b2e:	f000 fa81 	bl	8002034 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2248      	movs	r2, #72	@ 0x48
 8001b36:	2101      	movs	r1, #1
 8001b38:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	223e      	movs	r2, #62	@ 0x3e
 8001b3e:	2101      	movs	r1, #1
 8001b40:	5499      	strb	r1, [r3, r2]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	223f      	movs	r2, #63	@ 0x3f
 8001b46:	2101      	movs	r1, #1
 8001b48:	5499      	strb	r1, [r3, r2]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2240      	movs	r2, #64	@ 0x40
 8001b4e:	2101      	movs	r1, #1
 8001b50:	5499      	strb	r1, [r3, r2]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2241      	movs	r2, #65	@ 0x41
 8001b56:	2101      	movs	r1, #1
 8001b58:	5499      	strb	r1, [r3, r2]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2242      	movs	r2, #66	@ 0x42
 8001b5e:	2101      	movs	r1, #1
 8001b60:	5499      	strb	r1, [r3, r2]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2243      	movs	r2, #67	@ 0x43
 8001b66:	2101      	movs	r1, #1
 8001b68:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2244      	movs	r2, #68	@ 0x44
 8001b6e:	2101      	movs	r1, #1
 8001b70:	5499      	strb	r1, [r3, r2]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2245      	movs	r2, #69	@ 0x45
 8001b76:	2101      	movs	r1, #1
 8001b78:	5499      	strb	r1, [r3, r2]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2246      	movs	r2, #70	@ 0x46
 8001b7e:	2101      	movs	r1, #1
 8001b80:	5499      	strb	r1, [r3, r2]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2247      	movs	r2, #71	@ 0x47
 8001b86:	2101      	movs	r1, #1
 8001b88:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	223d      	movs	r2, #61	@ 0x3d
 8001b8e:	2101      	movs	r1, #1
 8001b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001b92:	2300      	movs	r3, #0
}
 8001b94:	0018      	movs	r0, r3
 8001b96:	46bd      	mov	sp, r7
 8001b98:	b002      	add	sp, #8
 8001b9a:	bd80      	pop	{r7, pc}

08001b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	223d      	movs	r2, #61	@ 0x3d
 8001ba8:	5c9b      	ldrb	r3, [r3, r2]
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d001      	beq.n	8001bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e037      	b.n	8001c24 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	223d      	movs	r2, #61	@ 0x3d
 8001bb8:	2102      	movs	r1, #2
 8001bba:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	68da      	ldr	r2, [r3, #12]
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a16      	ldr	r2, [pc, #88]	@ (8001c2c <HAL_TIM_Base_Start_IT+0x90>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d004      	beq.n	8001be0 <HAL_TIM_Base_Start_IT+0x44>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a15      	ldr	r2, [pc, #84]	@ (8001c30 <HAL_TIM_Base_Start_IT+0x94>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d116      	bne.n	8001c0e <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	4a13      	ldr	r2, [pc, #76]	@ (8001c34 <HAL_TIM_Base_Start_IT+0x98>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2b06      	cmp	r3, #6
 8001bf0:	d016      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x84>
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	2380      	movs	r3, #128	@ 0x80
 8001bf6:	025b      	lsls	r3, r3, #9
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d011      	beq.n	8001c20 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2101      	movs	r1, #1
 8001c08:	430a      	orrs	r2, r1
 8001c0a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0c:	e008      	b.n	8001c20 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2101      	movs	r1, #1
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]
 8001c1e:	e000      	b.n	8001c22 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c20:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001c22:	2300      	movs	r3, #0
}
 8001c24:	0018      	movs	r0, r3
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b004      	add	sp, #16
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40012c00 	.word	0x40012c00
 8001c30:	40000400 	.word	0x40000400
 8001c34:	00010007 	.word	0x00010007

08001c38 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	691b      	ldr	r3, [r3, #16]
 8001c4e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	2202      	movs	r2, #2
 8001c54:	4013      	ands	r3, r2
 8001c56:	d021      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d01d      	beq.n	8001c9c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2203      	movs	r2, #3
 8001c66:	4252      	negs	r2, r2
 8001c68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2201      	movs	r2, #1
 8001c6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	699b      	ldr	r3, [r3, #24]
 8001c76:	2203      	movs	r2, #3
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d004      	beq.n	8001c86 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	0018      	movs	r0, r3
 8001c80:	f000 f9c0 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001c84:	e007      	b.n	8001c96 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	0018      	movs	r0, r3
 8001c8a:	f000 f9b3 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	0018      	movs	r0, r3
 8001c92:	f000 f9bf 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	d022      	beq.n	8001cea <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2204      	movs	r2, #4
 8001ca8:	4013      	ands	r3, r2
 8001caa:	d01e      	beq.n	8001cea <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	2205      	movs	r2, #5
 8001cb2:	4252      	negs	r2, r2
 8001cb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	699a      	ldr	r2, [r3, #24]
 8001cc2:	23c0      	movs	r3, #192	@ 0xc0
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4013      	ands	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	0018      	movs	r0, r3
 8001cce:	f000 f999 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001cd2:	e007      	b.n	8001ce4 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f000 f98c 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 f998 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2208      	movs	r2, #8
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d021      	beq.n	8001d36 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	d01d      	beq.n	8001d36 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	2209      	movs	r2, #9
 8001d00:	4252      	negs	r2, r2
 8001d02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2204      	movs	r2, #4
 8001d08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2203      	movs	r2, #3
 8001d12:	4013      	ands	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f000 f973 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001d1e:	e007      	b.n	8001d30 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	0018      	movs	r0, r3
 8001d24:	f000 f966 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	0018      	movs	r0, r3
 8001d2c:	f000 f972 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	2210      	movs	r2, #16
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d022      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2210      	movs	r2, #16
 8001d42:	4013      	ands	r3, r2
 8001d44:	d01e      	beq.n	8001d84 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2211      	movs	r2, #17
 8001d4c:	4252      	negs	r2, r2
 8001d4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2208      	movs	r2, #8
 8001d54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	23c0      	movs	r3, #192	@ 0xc0
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	4013      	ands	r3, r2
 8001d62:	d004      	beq.n	8001d6e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	0018      	movs	r0, r3
 8001d68:	f000 f94c 	bl	8002004 <HAL_TIM_IC_CaptureCallback>
 8001d6c:	e007      	b.n	8001d7e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	0018      	movs	r0, r3
 8001d72:	f000 f93f 	bl	8001ff4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f000 f94b 	bl	8002014 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2201      	movs	r2, #1
 8001d88:	4013      	ands	r3, r2
 8001d8a:	d00c      	beq.n	8001da6 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2201      	movs	r2, #1
 8001d90:	4013      	ands	r3, r2
 8001d92:	d008      	beq.n	8001da6 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2202      	movs	r2, #2
 8001d9a:	4252      	negs	r2, r2
 8001d9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	0018      	movs	r0, r3
 8001da2:	f7fe fd3b 	bl	800081c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	2280      	movs	r2, #128	@ 0x80
 8001daa:	4013      	ands	r3, r2
 8001dac:	d104      	bne.n	8001db8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001dae:	68ba      	ldr	r2, [r7, #8]
 8001db0:	2380      	movs	r3, #128	@ 0x80
 8001db2:	019b      	lsls	r3, r3, #6
 8001db4:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001db6:	d00b      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2280      	movs	r2, #128	@ 0x80
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d007      	beq.n	8001dd0 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e40 <HAL_TIM_IRQHandler+0x208>)
 8001dc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f000 fab2 	bl	8002334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001dd0:	68ba      	ldr	r2, [r7, #8]
 8001dd2:	2380      	movs	r3, #128	@ 0x80
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	d00b      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2280      	movs	r2, #128	@ 0x80
 8001dde:	4013      	ands	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a17      	ldr	r2, [pc, #92]	@ (8001e44 <HAL_TIM_IRQHandler+0x20c>)
 8001de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	0018      	movs	r0, r3
 8001dee:	f000 faa9 	bl	8002344 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2240      	movs	r2, #64	@ 0x40
 8001df6:	4013      	ands	r3, r2
 8001df8:	d00c      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2240      	movs	r2, #64	@ 0x40
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d008      	beq.n	8001e14 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2241      	movs	r2, #65	@ 0x41
 8001e08:	4252      	negs	r2, r2
 8001e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	0018      	movs	r0, r3
 8001e10:	f000 f908 	bl	8002024 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	2220      	movs	r2, #32
 8001e18:	4013      	ands	r3, r2
 8001e1a:	d00c      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	4013      	ands	r3, r2
 8001e22:	d008      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2221      	movs	r2, #33	@ 0x21
 8001e2a:	4252      	negs	r2, r2
 8001e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	0018      	movs	r0, r3
 8001e32:	f000 fa77 	bl	8002324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	b004      	add	sp, #16
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	46c0      	nop			@ (mov r8, r8)
 8001e40:	ffffdf7f 	.word	0xffffdf7f
 8001e44:	fffffeff 	.word	0xfffffeff

08001e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	230f      	movs	r3, #15
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	223c      	movs	r2, #60	@ 0x3c
 8001e5e:	5c9b      	ldrb	r3, [r3, r2]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_TIM_ConfigClockSource+0x20>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e0bc      	b.n	8001fe2 <HAL_TIM_ConfigClockSource+0x19a>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	223c      	movs	r2, #60	@ 0x3c
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	223d      	movs	r2, #61	@ 0x3d
 8001e74:	2102      	movs	r1, #2
 8001e76:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	4a5a      	ldr	r2, [pc, #360]	@ (8001fec <HAL_TIM_ConfigClockSource+0x1a4>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	4a59      	ldr	r2, [pc, #356]	@ (8001ff0 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68ba      	ldr	r2, [r7, #8]
 8001e96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2280      	movs	r2, #128	@ 0x80
 8001e9e:	0192      	lsls	r2, r2, #6
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d040      	beq.n	8001f26 <HAL_TIM_ConfigClockSource+0xde>
 8001ea4:	2280      	movs	r2, #128	@ 0x80
 8001ea6:	0192      	lsls	r2, r2, #6
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d900      	bls.n	8001eae <HAL_TIM_ConfigClockSource+0x66>
 8001eac:	e088      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001eae:	2280      	movs	r2, #128	@ 0x80
 8001eb0:	0152      	lsls	r2, r2, #5
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d100      	bne.n	8001eb8 <HAL_TIM_ConfigClockSource+0x70>
 8001eb6:	e088      	b.n	8001fca <HAL_TIM_ConfigClockSource+0x182>
 8001eb8:	2280      	movs	r2, #128	@ 0x80
 8001eba:	0152      	lsls	r2, r2, #5
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d900      	bls.n	8001ec2 <HAL_TIM_ConfigClockSource+0x7a>
 8001ec0:	e07e      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001ec2:	2b70      	cmp	r3, #112	@ 0x70
 8001ec4:	d018      	beq.n	8001ef8 <HAL_TIM_ConfigClockSource+0xb0>
 8001ec6:	d900      	bls.n	8001eca <HAL_TIM_ConfigClockSource+0x82>
 8001ec8:	e07a      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001eca:	2b60      	cmp	r3, #96	@ 0x60
 8001ecc:	d04f      	beq.n	8001f6e <HAL_TIM_ConfigClockSource+0x126>
 8001ece:	d900      	bls.n	8001ed2 <HAL_TIM_ConfigClockSource+0x8a>
 8001ed0:	e076      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001ed2:	2b50      	cmp	r3, #80	@ 0x50
 8001ed4:	d03b      	beq.n	8001f4e <HAL_TIM_ConfigClockSource+0x106>
 8001ed6:	d900      	bls.n	8001eda <HAL_TIM_ConfigClockSource+0x92>
 8001ed8:	e072      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001eda:	2b40      	cmp	r3, #64	@ 0x40
 8001edc:	d057      	beq.n	8001f8e <HAL_TIM_ConfigClockSource+0x146>
 8001ede:	d900      	bls.n	8001ee2 <HAL_TIM_ConfigClockSource+0x9a>
 8001ee0:	e06e      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001ee2:	2b30      	cmp	r3, #48	@ 0x30
 8001ee4:	d063      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0x166>
 8001ee6:	d86b      	bhi.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001ee8:	2b20      	cmp	r3, #32
 8001eea:	d060      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0x166>
 8001eec:	d868      	bhi.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d05d      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0x166>
 8001ef2:	2b10      	cmp	r3, #16
 8001ef4:	d05b      	beq.n	8001fae <HAL_TIM_ConfigClockSource+0x166>
 8001ef6:	e063      	b.n	8001fc0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f08:	f000 f98a 	bl	8002220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	2277      	movs	r2, #119	@ 0x77
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	68ba      	ldr	r2, [r7, #8]
 8001f22:	609a      	str	r2, [r3, #8]
      break;
 8001f24:	e052      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001f36:	f000 f973 	bl	8002220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689a      	ldr	r2, [r3, #8]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2180      	movs	r1, #128	@ 0x80
 8001f46:	01c9      	lsls	r1, r1, #7
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	609a      	str	r2, [r3, #8]
      break;
 8001f4c:	e03e      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f5a:	001a      	movs	r2, r3
 8001f5c:	f000 f8e4 	bl	8002128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	2150      	movs	r1, #80	@ 0x50
 8001f66:	0018      	movs	r0, r3
 8001f68:	f000 f93e 	bl	80021e8 <TIM_ITRx_SetConfig>
      break;
 8001f6c:	e02e      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001f7a:	001a      	movs	r2, r3
 8001f7c:	f000 f902 	bl	8002184 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2160      	movs	r1, #96	@ 0x60
 8001f86:	0018      	movs	r0, r3
 8001f88:	f000 f92e 	bl	80021e8 <TIM_ITRx_SetConfig>
      break;
 8001f8c:	e01e      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f9a:	001a      	movs	r2, r3
 8001f9c:	f000 f8c4 	bl	8002128 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2140      	movs	r1, #64	@ 0x40
 8001fa6:	0018      	movs	r0, r3
 8001fa8:	f000 f91e 	bl	80021e8 <TIM_ITRx_SetConfig>
      break;
 8001fac:	e00e      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	0010      	movs	r0, r2
 8001fba:	f000 f915 	bl	80021e8 <TIM_ITRx_SetConfig>
      break;
 8001fbe:	e005      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001fc0:	230f      	movs	r3, #15
 8001fc2:	18fb      	adds	r3, r7, r3
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	701a      	strb	r2, [r3, #0]
      break;
 8001fc8:	e000      	b.n	8001fcc <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001fca:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	223d      	movs	r2, #61	@ 0x3d
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	223c      	movs	r2, #60	@ 0x3c
 8001fd8:	2100      	movs	r1, #0
 8001fda:	5499      	strb	r1, [r3, r2]

  return status;
 8001fdc:	230f      	movs	r3, #15
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	781b      	ldrb	r3, [r3, #0]
}
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	b004      	add	sp, #16
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	46c0      	nop			@ (mov r8, r8)
 8001fec:	ffceff88 	.word	0xffceff88
 8001ff0:	ffff00ff 	.word	0xffff00ff

08001ff4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ffc:	46c0      	nop			@ (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	b002      	add	sp, #8
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800200c:	46c0      	nop			@ (mov r8, r8)
 800200e:	46bd      	mov	sp, r7
 8002010:	b002      	add	sp, #8
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b002      	add	sp, #8
 8002022:	bd80      	pop	{r7, pc}

08002024 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800202c:	46c0      	nop			@ (mov r8, r8)
 800202e:	46bd      	mov	sp, r7
 8002030:	b002      	add	sp, #8
 8002032:	bd80      	pop	{r7, pc}

08002034 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	4a32      	ldr	r2, [pc, #200]	@ (8002110 <TIM_Base_SetConfig+0xdc>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d003      	beq.n	8002054 <TIM_Base_SetConfig+0x20>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a31      	ldr	r2, [pc, #196]	@ (8002114 <TIM_Base_SetConfig+0xe0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d108      	bne.n	8002066 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2270      	movs	r2, #112	@ 0x70
 8002058:	4393      	bics	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	4313      	orrs	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a29      	ldr	r2, [pc, #164]	@ (8002110 <TIM_Base_SetConfig+0xdc>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00f      	beq.n	800208e <TIM_Base_SetConfig+0x5a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a28      	ldr	r2, [pc, #160]	@ (8002114 <TIM_Base_SetConfig+0xe0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d00b      	beq.n	800208e <TIM_Base_SetConfig+0x5a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a27      	ldr	r2, [pc, #156]	@ (8002118 <TIM_Base_SetConfig+0xe4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d007      	beq.n	800208e <TIM_Base_SetConfig+0x5a>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a26      	ldr	r2, [pc, #152]	@ (800211c <TIM_Base_SetConfig+0xe8>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d003      	beq.n	800208e <TIM_Base_SetConfig+0x5a>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a25      	ldr	r2, [pc, #148]	@ (8002120 <TIM_Base_SetConfig+0xec>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d108      	bne.n	80020a0 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	4a24      	ldr	r2, [pc, #144]	@ (8002124 <TIM_Base_SetConfig+0xf0>)
 8002092:	4013      	ands	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	4313      	orrs	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2280      	movs	r2, #128	@ 0x80
 80020a4:	4393      	bics	r3, r2
 80020a6:	001a      	movs	r2, r3
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	695b      	ldr	r3, [r3, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a11      	ldr	r2, [pc, #68]	@ (8002110 <TIM_Base_SetConfig+0xdc>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0xaa>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a12      	ldr	r2, [pc, #72]	@ (800211c <TIM_Base_SetConfig+0xe8>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0xaa>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a11      	ldr	r2, [pc, #68]	@ (8002120 <TIM_Base_SetConfig+0xec>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d103      	bne.n	80020e6 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691a      	ldr	r2, [r3, #16]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	2201      	movs	r2, #1
 80020f2:	4013      	ands	r3, r2
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d106      	bne.n	8002106 <TIM_Base_SetConfig+0xd2>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2201      	movs	r2, #1
 80020fe:	4393      	bics	r3, r2
 8002100:	001a      	movs	r2, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	611a      	str	r2, [r3, #16]
  }
}
 8002106:	46c0      	nop			@ (mov r8, r8)
 8002108:	46bd      	mov	sp, r7
 800210a:	b004      	add	sp, #16
 800210c:	bd80      	pop	{r7, pc}
 800210e:	46c0      	nop			@ (mov r8, r8)
 8002110:	40012c00 	.word	0x40012c00
 8002114:	40000400 	.word	0x40000400
 8002118:	40002000 	.word	0x40002000
 800211c:	40014400 	.word	0x40014400
 8002120:	40014800 	.word	0x40014800
 8002124:	fffffcff 	.word	0xfffffcff

08002128 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6a1b      	ldr	r3, [r3, #32]
 8002138:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	2201      	movs	r2, #1
 8002140:	4393      	bics	r3, r2
 8002142:	001a      	movs	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	699b      	ldr	r3, [r3, #24]
 800214c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	22f0      	movs	r2, #240	@ 0xf0
 8002152:	4393      	bics	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	011b      	lsls	r3, r3, #4
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	220a      	movs	r2, #10
 8002164:	4393      	bics	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002168:	697a      	ldr	r2, [r7, #20]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4313      	orrs	r3, r2
 800216e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	697a      	ldr	r2, [r7, #20]
 800217a:	621a      	str	r2, [r3, #32]
}
 800217c:	46c0      	nop			@ (mov r8, r8)
 800217e:	46bd      	mov	sp, r7
 8002180:	b006      	add	sp, #24
 8002182:	bd80      	pop	{r7, pc}

08002184 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b086      	sub	sp, #24
 8002188:	af00      	add	r7, sp, #0
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	6a1b      	ldr	r3, [r3, #32]
 8002194:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	2210      	movs	r2, #16
 800219c:	4393      	bics	r3, r2
 800219e:	001a      	movs	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	4a0d      	ldr	r2, [pc, #52]	@ (80021e4 <TIM_TI2_ConfigInputStage+0x60>)
 80021ae:	4013      	ands	r3, r2
 80021b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	031b      	lsls	r3, r3, #12
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	22a0      	movs	r2, #160	@ 0xa0
 80021c0:	4393      	bics	r3, r2
 80021c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	697a      	ldr	r2, [r7, #20]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	697a      	ldr	r2, [r7, #20]
 80021d8:	621a      	str	r2, [r3, #32]
}
 80021da:	46c0      	nop			@ (mov r8, r8)
 80021dc:	46bd      	mov	sp, r7
 80021de:	b006      	add	sp, #24
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	ffff0fff 	.word	0xffff0fff

080021e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b084      	sub	sp, #16
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a08      	ldr	r2, [pc, #32]	@ (800221c <TIM_ITRx_SetConfig+0x34>)
 80021fc:	4013      	ands	r3, r2
 80021fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	2207      	movs	r2, #7
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	68fa      	ldr	r2, [r7, #12]
 8002210:	609a      	str	r2, [r3, #8]
}
 8002212:	46c0      	nop			@ (mov r8, r8)
 8002214:	46bd      	mov	sp, r7
 8002216:	b004      	add	sp, #16
 8002218:	bd80      	pop	{r7, pc}
 800221a:	46c0      	nop			@ (mov r8, r8)
 800221c:	ffcfff8f 	.word	0xffcfff8f

08002220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
 800222c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	4a09      	ldr	r2, [pc, #36]	@ (800225c <TIM_ETR_SetConfig+0x3c>)
 8002238:	4013      	ands	r3, r2
 800223a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	021a      	lsls	r2, r3, #8
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	431a      	orrs	r2, r3
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	4313      	orrs	r3, r2
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	4313      	orrs	r3, r2
 800224c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	609a      	str	r2, [r3, #8]
}
 8002254:	46c0      	nop			@ (mov r8, r8)
 8002256:	46bd      	mov	sp, r7
 8002258:	b006      	add	sp, #24
 800225a:	bd80      	pop	{r7, pc}
 800225c:	ffff00ff 	.word	0xffff00ff

08002260 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	223c      	movs	r2, #60	@ 0x3c
 800226e:	5c9b      	ldrb	r3, [r3, r2]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d101      	bne.n	8002278 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002274:	2302      	movs	r3, #2
 8002276:	e04a      	b.n	800230e <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	223c      	movs	r2, #60	@ 0x3c
 800227c:	2101      	movs	r1, #1
 800227e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	223d      	movs	r2, #61	@ 0x3d
 8002284:	2102      	movs	r1, #2
 8002286:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a1e      	ldr	r2, [pc, #120]	@ (8002318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d108      	bne.n	80022b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	4a1d      	ldr	r2, [pc, #116]	@ (800231c <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80022a6:	4013      	ands	r3, r2
 80022a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	68fa      	ldr	r2, [r7, #12]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2270      	movs	r2, #112	@ 0x70
 80022b8:	4393      	bics	r3, r2
 80022ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68fa      	ldr	r2, [r7, #12]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a11      	ldr	r2, [pc, #68]	@ (8002318 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d004      	beq.n	80022e2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a10      	ldr	r2, [pc, #64]	@ (8002320 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d10c      	bne.n	80022fc <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	4393      	bics	r3, r2
 80022e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	68ba      	ldr	r2, [r7, #8]
 80022fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	223d      	movs	r2, #61	@ 0x3d
 8002300:	2101      	movs	r1, #1
 8002302:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	223c      	movs	r2, #60	@ 0x3c
 8002308:	2100      	movs	r1, #0
 800230a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800230c:	2300      	movs	r3, #0
}
 800230e:	0018      	movs	r0, r3
 8002310:	46bd      	mov	sp, r7
 8002312:	b004      	add	sp, #16
 8002314:	bd80      	pop	{r7, pc}
 8002316:	46c0      	nop			@ (mov r8, r8)
 8002318:	40012c00 	.word	0x40012c00
 800231c:	ff0fffff 	.word	0xff0fffff
 8002320:	40000400 	.word	0x40000400

08002324 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800232c:	46c0      	nop			@ (mov r8, r8)
 800232e:	46bd      	mov	sp, r7
 8002330:	b002      	add	sp, #8
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800233c:	46c0      	nop			@ (mov r8, r8)
 800233e:	46bd      	mov	sp, r7
 8002340:	b002      	add	sp, #8
 8002342:	bd80      	pop	{r7, pc}

08002344 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800234c:	46c0      	nop			@ (mov r8, r8)
 800234e:	46bd      	mov	sp, r7
 8002350:	b002      	add	sp, #8
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e04e      	b.n	8002404 <HAL_HalfDuplex_Init+0xb0>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2288      	movs	r2, #136	@ 0x88
 800236a:	589b      	ldr	r3, [r3, r2]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d107      	bne.n	8002380 <HAL_HalfDuplex_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2284      	movs	r2, #132	@ 0x84
 8002374:	2100      	movs	r1, #0
 8002376:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	0018      	movs	r0, r3
 800237c:	f7fe fac8 	bl	8000910 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2288      	movs	r2, #136	@ 0x88
 8002384:	2124      	movs	r1, #36	@ 0x24
 8002386:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2101      	movs	r1, #1
 8002394:	438a      	bics	r2, r1
 8002396:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_HalfDuplex_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	0018      	movs	r0, r3
 80023a4:	f000 fdbc 	bl	8002f20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	0018      	movs	r0, r3
 80023ac:	f000 fc3a 	bl	8002c24 <UART_SetConfig>
 80023b0:	0003      	movs	r3, r0
 80023b2:	2b01      	cmp	r3, #1
 80023b4:	d101      	bne.n	80023ba <HAL_HalfDuplex_Init+0x66>
  {
    return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e024      	b.n	8002404 <HAL_HalfDuplex_Init+0xb0>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	685a      	ldr	r2, [r3, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4911      	ldr	r1, [pc, #68]	@ (800240c <HAL_HalfDuplex_Init+0xb8>)
 80023c6:	400a      	ands	r2, r1
 80023c8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2122      	movs	r1, #34	@ 0x22
 80023d6:	438a      	bics	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2108      	movs	r1, #8
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2101      	movs	r1, #1
 80023f6:	430a      	orrs	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 fe43 	bl	8003088 <UART_CheckIdleState>
 8002402:	0003      	movs	r3, r0
}
 8002404:	0018      	movs	r0, r3
 8002406:	46bd      	mov	sp, r7
 8002408:	b002      	add	sp, #8
 800240a:	bd80      	pop	{r7, pc}
 800240c:	ffffb7ff 	.word	0xffffb7ff

08002410 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08c      	sub	sp, #48	@ 0x30
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	1dbb      	adds	r3, r7, #6
 800241c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2288      	movs	r2, #136	@ 0x88
 8002422:	589b      	ldr	r3, [r3, r2]
 8002424:	2b20      	cmp	r3, #32
 8002426:	d000      	beq.n	800242a <HAL_UART_Transmit_IT+0x1a>
 8002428:	e08d      	b.n	8002546 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d003      	beq.n	8002438 <HAL_UART_Transmit_IT+0x28>
 8002430:	1dbb      	adds	r3, r7, #6
 8002432:	881b      	ldrh	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e085      	b.n	8002548 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689a      	ldr	r2, [r3, #8]
 8002440:	2380      	movs	r3, #128	@ 0x80
 8002442:	015b      	lsls	r3, r3, #5
 8002444:	429a      	cmp	r2, r3
 8002446:	d109      	bne.n	800245c <HAL_UART_Transmit_IT+0x4c>
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d105      	bne.n	800245c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	2201      	movs	r2, #1
 8002454:	4013      	ands	r3, r2
 8002456:	d001      	beq.n	800245c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e075      	b.n	8002548 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	68ba      	ldr	r2, [r7, #8]
 8002460:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1dba      	adds	r2, r7, #6
 8002466:	2154      	movs	r1, #84	@ 0x54
 8002468:	8812      	ldrh	r2, [r2, #0]
 800246a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	1dba      	adds	r2, r7, #6
 8002470:	2156      	movs	r1, #86	@ 0x56
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2200      	movs	r2, #0
 800247a:	679a      	str	r2, [r3, #120]	@ 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2290      	movs	r2, #144	@ 0x90
 8002480:	2100      	movs	r1, #0
 8002482:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2288      	movs	r2, #136	@ 0x88
 8002488:	2121      	movs	r1, #33	@ 0x21
 800248a:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002490:	2380      	movs	r3, #128	@ 0x80
 8002492:	059b      	lsls	r3, r3, #22
 8002494:	429a      	cmp	r2, r3
 8002496:	d12a      	bne.n	80024ee <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	2380      	movs	r3, #128	@ 0x80
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	429a      	cmp	r2, r3
 80024a2:	d107      	bne.n	80024b4 <HAL_UART_Transmit_IT+0xa4>
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d103      	bne.n	80024b4 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_UART_Transmit_IT+0x140>)
 80024b0:	679a      	str	r2, [r3, #120]	@ 0x78
 80024b2:	e002      	b.n	80024ba <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4a27      	ldr	r2, [pc, #156]	@ (8002554 <HAL_UART_Transmit_IT+0x144>)
 80024b8:	679a      	str	r2, [r3, #120]	@ 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80024ba:	f3ef 8310 	mrs	r3, PRIMASK
 80024be:	61fb      	str	r3, [r7, #28]
  return(result);
 80024c0:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80024c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024c4:	2301      	movs	r3, #1
 80024c6:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024c8:	6a3b      	ldr	r3, [r7, #32]
 80024ca:	f383 8810 	msr	PRIMASK, r3
}
 80024ce:	46c0      	nop			@ (mov r8, r8)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2180      	movs	r1, #128	@ 0x80
 80024dc:	0409      	lsls	r1, r1, #16
 80024de:	430a      	orrs	r2, r1
 80024e0:	609a      	str	r2, [r3, #8]
 80024e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e4:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80024e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024e8:	f383 8810 	msr	PRIMASK, r3
}
 80024ec:	e029      	b.n	8002542 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689a      	ldr	r2, [r3, #8]
 80024f2:	2380      	movs	r3, #128	@ 0x80
 80024f4:	015b      	lsls	r3, r3, #5
 80024f6:	429a      	cmp	r2, r3
 80024f8:	d107      	bne.n	800250a <HAL_UART_Transmit_IT+0xfa>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d103      	bne.n	800250a <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a14      	ldr	r2, [pc, #80]	@ (8002558 <HAL_UART_Transmit_IT+0x148>)
 8002506:	679a      	str	r2, [r3, #120]	@ 0x78
 8002508:	e002      	b.n	8002510 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4a13      	ldr	r2, [pc, #76]	@ (800255c <HAL_UART_Transmit_IT+0x14c>)
 800250e:	679a      	str	r2, [r3, #120]	@ 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002510:	f3ef 8310 	mrs	r3, PRIMASK
 8002514:	613b      	str	r3, [r7, #16]
  return(result);
 8002516:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8002518:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800251a:	2301      	movs	r3, #1
 800251c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f383 8810 	msr	PRIMASK, r3
}
 8002524:	46c0      	nop			@ (mov r8, r8)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2180      	movs	r1, #128	@ 0x80
 8002532:	430a      	orrs	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002538:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f383 8810 	msr	PRIMASK, r3
}
 8002540:	46c0      	nop			@ (mov r8, r8)
    }

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	0018      	movs	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	b00c      	add	sp, #48	@ 0x30
 800254e:	bd80      	pop	{r7, pc}
 8002550:	0800360d 	.word	0x0800360d
 8002554:	08003521 	.word	0x08003521
 8002558:	08003463 	.word	0x08003463
 800255c:	080033af 	.word	0x080033af

08002560 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002560:	b5b0      	push	{r4, r5, r7, lr}
 8002562:	b0aa      	sub	sp, #168	@ 0xa8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	22a4      	movs	r2, #164	@ 0xa4
 8002570:	18b9      	adds	r1, r7, r2
 8002572:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	20a0      	movs	r0, #160	@ 0xa0
 800257c:	1839      	adds	r1, r7, r0
 800257e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	249c      	movs	r4, #156	@ 0x9c
 8002588:	1939      	adds	r1, r7, r4
 800258a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800258c:	0011      	movs	r1, r2
 800258e:	18bb      	adds	r3, r7, r2
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4aa2      	ldr	r2, [pc, #648]	@ (800281c <HAL_UART_IRQHandler+0x2bc>)
 8002594:	4013      	ands	r3, r2
 8002596:	2298      	movs	r2, #152	@ 0x98
 8002598:	18bd      	adds	r5, r7, r2
 800259a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 800259c:	18bb      	adds	r3, r7, r2
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d11a      	bne.n	80025da <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80025a4:	187b      	adds	r3, r7, r1
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2220      	movs	r2, #32
 80025aa:	4013      	ands	r3, r2
 80025ac:	d015      	beq.n	80025da <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80025ae:	183b      	adds	r3, r7, r0
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2220      	movs	r2, #32
 80025b4:	4013      	ands	r3, r2
 80025b6:	d105      	bne.n	80025c4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	2380      	movs	r3, #128	@ 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	d00a      	beq.n	80025da <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d100      	bne.n	80025ce <HAL_UART_IRQHandler+0x6e>
 80025cc:	e2fb      	b.n	8002bc6 <HAL_UART_IRQHandler+0x666>
      {
        huart->RxISR(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	0010      	movs	r0, r2
 80025d6:	4798      	blx	r3
      }
      return;
 80025d8:	e2f5      	b.n	8002bc6 <HAL_UART_IRQHandler+0x666>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80025da:	2398      	movs	r3, #152	@ 0x98
 80025dc:	18fb      	adds	r3, r7, r3
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d100      	bne.n	80025e6 <HAL_UART_IRQHandler+0x86>
 80025e4:	e122      	b.n	800282c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80025e6:	239c      	movs	r3, #156	@ 0x9c
 80025e8:	18fb      	adds	r3, r7, r3
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a8c      	ldr	r2, [pc, #560]	@ (8002820 <HAL_UART_IRQHandler+0x2c0>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	d106      	bne.n	8002600 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80025f2:	23a0      	movs	r3, #160	@ 0xa0
 80025f4:	18fb      	adds	r3, r7, r3
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a8a      	ldr	r2, [pc, #552]	@ (8002824 <HAL_UART_IRQHandler+0x2c4>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	d100      	bne.n	8002600 <HAL_UART_IRQHandler+0xa0>
 80025fe:	e115      	b.n	800282c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002600:	23a4      	movs	r3, #164	@ 0xa4
 8002602:	18fb      	adds	r3, r7, r3
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2201      	movs	r2, #1
 8002608:	4013      	ands	r3, r2
 800260a:	d012      	beq.n	8002632 <HAL_UART_IRQHandler+0xd2>
 800260c:	23a0      	movs	r3, #160	@ 0xa0
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	2380      	movs	r3, #128	@ 0x80
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	4013      	ands	r3, r2
 8002618:	d00b      	beq.n	8002632 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2201      	movs	r2, #1
 8002620:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2290      	movs	r2, #144	@ 0x90
 8002626:	589b      	ldr	r3, [r3, r2]
 8002628:	2201      	movs	r2, #1
 800262a:	431a      	orrs	r2, r3
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2190      	movs	r1, #144	@ 0x90
 8002630:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002632:	23a4      	movs	r3, #164	@ 0xa4
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2202      	movs	r2, #2
 800263a:	4013      	ands	r3, r2
 800263c:	d011      	beq.n	8002662 <HAL_UART_IRQHandler+0x102>
 800263e:	239c      	movs	r3, #156	@ 0x9c
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	d00b      	beq.n	8002662 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2202      	movs	r2, #2
 8002650:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2290      	movs	r2, #144	@ 0x90
 8002656:	589b      	ldr	r3, [r3, r2]
 8002658:	2204      	movs	r2, #4
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2190      	movs	r1, #144	@ 0x90
 8002660:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002662:	23a4      	movs	r3, #164	@ 0xa4
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2204      	movs	r2, #4
 800266a:	4013      	ands	r3, r2
 800266c:	d011      	beq.n	8002692 <HAL_UART_IRQHandler+0x132>
 800266e:	239c      	movs	r3, #156	@ 0x9c
 8002670:	18fb      	adds	r3, r7, r3
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2201      	movs	r2, #1
 8002676:	4013      	ands	r3, r2
 8002678:	d00b      	beq.n	8002692 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	2204      	movs	r2, #4
 8002680:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2290      	movs	r2, #144	@ 0x90
 8002686:	589b      	ldr	r3, [r3, r2]
 8002688:	2202      	movs	r2, #2
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2190      	movs	r1, #144	@ 0x90
 8002690:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002692:	23a4      	movs	r3, #164	@ 0xa4
 8002694:	18fb      	adds	r3, r7, r3
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2208      	movs	r2, #8
 800269a:	4013      	ands	r3, r2
 800269c:	d017      	beq.n	80026ce <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800269e:	23a0      	movs	r3, #160	@ 0xa0
 80026a0:	18fb      	adds	r3, r7, r3
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2220      	movs	r2, #32
 80026a6:	4013      	ands	r3, r2
 80026a8:	d105      	bne.n	80026b6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80026aa:	239c      	movs	r3, #156	@ 0x9c
 80026ac:	18fb      	adds	r3, r7, r3
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a5b      	ldr	r2, [pc, #364]	@ (8002820 <HAL_UART_IRQHandler+0x2c0>)
 80026b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80026b4:	d00b      	beq.n	80026ce <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2208      	movs	r2, #8
 80026bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2290      	movs	r2, #144	@ 0x90
 80026c2:	589b      	ldr	r3, [r3, r2]
 80026c4:	2208      	movs	r2, #8
 80026c6:	431a      	orrs	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2190      	movs	r1, #144	@ 0x90
 80026cc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80026ce:	23a4      	movs	r3, #164	@ 0xa4
 80026d0:	18fb      	adds	r3, r7, r3
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	2380      	movs	r3, #128	@ 0x80
 80026d6:	011b      	lsls	r3, r3, #4
 80026d8:	4013      	ands	r3, r2
 80026da:	d013      	beq.n	8002704 <HAL_UART_IRQHandler+0x1a4>
 80026dc:	23a0      	movs	r3, #160	@ 0xa0
 80026de:	18fb      	adds	r3, r7, r3
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	2380      	movs	r3, #128	@ 0x80
 80026e4:	04db      	lsls	r3, r3, #19
 80026e6:	4013      	ands	r3, r2
 80026e8:	d00c      	beq.n	8002704 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2280      	movs	r2, #128	@ 0x80
 80026f0:	0112      	lsls	r2, r2, #4
 80026f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2290      	movs	r2, #144	@ 0x90
 80026f8:	589b      	ldr	r3, [r3, r2]
 80026fa:	2220      	movs	r2, #32
 80026fc:	431a      	orrs	r2, r3
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2190      	movs	r1, #144	@ 0x90
 8002702:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2290      	movs	r2, #144	@ 0x90
 8002708:	589b      	ldr	r3, [r3, r2]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d100      	bne.n	8002710 <HAL_UART_IRQHandler+0x1b0>
 800270e:	e25c      	b.n	8002bca <HAL_UART_IRQHandler+0x66a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002710:	23a4      	movs	r3, #164	@ 0xa4
 8002712:	18fb      	adds	r3, r7, r3
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2220      	movs	r2, #32
 8002718:	4013      	ands	r3, r2
 800271a:	d015      	beq.n	8002748 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800271c:	23a0      	movs	r3, #160	@ 0xa0
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2220      	movs	r2, #32
 8002724:	4013      	ands	r3, r2
 8002726:	d106      	bne.n	8002736 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002728:	239c      	movs	r3, #156	@ 0x9c
 800272a:	18fb      	adds	r3, r7, r3
 800272c:	681a      	ldr	r2, [r3, #0]
 800272e:	2380      	movs	r3, #128	@ 0x80
 8002730:	055b      	lsls	r3, r3, #21
 8002732:	4013      	ands	r3, r2
 8002734:	d008      	beq.n	8002748 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800273a:	2b00      	cmp	r3, #0
 800273c:	d004      	beq.n	8002748 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	0010      	movs	r0, r2
 8002746:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2290      	movs	r2, #144	@ 0x90
 800274c:	589b      	ldr	r3, [r3, r2]
 800274e:	2194      	movs	r1, #148	@ 0x94
 8002750:	187a      	adds	r2, r7, r1
 8002752:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	2240      	movs	r2, #64	@ 0x40
 800275c:	4013      	ands	r3, r2
 800275e:	2b40      	cmp	r3, #64	@ 0x40
 8002760:	d004      	beq.n	800276c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002762:	187b      	adds	r3, r7, r1
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2228      	movs	r2, #40	@ 0x28
 8002768:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800276a:	d04c      	beq.n	8002806 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	0018      	movs	r0, r3
 8002770:	f000 fda4 	bl	80032bc <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	2240      	movs	r2, #64	@ 0x40
 800277c:	4013      	ands	r3, r2
 800277e:	2b40      	cmp	r3, #64	@ 0x40
 8002780:	d13c      	bne.n	80027fc <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002782:	f3ef 8310 	mrs	r3, PRIMASK
 8002786:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8002788:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800278a:	2090      	movs	r0, #144	@ 0x90
 800278c:	183a      	adds	r2, r7, r0
 800278e:	6013      	str	r3, [r2, #0]
 8002790:	2301      	movs	r3, #1
 8002792:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002794:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002796:	f383 8810 	msr	PRIMASK, r3
}
 800279a:	46c0      	nop			@ (mov r8, r8)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	689a      	ldr	r2, [r3, #8]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2140      	movs	r1, #64	@ 0x40
 80027a8:	438a      	bics	r2, r1
 80027aa:	609a      	str	r2, [r3, #8]
 80027ac:	183b      	adds	r3, r7, r0
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80027b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80027b4:	f383 8810 	msr	PRIMASK, r3
}
 80027b8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2280      	movs	r2, #128	@ 0x80
 80027be:	589b      	ldr	r3, [r3, r2]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d016      	beq.n	80027f2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2280      	movs	r2, #128	@ 0x80
 80027c8:	589b      	ldr	r3, [r3, r2]
 80027ca:	4a17      	ldr	r2, [pc, #92]	@ (8002828 <HAL_UART_IRQHandler+0x2c8>)
 80027cc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2280      	movs	r2, #128	@ 0x80
 80027d2:	589b      	ldr	r3, [r3, r2]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7fe fb3f 	bl	8000e58 <HAL_DMA_Abort_IT>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d01c      	beq.n	8002818 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	589b      	ldr	r3, [r3, r2]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	2180      	movs	r1, #128	@ 0x80
 80027ea:	5852      	ldr	r2, [r2, r1]
 80027ec:	0010      	movs	r0, r2
 80027ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027f0:	e012      	b.n	8002818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	0018      	movs	r0, r3
 80027f6:	f000 fa01 	bl	8002bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80027fa:	e00d      	b.n	8002818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	0018      	movs	r0, r3
 8002800:	f000 f9fc 	bl	8002bfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002804:	e008      	b.n	8002818 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	0018      	movs	r0, r3
 800280a:	f000 f9f7 	bl	8002bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2290      	movs	r2, #144	@ 0x90
 8002812:	2100      	movs	r1, #0
 8002814:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002816:	e1d8      	b.n	8002bca <HAL_UART_IRQHandler+0x66a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002818:	46c0      	nop			@ (mov r8, r8)
    return;
 800281a:	e1d6      	b.n	8002bca <HAL_UART_IRQHandler+0x66a>
 800281c:	0000080f 	.word	0x0000080f
 8002820:	10000001 	.word	0x10000001
 8002824:	04000120 	.word	0x04000120
 8002828:	08003389 	.word	0x08003389

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002830:	2b01      	cmp	r3, #1
 8002832:	d000      	beq.n	8002836 <HAL_UART_IRQHandler+0x2d6>
 8002834:	e15d      	b.n	8002af2 <HAL_UART_IRQHandler+0x592>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002836:	23a4      	movs	r3, #164	@ 0xa4
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	2210      	movs	r2, #16
 800283e:	4013      	ands	r3, r2
 8002840:	d100      	bne.n	8002844 <HAL_UART_IRQHandler+0x2e4>
 8002842:	e156      	b.n	8002af2 <HAL_UART_IRQHandler+0x592>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002844:	23a0      	movs	r3, #160	@ 0xa0
 8002846:	18fb      	adds	r3, r7, r3
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2210      	movs	r2, #16
 800284c:	4013      	ands	r3, r2
 800284e:	d100      	bne.n	8002852 <HAL_UART_IRQHandler+0x2f2>
 8002850:	e14f      	b.n	8002af2 <HAL_UART_IRQHandler+0x592>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	2210      	movs	r2, #16
 8002858:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	2240      	movs	r2, #64	@ 0x40
 8002862:	4013      	ands	r3, r2
 8002864:	2b40      	cmp	r3, #64	@ 0x40
 8002866:	d000      	beq.n	800286a <HAL_UART_IRQHandler+0x30a>
 8002868:	e0c3      	b.n	80029f2 <HAL_UART_IRQHandler+0x492>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2280      	movs	r2, #128	@ 0x80
 800286e:	589b      	ldr	r3, [r3, r2]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	685a      	ldr	r2, [r3, #4]
 8002874:	217e      	movs	r1, #126	@ 0x7e
 8002876:	187b      	adds	r3, r7, r1
 8002878:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800287a:	187b      	adds	r3, r7, r1
 800287c:	881b      	ldrh	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d100      	bne.n	8002884 <HAL_UART_IRQHandler+0x324>
 8002882:	e097      	b.n	80029b4 <HAL_UART_IRQHandler+0x454>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	225c      	movs	r2, #92	@ 0x5c
 8002888:	5a9b      	ldrh	r3, [r3, r2]
 800288a:	187a      	adds	r2, r7, r1
 800288c:	8812      	ldrh	r2, [r2, #0]
 800288e:	429a      	cmp	r2, r3
 8002890:	d300      	bcc.n	8002894 <HAL_UART_IRQHandler+0x334>
 8002892:	e08f      	b.n	80029b4 <HAL_UART_IRQHandler+0x454>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	187a      	adds	r2, r7, r1
 8002898:	215e      	movs	r1, #94	@ 0x5e
 800289a:	8812      	ldrh	r2, [r2, #0]
 800289c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2280      	movs	r2, #128	@ 0x80
 80028a2:	589b      	ldr	r3, [r3, r2]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2220      	movs	r2, #32
 80028aa:	4013      	ands	r3, r2
 80028ac:	d170      	bne.n	8002990 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028ae:	f3ef 8310 	mrs	r3, PRIMASK
 80028b2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80028b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80028b6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80028b8:	2301      	movs	r3, #1
 80028ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028be:	f383 8810 	msr	PRIMASK, r3
}
 80028c2:	46c0      	nop			@ (mov r8, r8)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	49c4      	ldr	r1, [pc, #784]	@ (8002be0 <HAL_UART_IRQHandler+0x680>)
 80028d0:	400a      	ands	r2, r1
 80028d2:	601a      	str	r2, [r3, #0]
 80028d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80028d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028da:	f383 8810 	msr	PRIMASK, r3
}
 80028de:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80028e0:	f3ef 8310 	mrs	r3, PRIMASK
 80028e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 80028e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80028ea:	2301      	movs	r3, #1
 80028ec:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80028ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f0:	f383 8810 	msr	PRIMASK, r3
}
 80028f4:	46c0      	nop			@ (mov r8, r8)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2101      	movs	r1, #1
 8002902:	438a      	bics	r2, r1
 8002904:	609a      	str	r2, [r3, #8]
 8002906:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002908:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800290a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800290c:	f383 8810 	msr	PRIMASK, r3
}
 8002910:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002912:	f3ef 8310 	mrs	r3, PRIMASK
 8002916:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8002918:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800291a:	673b      	str	r3, [r7, #112]	@ 0x70
 800291c:	2301      	movs	r3, #1
 800291e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002920:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002922:	f383 8810 	msr	PRIMASK, r3
}
 8002926:	46c0      	nop			@ (mov r8, r8)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	689a      	ldr	r2, [r3, #8]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2140      	movs	r1, #64	@ 0x40
 8002934:	438a      	bics	r2, r1
 8002936:	609a      	str	r2, [r3, #8]
 8002938:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800293a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800293c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800293e:	f383 8810 	msr	PRIMASK, r3
}
 8002942:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	228c      	movs	r2, #140	@ 0x8c
 8002948:	2120      	movs	r1, #32
 800294a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002952:	f3ef 8310 	mrs	r3, PRIMASK
 8002956:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8002958:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800295a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800295c:	2301      	movs	r3, #1
 800295e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002960:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002962:	f383 8810 	msr	PRIMASK, r3
}
 8002966:	46c0      	nop			@ (mov r8, r8)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2110      	movs	r1, #16
 8002974:	438a      	bics	r2, r1
 8002976:	601a      	str	r2, [r3, #0]
 8002978:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800297a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800297c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800297e:	f383 8810 	msr	PRIMASK, r3
}
 8002982:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2280      	movs	r2, #128	@ 0x80
 8002988:	589b      	ldr	r3, [r3, r2]
 800298a:	0018      	movs	r0, r3
 800298c:	f7fe fa02 	bl	8000d94 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	225c      	movs	r2, #92	@ 0x5c
 800299a:	5a9a      	ldrh	r2, [r3, r2]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	215e      	movs	r1, #94	@ 0x5e
 80029a0:	5a5b      	ldrh	r3, [r3, r1]
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	b29a      	uxth	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	0011      	movs	r1, r2
 80029ac:	0018      	movs	r0, r3
 80029ae:	f000 f92d 	bl	8002c0c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80029b2:	e10c      	b.n	8002bce <HAL_UART_IRQHandler+0x66e>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	225c      	movs	r2, #92	@ 0x5c
 80029b8:	5a9b      	ldrh	r3, [r3, r2]
 80029ba:	227e      	movs	r2, #126	@ 0x7e
 80029bc:	18ba      	adds	r2, r7, r2
 80029be:	8812      	ldrh	r2, [r2, #0]
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d000      	beq.n	80029c6 <HAL_UART_IRQHandler+0x466>
 80029c4:	e103      	b.n	8002bce <HAL_UART_IRQHandler+0x66e>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	2280      	movs	r2, #128	@ 0x80
 80029ca:	589b      	ldr	r3, [r3, r2]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2220      	movs	r2, #32
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b20      	cmp	r3, #32
 80029d6:	d000      	beq.n	80029da <HAL_UART_IRQHandler+0x47a>
 80029d8:	e0f9      	b.n	8002bce <HAL_UART_IRQHandler+0x66e>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2202      	movs	r2, #2
 80029de:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	225c      	movs	r2, #92	@ 0x5c
 80029e4:	5a9a      	ldrh	r2, [r3, r2]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	0011      	movs	r1, r2
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 f90e 	bl	8002c0c <HAL_UARTEx_RxEventCallback>
      return;
 80029f0:	e0ed      	b.n	8002bce <HAL_UART_IRQHandler+0x66e>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	225c      	movs	r2, #92	@ 0x5c
 80029f6:	5a99      	ldrh	r1, [r3, r2]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	225e      	movs	r2, #94	@ 0x5e
 80029fc:	5a9b      	ldrh	r3, [r3, r2]
 80029fe:	b29a      	uxth	r2, r3
 8002a00:	208e      	movs	r0, #142	@ 0x8e
 8002a02:	183b      	adds	r3, r7, r0
 8002a04:	1a8a      	subs	r2, r1, r2
 8002a06:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	225e      	movs	r2, #94	@ 0x5e
 8002a0c:	5a9b      	ldrh	r3, [r3, r2]
 8002a0e:	b29b      	uxth	r3, r3
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d100      	bne.n	8002a16 <HAL_UART_IRQHandler+0x4b6>
 8002a14:	e0dd      	b.n	8002bd2 <HAL_UART_IRQHandler+0x672>
          && (nb_rx_data > 0U))
 8002a16:	183b      	adds	r3, r7, r0
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d100      	bne.n	8002a20 <HAL_UART_IRQHandler+0x4c0>
 8002a1e:	e0d8      	b.n	8002bd2 <HAL_UART_IRQHandler+0x672>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a20:	f3ef 8310 	mrs	r3, PRIMASK
 8002a24:	60fb      	str	r3, [r7, #12]
  return(result);
 8002a26:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002a28:	2488      	movs	r4, #136	@ 0x88
 8002a2a:	193a      	adds	r2, r7, r4
 8002a2c:	6013      	str	r3, [r2, #0]
 8002a2e:	2301      	movs	r3, #1
 8002a30:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	f383 8810 	msr	PRIMASK, r3
}
 8002a38:	46c0      	nop			@ (mov r8, r8)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4967      	ldr	r1, [pc, #412]	@ (8002be4 <HAL_UART_IRQHandler+0x684>)
 8002a46:	400a      	ands	r2, r1
 8002a48:	601a      	str	r2, [r3, #0]
 8002a4a:	193b      	adds	r3, r7, r4
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	f383 8810 	msr	PRIMASK, r3
}
 8002a56:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002a58:	f3ef 8310 	mrs	r3, PRIMASK
 8002a5c:	61bb      	str	r3, [r7, #24]
  return(result);
 8002a5e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002a60:	2484      	movs	r4, #132	@ 0x84
 8002a62:	193a      	adds	r2, r7, r4
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	2301      	movs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	f383 8810 	msr	PRIMASK, r3
}
 8002a70:	46c0      	nop			@ (mov r8, r8)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	495a      	ldr	r1, [pc, #360]	@ (8002be8 <HAL_UART_IRQHandler+0x688>)
 8002a7e:	400a      	ands	r2, r1
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	193b      	adds	r3, r7, r4
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	f383 8810 	msr	PRIMASK, r3
}
 8002a8e:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	228c      	movs	r2, #140	@ 0x8c
 8002a94:	2120      	movs	r1, #32
 8002a96:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8002aa8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aac:	2480      	movs	r4, #128	@ 0x80
 8002aae:	193a      	adds	r2, r7, r4
 8002ab0:	6013      	str	r3, [r2, #0]
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab8:	f383 8810 	msr	PRIMASK, r3
}
 8002abc:	46c0      	nop			@ (mov r8, r8)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681a      	ldr	r2, [r3, #0]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2110      	movs	r1, #16
 8002aca:	438a      	bics	r2, r1
 8002acc:	601a      	str	r2, [r3, #0]
 8002ace:	193b      	adds	r3, r7, r4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ad6:	f383 8810 	msr	PRIMASK, r3
}
 8002ada:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ae2:	183b      	adds	r3, r7, r0
 8002ae4:	881a      	ldrh	r2, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	0011      	movs	r1, r2
 8002aea:	0018      	movs	r0, r3
 8002aec:	f000 f88e 	bl	8002c0c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002af0:	e06f      	b.n	8002bd2 <HAL_UART_IRQHandler+0x672>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002af2:	23a4      	movs	r3, #164	@ 0xa4
 8002af4:	18fb      	adds	r3, r7, r3
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	2380      	movs	r3, #128	@ 0x80
 8002afa:	035b      	lsls	r3, r3, #13
 8002afc:	4013      	ands	r3, r2
 8002afe:	d010      	beq.n	8002b22 <HAL_UART_IRQHandler+0x5c2>
 8002b00:	239c      	movs	r3, #156	@ 0x9c
 8002b02:	18fb      	adds	r3, r7, r3
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	2380      	movs	r3, #128	@ 0x80
 8002b08:	03db      	lsls	r3, r3, #15
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	d009      	beq.n	8002b22 <HAL_UART_IRQHandler+0x5c2>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2280      	movs	r2, #128	@ 0x80
 8002b14:	0352      	lsls	r2, r2, #13
 8002b16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	f000 fe1c 	bl	8003758 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b20:	e05a      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002b22:	23a4      	movs	r3, #164	@ 0xa4
 8002b24:	18fb      	adds	r3, r7, r3
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	2280      	movs	r2, #128	@ 0x80
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d016      	beq.n	8002b5c <HAL_UART_IRQHandler+0x5fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002b2e:	23a0      	movs	r3, #160	@ 0xa0
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2280      	movs	r2, #128	@ 0x80
 8002b36:	4013      	ands	r3, r2
 8002b38:	d106      	bne.n	8002b48 <HAL_UART_IRQHandler+0x5e8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002b3a:	239c      	movs	r3, #156	@ 0x9c
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	2380      	movs	r3, #128	@ 0x80
 8002b42:	041b      	lsls	r3, r3, #16
 8002b44:	4013      	ands	r3, r2
 8002b46:	d009      	beq.n	8002b5c <HAL_UART_IRQHandler+0x5fc>
  {
    if (huart->TxISR != NULL)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d042      	beq.n	8002bd6 <HAL_UART_IRQHandler+0x676>
    {
      huart->TxISR(huart);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	0010      	movs	r0, r2
 8002b58:	4798      	blx	r3
    }
    return;
 8002b5a:	e03c      	b.n	8002bd6 <HAL_UART_IRQHandler+0x676>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002b5c:	23a4      	movs	r3, #164	@ 0xa4
 8002b5e:	18fb      	adds	r3, r7, r3
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2240      	movs	r2, #64	@ 0x40
 8002b64:	4013      	ands	r3, r2
 8002b66:	d00a      	beq.n	8002b7e <HAL_UART_IRQHandler+0x61e>
 8002b68:	23a0      	movs	r3, #160	@ 0xa0
 8002b6a:	18fb      	adds	r3, r7, r3
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2240      	movs	r2, #64	@ 0x40
 8002b70:	4013      	ands	r3, r2
 8002b72:	d004      	beq.n	8002b7e <HAL_UART_IRQHandler+0x61e>
  {
    UART_EndTransmit_IT(huart);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 fdc2 	bl	8003700 <UART_EndTransmit_IT>
    return;
 8002b7c:	e02c      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002b7e:	23a4      	movs	r3, #164	@ 0xa4
 8002b80:	18fb      	adds	r3, r7, r3
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	2380      	movs	r3, #128	@ 0x80
 8002b86:	041b      	lsls	r3, r3, #16
 8002b88:	4013      	ands	r3, r2
 8002b8a:	d00b      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x644>
 8002b8c:	23a0      	movs	r3, #160	@ 0xa0
 8002b8e:	18fb      	adds	r3, r7, r3
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	2380      	movs	r3, #128	@ 0x80
 8002b94:	05db      	lsls	r3, r3, #23
 8002b96:	4013      	ands	r3, r2
 8002b98:	d004      	beq.n	8002ba4 <HAL_UART_IRQHandler+0x644>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	f000 fdeb 	bl	8003778 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002ba2:	e019      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002ba4:	23a4      	movs	r3, #164	@ 0xa4
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	681a      	ldr	r2, [r3, #0]
 8002baa:	2380      	movs	r3, #128	@ 0x80
 8002bac:	045b      	lsls	r3, r3, #17
 8002bae:	4013      	ands	r3, r2
 8002bb0:	d012      	beq.n	8002bd8 <HAL_UART_IRQHandler+0x678>
 8002bb2:	23a0      	movs	r3, #160	@ 0xa0
 8002bb4:	18fb      	adds	r3, r7, r3
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	da0d      	bge.n	8002bd8 <HAL_UART_IRQHandler+0x678>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fdd2 	bl	8003768 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002bc4:	e008      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
      return;
 8002bc6:	46c0      	nop			@ (mov r8, r8)
 8002bc8:	e006      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
    return;
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	e004      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
      return;
 8002bce:	46c0      	nop			@ (mov r8, r8)
 8002bd0:	e002      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
      return;
 8002bd2:	46c0      	nop			@ (mov r8, r8)
 8002bd4:	e000      	b.n	8002bd8 <HAL_UART_IRQHandler+0x678>
    return;
 8002bd6:	46c0      	nop			@ (mov r8, r8)
  }
}
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	b02a      	add	sp, #168	@ 0xa8
 8002bdc:	bdb0      	pop	{r4, r5, r7, pc}
 8002bde:	46c0      	nop			@ (mov r8, r8)
 8002be0:	fffffeff 	.word	0xfffffeff
 8002be4:	fffffedf 	.word	0xfffffedf
 8002be8:	effffffe 	.word	0xeffffffe

08002bec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b082      	sub	sp, #8
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002bf4:	46c0      	nop			@ (mov r8, r8)
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	b002      	add	sp, #8
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002c04:	46c0      	nop			@ (mov r8, r8)
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	000a      	movs	r2, r1
 8002c16:	1cbb      	adds	r3, r7, #2
 8002c18:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002c1a:	46c0      	nop			@ (mov r8, r8)
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	b002      	add	sp, #8
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b088      	sub	sp, #32
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c2c:	231e      	movs	r3, #30
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	2200      	movs	r2, #0
 8002c32:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4aab      	ldr	r2, [pc, #684]	@ (8002f00 <UART_SetConfig+0x2dc>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	0019      	movs	r1, r3
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4aa6      	ldr	r2, [pc, #664]	@ (8002f04 <UART_SetConfig+0x2e0>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	68da      	ldr	r2, [r3, #12]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	430a      	orrs	r2, r1
 8002c78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	697a      	ldr	r2, [r7, #20]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	4a9d      	ldr	r2, [pc, #628]	@ (8002f08 <UART_SetConfig+0x2e4>)
 8002c92:	4013      	ands	r3, r2
 8002c94:	0019      	movs	r1, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	697a      	ldr	r2, [r7, #20]
 8002c9c:	430a      	orrs	r2, r1
 8002c9e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ca6:	220f      	movs	r2, #15
 8002ca8:	4393      	bics	r3, r2
 8002caa:	0019      	movs	r1, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a93      	ldr	r2, [pc, #588]	@ (8002f0c <UART_SetConfig+0x2e8>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d127      	bne.n	8002d12 <UART_SetConfig+0xee>
 8002cc2:	4b93      	ldr	r3, [pc, #588]	@ (8002f10 <UART_SetConfig+0x2ec>)
 8002cc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cc6:	2203      	movs	r2, #3
 8002cc8:	4013      	ands	r3, r2
 8002cca:	2b03      	cmp	r3, #3
 8002ccc:	d017      	beq.n	8002cfe <UART_SetConfig+0xda>
 8002cce:	d81b      	bhi.n	8002d08 <UART_SetConfig+0xe4>
 8002cd0:	2b02      	cmp	r3, #2
 8002cd2:	d00a      	beq.n	8002cea <UART_SetConfig+0xc6>
 8002cd4:	d818      	bhi.n	8002d08 <UART_SetConfig+0xe4>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d002      	beq.n	8002ce0 <UART_SetConfig+0xbc>
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d00a      	beq.n	8002cf4 <UART_SetConfig+0xd0>
 8002cde:	e013      	b.n	8002d08 <UART_SetConfig+0xe4>
 8002ce0:	231f      	movs	r3, #31
 8002ce2:	18fb      	adds	r3, r7, r3
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	701a      	strb	r2, [r3, #0]
 8002ce8:	e021      	b.n	8002d2e <UART_SetConfig+0x10a>
 8002cea:	231f      	movs	r3, #31
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	2202      	movs	r2, #2
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	e01c      	b.n	8002d2e <UART_SetConfig+0x10a>
 8002cf4:	231f      	movs	r3, #31
 8002cf6:	18fb      	adds	r3, r7, r3
 8002cf8:	2204      	movs	r2, #4
 8002cfa:	701a      	strb	r2, [r3, #0]
 8002cfc:	e017      	b.n	8002d2e <UART_SetConfig+0x10a>
 8002cfe:	231f      	movs	r3, #31
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	2208      	movs	r2, #8
 8002d04:	701a      	strb	r2, [r3, #0]
 8002d06:	e012      	b.n	8002d2e <UART_SetConfig+0x10a>
 8002d08:	231f      	movs	r3, #31
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	701a      	strb	r2, [r3, #0]
 8002d10:	e00d      	b.n	8002d2e <UART_SetConfig+0x10a>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a7f      	ldr	r2, [pc, #508]	@ (8002f14 <UART_SetConfig+0x2f0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d104      	bne.n	8002d26 <UART_SetConfig+0x102>
 8002d1c:	231f      	movs	r3, #31
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	2200      	movs	r2, #0
 8002d22:	701a      	strb	r2, [r3, #0]
 8002d24:	e003      	b.n	8002d2e <UART_SetConfig+0x10a>
 8002d26:	231f      	movs	r3, #31
 8002d28:	18fb      	adds	r3, r7, r3
 8002d2a:	2210      	movs	r2, #16
 8002d2c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69da      	ldr	r2, [r3, #28]
 8002d32:	2380      	movs	r3, #128	@ 0x80
 8002d34:	021b      	lsls	r3, r3, #8
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d000      	beq.n	8002d3c <UART_SetConfig+0x118>
 8002d3a:	e06f      	b.n	8002e1c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8002d3c:	231f      	movs	r3, #31
 8002d3e:	18fb      	adds	r3, r7, r3
 8002d40:	781b      	ldrb	r3, [r3, #0]
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d01f      	beq.n	8002d86 <UART_SetConfig+0x162>
 8002d46:	dc22      	bgt.n	8002d8e <UART_SetConfig+0x16a>
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d017      	beq.n	8002d7c <UART_SetConfig+0x158>
 8002d4c:	dc1f      	bgt.n	8002d8e <UART_SetConfig+0x16a>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d002      	beq.n	8002d58 <UART_SetConfig+0x134>
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d005      	beq.n	8002d62 <UART_SetConfig+0x13e>
 8002d56:	e01a      	b.n	8002d8e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d58:	f7fe fdc4 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002d5c:	0003      	movs	r3, r0
 8002d5e:	61bb      	str	r3, [r7, #24]
        break;
 8002d60:	e01c      	b.n	8002d9c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002d62:	4b6b      	ldr	r3, [pc, #428]	@ (8002f10 <UART_SetConfig+0x2ec>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	095b      	lsrs	r3, r3, #5
 8002d68:	2207      	movs	r2, #7
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	0019      	movs	r1, r3
 8002d70:	4869      	ldr	r0, [pc, #420]	@ (8002f18 <UART_SetConfig+0x2f4>)
 8002d72:	f7fd f9c9 	bl	8000108 <__udivsi3>
 8002d76:	0003      	movs	r3, r0
 8002d78:	61bb      	str	r3, [r7, #24]
        break;
 8002d7a:	e00f      	b.n	8002d9c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d7c:	f7fe fd52 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 8002d80:	0003      	movs	r3, r0
 8002d82:	61bb      	str	r3, [r7, #24]
        break;
 8002d84:	e00a      	b.n	8002d9c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002d86:	2380      	movs	r3, #128	@ 0x80
 8002d88:	021b      	lsls	r3, r3, #8
 8002d8a:	61bb      	str	r3, [r7, #24]
        break;
 8002d8c:	e006      	b.n	8002d9c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002d92:	231e      	movs	r3, #30
 8002d94:	18fb      	adds	r3, r7, r3
 8002d96:	2201      	movs	r2, #1
 8002d98:	701a      	strb	r2, [r3, #0]
        break;
 8002d9a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d100      	bne.n	8002da4 <UART_SetConfig+0x180>
 8002da2:	e097      	b.n	8002ed4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002da8:	4b5c      	ldr	r3, [pc, #368]	@ (8002f1c <UART_SetConfig+0x2f8>)
 8002daa:	0052      	lsls	r2, r2, #1
 8002dac:	5ad3      	ldrh	r3, [r2, r3]
 8002dae:	0019      	movs	r1, r3
 8002db0:	69b8      	ldr	r0, [r7, #24]
 8002db2:	f7fd f9a9 	bl	8000108 <__udivsi3>
 8002db6:	0003      	movs	r3, r0
 8002db8:	005a      	lsls	r2, r3, #1
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	18d2      	adds	r2, r2, r3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	0019      	movs	r1, r3
 8002dc8:	0010      	movs	r0, r2
 8002dca:	f7fd f99d 	bl	8000108 <__udivsi3>
 8002dce:	0003      	movs	r3, r0
 8002dd0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	d91c      	bls.n	8002e12 <UART_SetConfig+0x1ee>
 8002dd8:	693a      	ldr	r2, [r7, #16]
 8002dda:	2380      	movs	r3, #128	@ 0x80
 8002ddc:	025b      	lsls	r3, r3, #9
 8002dde:	429a      	cmp	r2, r3
 8002de0:	d217      	bcs.n	8002e12 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b29a      	uxth	r2, r3
 8002de6:	200e      	movs	r0, #14
 8002de8:	183b      	adds	r3, r7, r0
 8002dea:	210f      	movs	r1, #15
 8002dec:	438a      	bics	r2, r1
 8002dee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	085b      	lsrs	r3, r3, #1
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2207      	movs	r2, #7
 8002df8:	4013      	ands	r3, r2
 8002dfa:	b299      	uxth	r1, r3
 8002dfc:	183b      	adds	r3, r7, r0
 8002dfe:	183a      	adds	r2, r7, r0
 8002e00:	8812      	ldrh	r2, [r2, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	183a      	adds	r2, r7, r0
 8002e0c:	8812      	ldrh	r2, [r2, #0]
 8002e0e:	60da      	str	r2, [r3, #12]
 8002e10:	e060      	b.n	8002ed4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002e12:	231e      	movs	r3, #30
 8002e14:	18fb      	adds	r3, r7, r3
 8002e16:	2201      	movs	r2, #1
 8002e18:	701a      	strb	r2, [r3, #0]
 8002e1a:	e05b      	b.n	8002ed4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e1c:	231f      	movs	r3, #31
 8002e1e:	18fb      	adds	r3, r7, r3
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d01f      	beq.n	8002e66 <UART_SetConfig+0x242>
 8002e26:	dc22      	bgt.n	8002e6e <UART_SetConfig+0x24a>
 8002e28:	2b04      	cmp	r3, #4
 8002e2a:	d017      	beq.n	8002e5c <UART_SetConfig+0x238>
 8002e2c:	dc1f      	bgt.n	8002e6e <UART_SetConfig+0x24a>
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d002      	beq.n	8002e38 <UART_SetConfig+0x214>
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d005      	beq.n	8002e42 <UART_SetConfig+0x21e>
 8002e36:	e01a      	b.n	8002e6e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e38:	f7fe fd54 	bl	80018e4 <HAL_RCC_GetPCLK1Freq>
 8002e3c:	0003      	movs	r3, r0
 8002e3e:	61bb      	str	r3, [r7, #24]
        break;
 8002e40:	e01c      	b.n	8002e7c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8002e42:	4b33      	ldr	r3, [pc, #204]	@ (8002f10 <UART_SetConfig+0x2ec>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	2207      	movs	r2, #7
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	3301      	adds	r3, #1
 8002e4e:	0019      	movs	r1, r3
 8002e50:	4831      	ldr	r0, [pc, #196]	@ (8002f18 <UART_SetConfig+0x2f4>)
 8002e52:	f7fd f959 	bl	8000108 <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	61bb      	str	r3, [r7, #24]
        break;
 8002e5a:	e00f      	b.n	8002e7c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e5c:	f7fe fce2 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 8002e60:	0003      	movs	r3, r0
 8002e62:	61bb      	str	r3, [r7, #24]
        break;
 8002e64:	e00a      	b.n	8002e7c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e66:	2380      	movs	r3, #128	@ 0x80
 8002e68:	021b      	lsls	r3, r3, #8
 8002e6a:	61bb      	str	r3, [r7, #24]
        break;
 8002e6c:	e006      	b.n	8002e7c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e72:	231e      	movs	r3, #30
 8002e74:	18fb      	adds	r3, r7, r3
 8002e76:	2201      	movs	r2, #1
 8002e78:	701a      	strb	r2, [r3, #0]
        break;
 8002e7a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d028      	beq.n	8002ed4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002e86:	4b25      	ldr	r3, [pc, #148]	@ (8002f1c <UART_SetConfig+0x2f8>)
 8002e88:	0052      	lsls	r2, r2, #1
 8002e8a:	5ad3      	ldrh	r3, [r2, r3]
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	69b8      	ldr	r0, [r7, #24]
 8002e90:	f7fd f93a 	bl	8000108 <__udivsi3>
 8002e94:	0003      	movs	r3, r0
 8002e96:	001a      	movs	r2, r3
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	085b      	lsrs	r3, r3, #1
 8002e9e:	18d2      	adds	r2, r2, r3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	0019      	movs	r1, r3
 8002ea6:	0010      	movs	r0, r2
 8002ea8:	f7fd f92e 	bl	8000108 <__udivsi3>
 8002eac:	0003      	movs	r3, r0
 8002eae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d90a      	bls.n	8002ecc <UART_SetConfig+0x2a8>
 8002eb6:	693a      	ldr	r2, [r7, #16]
 8002eb8:	2380      	movs	r3, #128	@ 0x80
 8002eba:	025b      	lsls	r3, r3, #9
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d205      	bcs.n	8002ecc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	b29a      	uxth	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60da      	str	r2, [r3, #12]
 8002eca:	e003      	b.n	8002ed4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ecc:	231e      	movs	r3, #30
 8002ece:	18fb      	adds	r3, r7, r3
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	226a      	movs	r2, #106	@ 0x6a
 8002ed8:	2101      	movs	r1, #1
 8002eda:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2268      	movs	r2, #104	@ 0x68
 8002ee0:	2101      	movs	r1, #1
 8002ee2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2200      	movs	r2, #0
 8002eee:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8002ef0:	231e      	movs	r3, #30
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	781b      	ldrb	r3, [r3, #0]
}
 8002ef6:	0018      	movs	r0, r3
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	b008      	add	sp, #32
 8002efc:	bd80      	pop	{r7, pc}
 8002efe:	46c0      	nop			@ (mov r8, r8)
 8002f00:	cfff69f3 	.word	0xcfff69f3
 8002f04:	ffffcfff 	.word	0xffffcfff
 8002f08:	11fff4ff 	.word	0x11fff4ff
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40004400 	.word	0x40004400
 8002f18:	02dc6c00 	.word	0x02dc6c00
 8002f1c:	08003a8c 	.word	0x08003a8c

08002f20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	4a4a      	ldr	r2, [pc, #296]	@ (8003064 <UART_AdvFeatureConfig+0x144>)
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f4e:	2201      	movs	r2, #1
 8002f50:	4013      	ands	r3, r2
 8002f52:	d00b      	beq.n	8002f6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	4a43      	ldr	r2, [pc, #268]	@ (8003068 <UART_AdvFeatureConfig+0x148>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	0019      	movs	r1, r3
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	430a      	orrs	r2, r1
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f70:	2202      	movs	r2, #2
 8002f72:	4013      	ands	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a3b      	ldr	r2, [pc, #236]	@ (800306c <UART_AdvFeatureConfig+0x14c>)
 8002f7e:	4013      	ands	r3, r2
 8002f80:	0019      	movs	r1, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f92:	2204      	movs	r2, #4
 8002f94:	4013      	ands	r3, r2
 8002f96:	d00b      	beq.n	8002fb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a34      	ldr	r2, [pc, #208]	@ (8003070 <UART_AdvFeatureConfig+0x150>)
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fb4:	2210      	movs	r2, #16
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	d00b      	beq.n	8002fd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4a2c      	ldr	r2, [pc, #176]	@ (8003074 <UART_AdvFeatureConfig+0x154>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	0019      	movs	r1, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fd6:	2220      	movs	r2, #32
 8002fd8:	4013      	ands	r3, r2
 8002fda:	d00b      	beq.n	8002ff4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	4a25      	ldr	r2, [pc, #148]	@ (8003078 <UART_AdvFeatureConfig+0x158>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	0019      	movs	r1, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff8:	2240      	movs	r2, #64	@ 0x40
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d01d      	beq.n	800303a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	4a1d      	ldr	r2, [pc, #116]	@ (800307c <UART_AdvFeatureConfig+0x15c>)
 8003006:	4013      	ands	r3, r2
 8003008:	0019      	movs	r1, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800301a:	2380      	movs	r3, #128	@ 0x80
 800301c:	035b      	lsls	r3, r3, #13
 800301e:	429a      	cmp	r2, r3
 8003020:	d10b      	bne.n	800303a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a15      	ldr	r2, [pc, #84]	@ (8003080 <UART_AdvFeatureConfig+0x160>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	2280      	movs	r2, #128	@ 0x80
 8003040:	4013      	ands	r3, r2
 8003042:	d00b      	beq.n	800305c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a0e      	ldr	r2, [pc, #56]	@ (8003084 <UART_AdvFeatureConfig+0x164>)
 800304c:	4013      	ands	r3, r2
 800304e:	0019      	movs	r1, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	605a      	str	r2, [r3, #4]
  }
}
 800305c:	46c0      	nop			@ (mov r8, r8)
 800305e:	46bd      	mov	sp, r7
 8003060:	b002      	add	sp, #8
 8003062:	bd80      	pop	{r7, pc}
 8003064:	ffff7fff 	.word	0xffff7fff
 8003068:	fffdffff 	.word	0xfffdffff
 800306c:	fffeffff 	.word	0xfffeffff
 8003070:	fffbffff 	.word	0xfffbffff
 8003074:	ffffefff 	.word	0xffffefff
 8003078:	ffffdfff 	.word	0xffffdfff
 800307c:	ffefffff 	.word	0xffefffff
 8003080:	ff9fffff 	.word	0xff9fffff
 8003084:	fff7ffff 	.word	0xfff7ffff

08003088 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b092      	sub	sp, #72	@ 0x48
 800308c:	af02      	add	r7, sp, #8
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2290      	movs	r2, #144	@ 0x90
 8003094:	2100      	movs	r1, #0
 8003096:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003098:	f7fd fd94 	bl	8000bc4 <HAL_GetTick>
 800309c:	0003      	movs	r3, r0
 800309e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2208      	movs	r2, #8
 80030a8:	4013      	ands	r3, r2
 80030aa:	2b08      	cmp	r3, #8
 80030ac:	d12d      	bne.n	800310a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030b0:	2280      	movs	r2, #128	@ 0x80
 80030b2:	0391      	lsls	r1, r2, #14
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4a47      	ldr	r2, [pc, #284]	@ (80031d4 <UART_CheckIdleState+0x14c>)
 80030b8:	9200      	str	r2, [sp, #0]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f000 f88e 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 80030c0:	1e03      	subs	r3, r0, #0
 80030c2:	d022      	beq.n	800310a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80030c4:	f3ef 8310 	mrs	r3, PRIMASK
 80030c8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80030cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80030ce:	2301      	movs	r3, #1
 80030d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d4:	f383 8810 	msr	PRIMASK, r3
}
 80030d8:	46c0      	nop			@ (mov r8, r8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2180      	movs	r1, #128	@ 0x80
 80030e6:	438a      	bics	r2, r1
 80030e8:	601a      	str	r2, [r3, #0]
 80030ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030f0:	f383 8810 	msr	PRIMASK, r3
}
 80030f4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2288      	movs	r2, #136	@ 0x88
 80030fa:	2120      	movs	r1, #32
 80030fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2284      	movs	r2, #132	@ 0x84
 8003102:	2100      	movs	r1, #0
 8003104:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e060      	b.n	80031cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2204      	movs	r2, #4
 8003112:	4013      	ands	r3, r2
 8003114:	2b04      	cmp	r3, #4
 8003116:	d146      	bne.n	80031a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003118:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800311a:	2280      	movs	r2, #128	@ 0x80
 800311c:	03d1      	lsls	r1, r2, #15
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	4a2c      	ldr	r2, [pc, #176]	@ (80031d4 <UART_CheckIdleState+0x14c>)
 8003122:	9200      	str	r2, [sp, #0]
 8003124:	2200      	movs	r2, #0
 8003126:	f000 f859 	bl	80031dc <UART_WaitOnFlagUntilTimeout>
 800312a:	1e03      	subs	r3, r0, #0
 800312c:	d03b      	beq.n	80031a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800312e:	f3ef 8310 	mrs	r3, PRIMASK
 8003132:	60fb      	str	r3, [r7, #12]
  return(result);
 8003134:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003136:	637b      	str	r3, [r7, #52]	@ 0x34
 8003138:	2301      	movs	r3, #1
 800313a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	f383 8810 	msr	PRIMASK, r3
}
 8003142:	46c0      	nop			@ (mov r8, r8)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4922      	ldr	r1, [pc, #136]	@ (80031d8 <UART_CheckIdleState+0x150>)
 8003150:	400a      	ands	r2, r1
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003160:	f3ef 8310 	mrs	r3, PRIMASK
 8003164:	61bb      	str	r3, [r7, #24]
  return(result);
 8003166:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003168:	633b      	str	r3, [r7, #48]	@ 0x30
 800316a:	2301      	movs	r3, #1
 800316c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	f383 8810 	msr	PRIMASK, r3
}
 8003174:	46c0      	nop			@ (mov r8, r8)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	438a      	bics	r2, r1
 8003184:	609a      	str	r2, [r3, #8]
 8003186:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003188:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	f383 8810 	msr	PRIMASK, r3
}
 8003190:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	228c      	movs	r2, #140	@ 0x8c
 8003196:	2120      	movs	r1, #32
 8003198:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2284      	movs	r2, #132	@ 0x84
 800319e:	2100      	movs	r1, #0
 80031a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e012      	b.n	80031cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2288      	movs	r2, #136	@ 0x88
 80031aa:	2120      	movs	r1, #32
 80031ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	228c      	movs	r2, #140	@ 0x8c
 80031b2:	2120      	movs	r1, #32
 80031b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2200      	movs	r2, #0
 80031ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2284      	movs	r2, #132	@ 0x84
 80031c6:	2100      	movs	r1, #0
 80031c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	0018      	movs	r0, r3
 80031ce:	46bd      	mov	sp, r7
 80031d0:	b010      	add	sp, #64	@ 0x40
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	01ffffff 	.word	0x01ffffff
 80031d8:	fffffedf 	.word	0xfffffedf

080031dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b084      	sub	sp, #16
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	603b      	str	r3, [r7, #0]
 80031e8:	1dfb      	adds	r3, r7, #7
 80031ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ec:	e051      	b.n	8003292 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	3301      	adds	r3, #1
 80031f2:	d04e      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f4:	f7fd fce6 	bl	8000bc4 <HAL_GetTick>
 80031f8:	0002      	movs	r2, r0
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	429a      	cmp	r2, r3
 8003202:	d302      	bcc.n	800320a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800320a:	2303      	movs	r3, #3
 800320c:	e051      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2204      	movs	r2, #4
 8003216:	4013      	ands	r3, r2
 8003218:	d03b      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0xb6>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b80      	cmp	r3, #128	@ 0x80
 800321e:	d038      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0xb6>
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b40      	cmp	r3, #64	@ 0x40
 8003224:	d035      	beq.n	8003292 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	2208      	movs	r2, #8
 800322e:	4013      	ands	r3, r2
 8003230:	2b08      	cmp	r3, #8
 8003232:	d111      	bne.n	8003258 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2208      	movs	r2, #8
 800323a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f83c 	bl	80032bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2290      	movs	r2, #144	@ 0x90
 8003248:	2108      	movs	r1, #8
 800324a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2284      	movs	r2, #132	@ 0x84
 8003250:	2100      	movs	r1, #0
 8003252:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e02c      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	2380      	movs	r3, #128	@ 0x80
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	401a      	ands	r2, r3
 8003264:	2380      	movs	r3, #128	@ 0x80
 8003266:	011b      	lsls	r3, r3, #4
 8003268:	429a      	cmp	r2, r3
 800326a:	d112      	bne.n	8003292 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2280      	movs	r2, #128	@ 0x80
 8003272:	0112      	lsls	r2, r2, #4
 8003274:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	0018      	movs	r0, r3
 800327a:	f000 f81f 	bl	80032bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2290      	movs	r2, #144	@ 0x90
 8003282:	2120      	movs	r1, #32
 8003284:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2284      	movs	r2, #132	@ 0x84
 800328a:	2100      	movs	r1, #0
 800328c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800328e:	2303      	movs	r3, #3
 8003290:	e00f      	b.n	80032b2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	69db      	ldr	r3, [r3, #28]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	4013      	ands	r3, r2
 800329c:	68ba      	ldr	r2, [r7, #8]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	425a      	negs	r2, r3
 80032a2:	4153      	adcs	r3, r2
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	001a      	movs	r2, r3
 80032a8:	1dfb      	adds	r3, r7, #7
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d09e      	beq.n	80031ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	0018      	movs	r0, r3
 80032b4:	46bd      	mov	sp, r7
 80032b6:	b004      	add	sp, #16
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08e      	sub	sp, #56	@ 0x38
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032c4:	f3ef 8310 	mrs	r3, PRIMASK
 80032c8:	617b      	str	r3, [r7, #20]
  return(result);
 80032ca:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80032cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80032ce:	2301      	movs	r3, #1
 80032d0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032d2:	69bb      	ldr	r3, [r7, #24]
 80032d4:	f383 8810 	msr	PRIMASK, r3
}
 80032d8:	46c0      	nop			@ (mov r8, r8)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4926      	ldr	r1, [pc, #152]	@ (8003380 <UART_EndRxTransfer+0xc4>)
 80032e6:	400a      	ands	r2, r1
 80032e8:	601a      	str	r2, [r3, #0]
 80032ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032ee:	69fb      	ldr	r3, [r7, #28]
 80032f0:	f383 8810 	msr	PRIMASK, r3
}
 80032f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80032f6:	f3ef 8310 	mrs	r3, PRIMASK
 80032fa:	623b      	str	r3, [r7, #32]
  return(result);
 80032fc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80032fe:	633b      	str	r3, [r7, #48]	@ 0x30
 8003300:	2301      	movs	r3, #1
 8003302:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	f383 8810 	msr	PRIMASK, r3
}
 800330a:	46c0      	nop			@ (mov r8, r8)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	689a      	ldr	r2, [r3, #8]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	491b      	ldr	r1, [pc, #108]	@ (8003384 <UART_EndRxTransfer+0xc8>)
 8003318:	400a      	ands	r2, r1
 800331a:	609a      	str	r2, [r3, #8]
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	f383 8810 	msr	PRIMASK, r3
}
 8003326:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800332c:	2b01      	cmp	r3, #1
 800332e:	d118      	bne.n	8003362 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003330:	f3ef 8310 	mrs	r3, PRIMASK
 8003334:	60bb      	str	r3, [r7, #8]
  return(result);
 8003336:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003338:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800333a:	2301      	movs	r3, #1
 800333c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			@ (mov r8, r8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2110      	movs	r1, #16
 8003352:	438a      	bics	r2, r1
 8003354:	601a      	str	r2, [r3, #0]
 8003356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003358:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	f383 8810 	msr	PRIMASK, r3
}
 8003360:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	228c      	movs	r2, #140	@ 0x8c
 8003366:	2120      	movs	r1, #32
 8003368:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2200      	movs	r2, #0
 8003374:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003376:	46c0      	nop			@ (mov r8, r8)
 8003378:	46bd      	mov	sp, r7
 800337a:	b00e      	add	sp, #56	@ 0x38
 800337c:	bd80      	pop	{r7, pc}
 800337e:	46c0      	nop			@ (mov r8, r8)
 8003380:	fffffedf 	.word	0xfffffedf
 8003384:	effffffe 	.word	0xeffffffe

08003388 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003394:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	225e      	movs	r2, #94	@ 0x5e
 800339a:	2100      	movs	r1, #0
 800339c:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	0018      	movs	r0, r3
 80033a2:	f7ff fc2b 	bl	8002bfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b004      	add	sp, #16
 80033ac:	bd80      	pop	{r7, pc}

080033ae <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b08a      	sub	sp, #40	@ 0x28
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2288      	movs	r2, #136	@ 0x88
 80033ba:	589b      	ldr	r3, [r3, r2]
 80033bc:	2b21      	cmp	r3, #33	@ 0x21
 80033be:	d14c      	bne.n	800345a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2256      	movs	r2, #86	@ 0x56
 80033c4:	5a9b      	ldrh	r3, [r3, r2]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d132      	bne.n	8003432 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033cc:	f3ef 8310 	mrs	r3, PRIMASK
 80033d0:	60bb      	str	r3, [r7, #8]
  return(result);
 80033d2:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80033d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80033d6:	2301      	movs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f383 8810 	msr	PRIMASK, r3
}
 80033e0:	46c0      	nop			@ (mov r8, r8)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2180      	movs	r1, #128	@ 0x80
 80033ee:	438a      	bics	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	f383 8810 	msr	PRIMASK, r3
}
 80033fc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80033fe:	f3ef 8310 	mrs	r3, PRIMASK
 8003402:	617b      	str	r3, [r7, #20]
  return(result);
 8003404:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003406:	623b      	str	r3, [r7, #32]
 8003408:	2301      	movs	r3, #1
 800340a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	f383 8810 	msr	PRIMASK, r3
}
 8003412:	46c0      	nop			@ (mov r8, r8)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2140      	movs	r1, #64	@ 0x40
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f383 8810 	msr	PRIMASK, r3
}
 800342e:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003430:	e013      	b.n	800345a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003436:	781a      	ldrb	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr++;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2256      	movs	r2, #86	@ 0x56
 800344c:	5a9b      	ldrh	r3, [r3, r2]
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b299      	uxth	r1, r3
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2256      	movs	r2, #86	@ 0x56
 8003458:	5299      	strh	r1, [r3, r2]
}
 800345a:	46c0      	nop			@ (mov r8, r8)
 800345c:	46bd      	mov	sp, r7
 800345e:	b00a      	add	sp, #40	@ 0x28
 8003460:	bd80      	pop	{r7, pc}

08003462 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b08c      	sub	sp, #48	@ 0x30
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2288      	movs	r2, #136	@ 0x88
 800346e:	589b      	ldr	r3, [r3, r2]
 8003470:	2b21      	cmp	r3, #33	@ 0x21
 8003472:	d151      	bne.n	8003518 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2256      	movs	r2, #86	@ 0x56
 8003478:	5a9b      	ldrh	r3, [r3, r2]
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d132      	bne.n	80034e6 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003480:	f3ef 8310 	mrs	r3, PRIMASK
 8003484:	60fb      	str	r3, [r7, #12]
  return(result);
 8003486:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003488:	62bb      	str	r3, [r7, #40]	@ 0x28
 800348a:	2301      	movs	r3, #1
 800348c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	f383 8810 	msr	PRIMASK, r3
}
 8003494:	46c0      	nop			@ (mov r8, r8)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2180      	movs	r1, #128	@ 0x80
 80034a2:	438a      	bics	r2, r1
 80034a4:	601a      	str	r2, [r3, #0]
 80034a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034b2:	f3ef 8310 	mrs	r3, PRIMASK
 80034b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80034b8:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80034bc:	2301      	movs	r3, #1
 80034be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f383 8810 	msr	PRIMASK, r3
}
 80034c6:	46c0      	nop			@ (mov r8, r8)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2140      	movs	r1, #64	@ 0x40
 80034d4:	430a      	orrs	r2, r1
 80034d6:	601a      	str	r2, [r3, #0]
 80034d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034dc:	6a3b      	ldr	r3, [r7, #32]
 80034de:	f383 8810 	msr	PRIMASK, r3
}
 80034e2:	46c0      	nop			@ (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80034e4:	e018      	b.n	8003518 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80034ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ee:	881b      	ldrh	r3, [r3, #0]
 80034f0:	001a      	movs	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	05d2      	lsls	r2, r2, #23
 80034f8:	0dd2      	lsrs	r2, r2, #23
 80034fa:	629a      	str	r2, [r3, #40]	@ 0x28
      huart->pTxBuffPtr += 2U;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003500:	1c9a      	adds	r2, r3, #2
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	651a      	str	r2, [r3, #80]	@ 0x50
      huart->TxXferCount--;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2256      	movs	r2, #86	@ 0x56
 800350a:	5a9b      	ldrh	r3, [r3, r2]
 800350c:	b29b      	uxth	r3, r3
 800350e:	3b01      	subs	r3, #1
 8003510:	b299      	uxth	r1, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2256      	movs	r2, #86	@ 0x56
 8003516:	5299      	strh	r1, [r3, r2]
}
 8003518:	46c0      	nop			@ (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b00c      	add	sp, #48	@ 0x30
 800351e:	bd80      	pop	{r7, pc}

08003520 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b08c      	sub	sp, #48	@ 0x30
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2288      	movs	r2, #136	@ 0x88
 800352c:	589b      	ldr	r3, [r3, r2]
 800352e:	2b21      	cmp	r3, #33	@ 0x21
 8003530:	d165      	bne.n	80035fe <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003532:	232e      	movs	r3, #46	@ 0x2e
 8003534:	18fb      	adds	r3, r7, r3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	216a      	movs	r1, #106	@ 0x6a
 800353a:	5a52      	ldrh	r2, [r2, r1]
 800353c:	801a      	strh	r2, [r3, #0]
 800353e:	e059      	b.n	80035f4 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2256      	movs	r2, #86	@ 0x56
 8003544:	5a9b      	ldrh	r3, [r3, r2]
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d133      	bne.n	80035b4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800354c:	f3ef 8310 	mrs	r3, PRIMASK
 8003550:	60fb      	str	r3, [r7, #12]
  return(result);
 8003552:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003556:	2301      	movs	r3, #1
 8003558:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f383 8810 	msr	PRIMASK, r3
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	689a      	ldr	r2, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4926      	ldr	r1, [pc, #152]	@ (8003608 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800356e:	400a      	ands	r2, r1
 8003570:	609a      	str	r2, [r3, #8]
 8003572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003574:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f383 8810 	msr	PRIMASK, r3
}
 800357c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800357e:	f3ef 8310 	mrs	r3, PRIMASK
 8003582:	61bb      	str	r3, [r7, #24]
  return(result);
 8003584:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003586:	627b      	str	r3, [r7, #36]	@ 0x24
 8003588:	2301      	movs	r3, #1
 800358a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	f383 8810 	msr	PRIMASK, r3
}
 8003592:	46c0      	nop			@ (mov r8, r8)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2140      	movs	r1, #64	@ 0x40
 80035a0:	430a      	orrs	r2, r1
 80035a2:	601a      	str	r2, [r3, #0]
 80035a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a8:	6a3b      	ldr	r3, [r7, #32]
 80035aa:	f383 8810 	msr	PRIMASK, r3
}
 80035ae:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 80035b0:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80035b2:	e024      	b.n	80035fe <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	69db      	ldr	r3, [r3, #28]
 80035ba:	2280      	movs	r2, #128	@ 0x80
 80035bc:	4013      	ands	r3, r2
 80035be:	d013      	beq.n	80035e8 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c4:	781a      	ldrb	r2, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr++;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d0:	1c5a      	adds	r2, r3, #1
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2256      	movs	r2, #86	@ 0x56
 80035da:	5a9b      	ldrh	r3, [r3, r2]
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b01      	subs	r3, #1
 80035e0:	b299      	uxth	r1, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2256      	movs	r2, #86	@ 0x56
 80035e6:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80035e8:	212e      	movs	r1, #46	@ 0x2e
 80035ea:	187b      	adds	r3, r7, r1
 80035ec:	881a      	ldrh	r2, [r3, #0]
 80035ee:	187b      	adds	r3, r7, r1
 80035f0:	3a01      	subs	r2, #1
 80035f2:	801a      	strh	r2, [r3, #0]
 80035f4:	232e      	movs	r3, #46	@ 0x2e
 80035f6:	18fb      	adds	r3, r7, r3
 80035f8:	881b      	ldrh	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1a0      	bne.n	8003540 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 80035fe:	46c0      	nop			@ (mov r8, r8)
 8003600:	46bd      	mov	sp, r7
 8003602:	b00c      	add	sp, #48	@ 0x30
 8003604:	bd80      	pop	{r7, pc}
 8003606:	46c0      	nop			@ (mov r8, r8)
 8003608:	ff7fffff 	.word	0xff7fffff

0800360c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08c      	sub	sp, #48	@ 0x30
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2288      	movs	r2, #136	@ 0x88
 8003618:	589b      	ldr	r3, [r3, r2]
 800361a:	2b21      	cmp	r3, #33	@ 0x21
 800361c:	d16a      	bne.n	80036f4 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800361e:	232e      	movs	r3, #46	@ 0x2e
 8003620:	18fb      	adds	r3, r7, r3
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	216a      	movs	r1, #106	@ 0x6a
 8003626:	5a52      	ldrh	r2, [r2, r1]
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	e05e      	b.n	80036ea <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2256      	movs	r2, #86	@ 0x56
 8003630:	5a9b      	ldrh	r3, [r3, r2]
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d133      	bne.n	80036a0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003638:	f3ef 8310 	mrs	r3, PRIMASK
 800363c:	60bb      	str	r3, [r7, #8]
  return(result);
 800363e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003640:	627b      	str	r3, [r7, #36]	@ 0x24
 8003642:	2301      	movs	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f383 8810 	msr	PRIMASK, r3
}
 800364c:	46c0      	nop			@ (mov r8, r8)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4928      	ldr	r1, [pc, #160]	@ (80036fc <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800365a:	400a      	ands	r2, r1
 800365c:	609a      	str	r2, [r3, #8]
 800365e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003660:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f383 8810 	msr	PRIMASK, r3
}
 8003668:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800366a:	f3ef 8310 	mrs	r3, PRIMASK
 800366e:	617b      	str	r3, [r7, #20]
  return(result);
 8003670:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003672:	623b      	str	r3, [r7, #32]
 8003674:	2301      	movs	r3, #1
 8003676:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003678:	69bb      	ldr	r3, [r7, #24]
 800367a:	f383 8810 	msr	PRIMASK, r3
}
 800367e:	46c0      	nop			@ (mov r8, r8)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	2140      	movs	r1, #64	@ 0x40
 800368c:	430a      	orrs	r2, r1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f383 8810 	msr	PRIMASK, r3
}
 800369a:	46c0      	nop			@ (mov r8, r8)

        break; /* force exit loop */
 800369c:	46c0      	nop			@ (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800369e:	e029      	b.n	80036f4 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	2280      	movs	r2, #128	@ 0x80
 80036a8:	4013      	ands	r3, r2
 80036aa:	d018      	beq.n	80036de <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036b0:	62bb      	str	r3, [r7, #40]	@ 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80036b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036b4:	881b      	ldrh	r3, [r3, #0]
 80036b6:	001a      	movs	r2, r3
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	05d2      	lsls	r2, r2, #23
 80036be:	0dd2      	lsrs	r2, r2, #23
 80036c0:	629a      	str	r2, [r3, #40]	@ 0x28
        huart->pTxBuffPtr += 2U;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036c6:	1c9a      	adds	r2, r3, #2
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	651a      	str	r2, [r3, #80]	@ 0x50
        huart->TxXferCount--;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2256      	movs	r2, #86	@ 0x56
 80036d0:	5a9b      	ldrh	r3, [r3, r2]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b299      	uxth	r1, r3
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2256      	movs	r2, #86	@ 0x56
 80036dc:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80036de:	212e      	movs	r1, #46	@ 0x2e
 80036e0:	187b      	adds	r3, r7, r1
 80036e2:	881a      	ldrh	r2, [r3, #0]
 80036e4:	187b      	adds	r3, r7, r1
 80036e6:	3a01      	subs	r2, #1
 80036e8:	801a      	strh	r2, [r3, #0]
 80036ea:	232e      	movs	r3, #46	@ 0x2e
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	881b      	ldrh	r3, [r3, #0]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d19b      	bne.n	800362c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80036f4:	46c0      	nop			@ (mov r8, r8)
 80036f6:	46bd      	mov	sp, r7
 80036f8:	b00c      	add	sp, #48	@ 0x30
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	ff7fffff 	.word	0xff7fffff

08003700 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003708:	f3ef 8310 	mrs	r3, PRIMASK
 800370c:	60bb      	str	r3, [r7, #8]
  return(result);
 800370e:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003710:	617b      	str	r3, [r7, #20]
 8003712:	2301      	movs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	f383 8810 	msr	PRIMASK, r3
}
 800371c:	46c0      	nop			@ (mov r8, r8)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2140      	movs	r1, #64	@ 0x40
 800372a:	438a      	bics	r2, r1
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f383 8810 	msr	PRIMASK, r3
}
 8003738:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2288      	movs	r2, #136	@ 0x88
 800373e:	2120      	movs	r1, #32
 8003740:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f7ff fa4e 	bl	8002bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003750:	46c0      	nop			@ (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b006      	add	sp, #24
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003760:	46c0      	nop			@ (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003770:	46c0      	nop			@ (mov r8, r8)
 8003772:	46bd      	mov	sp, r7
 8003774:	b002      	add	sp, #8
 8003776:	bd80      	pop	{r7, pc}

08003778 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003780:	46c0      	nop			@ (mov r8, r8)
 8003782:	46bd      	mov	sp, r7
 8003784:	b002      	add	sp, #8
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2284      	movs	r2, #132	@ 0x84
 8003794:	5c9b      	ldrb	r3, [r3, r2]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d101      	bne.n	800379e <HAL_UARTEx_DisableFifoMode+0x16>
 800379a:	2302      	movs	r3, #2
 800379c:	e027      	b.n	80037ee <HAL_UARTEx_DisableFifoMode+0x66>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2284      	movs	r2, #132	@ 0x84
 80037a2:	2101      	movs	r1, #1
 80037a4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2288      	movs	r2, #136	@ 0x88
 80037aa:	2124      	movs	r1, #36	@ 0x24
 80037ac:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2101      	movs	r1, #1
 80037c2:	438a      	bics	r2, r1
 80037c4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4a0b      	ldr	r2, [pc, #44]	@ (80037f8 <HAL_UARTEx_DisableFifoMode+0x70>)
 80037ca:	4013      	ands	r3, r2
 80037cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2200      	movs	r2, #0
 80037d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2288      	movs	r2, #136	@ 0x88
 80037e0:	2120      	movs	r1, #32
 80037e2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2284      	movs	r2, #132	@ 0x84
 80037e8:	2100      	movs	r1, #0
 80037ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	0018      	movs	r0, r3
 80037f0:	46bd      	mov	sp, r7
 80037f2:	b004      	add	sp, #16
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	46c0      	nop			@ (mov r8, r8)
 80037f8:	dfffffff 	.word	0xdfffffff

080037fc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2284      	movs	r2, #132	@ 0x84
 800380a:	5c9b      	ldrb	r3, [r3, r2]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003810:	2302      	movs	r3, #2
 8003812:	e02e      	b.n	8003872 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2284      	movs	r2, #132	@ 0x84
 8003818:	2101      	movs	r1, #1
 800381a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2288      	movs	r2, #136	@ 0x88
 8003820:	2124      	movs	r1, #36	@ 0x24
 8003822:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2101      	movs	r1, #1
 8003838:	438a      	bics	r2, r1
 800383a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	08d9      	lsrs	r1, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	683a      	ldr	r2, [r7, #0]
 800384c:	430a      	orrs	r2, r1
 800384e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f854 	bl	8003900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68fa      	ldr	r2, [r7, #12]
 800385e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2288      	movs	r2, #136	@ 0x88
 8003864:	2120      	movs	r1, #32
 8003866:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2284      	movs	r2, #132	@ 0x84
 800386c:	2100      	movs	r1, #0
 800386e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2284      	movs	r2, #132	@ 0x84
 800388a:	5c9b      	ldrb	r3, [r3, r2]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d101      	bne.n	8003894 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003890:	2302      	movs	r3, #2
 8003892:	e02f      	b.n	80038f4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2284      	movs	r2, #132	@ 0x84
 8003898:	2101      	movs	r1, #1
 800389a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2288      	movs	r2, #136	@ 0x88
 80038a0:	2124      	movs	r1, #36	@ 0x24
 80038a2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2101      	movs	r1, #1
 80038b8:	438a      	bics	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	@ (80038fc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	430a      	orrs	r2, r1
 80038d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	0018      	movs	r0, r3
 80038d6:	f000 f813 	bl	8003900 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2288      	movs	r2, #136	@ 0x88
 80038e6:	2120      	movs	r1, #32
 80038e8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2284      	movs	r2, #132	@ 0x84
 80038ee:	2100      	movs	r1, #0
 80038f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	0018      	movs	r0, r3
 80038f6:	46bd      	mov	sp, r7
 80038f8:	b004      	add	sp, #16
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	f1ffffff 	.word	0xf1ffffff

08003900 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800390c:	2b00      	cmp	r3, #0
 800390e:	d108      	bne.n	8003922 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	226a      	movs	r2, #106	@ 0x6a
 8003914:	2101      	movs	r1, #1
 8003916:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2268      	movs	r2, #104	@ 0x68
 800391c:	2101      	movs	r1, #1
 800391e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003920:	e043      	b.n	80039aa <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003922:	260f      	movs	r6, #15
 8003924:	19bb      	adds	r3, r7, r6
 8003926:	2208      	movs	r2, #8
 8003928:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800392a:	200e      	movs	r0, #14
 800392c:	183b      	adds	r3, r7, r0
 800392e:	2208      	movs	r2, #8
 8003930:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	0e5b      	lsrs	r3, r3, #25
 800393a:	b2da      	uxtb	r2, r3
 800393c:	240d      	movs	r4, #13
 800393e:	193b      	adds	r3, r7, r4
 8003940:	2107      	movs	r1, #7
 8003942:	400a      	ands	r2, r1
 8003944:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	0f5b      	lsrs	r3, r3, #29
 800394e:	b2da      	uxtb	r2, r3
 8003950:	250c      	movs	r5, #12
 8003952:	197b      	adds	r3, r7, r5
 8003954:	2107      	movs	r1, #7
 8003956:	400a      	ands	r2, r1
 8003958:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800395a:	183b      	adds	r3, r7, r0
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	197a      	adds	r2, r7, r5
 8003960:	7812      	ldrb	r2, [r2, #0]
 8003962:	4914      	ldr	r1, [pc, #80]	@ (80039b4 <UARTEx_SetNbDataToProcess+0xb4>)
 8003964:	5c8a      	ldrb	r2, [r1, r2]
 8003966:	435a      	muls	r2, r3
 8003968:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800396a:	197b      	adds	r3, r7, r5
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	4a12      	ldr	r2, [pc, #72]	@ (80039b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003970:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003972:	0019      	movs	r1, r3
 8003974:	f7fc fc52 	bl	800021c <__divsi3>
 8003978:	0003      	movs	r3, r0
 800397a:	b299      	uxth	r1, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	226a      	movs	r2, #106	@ 0x6a
 8003980:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003982:	19bb      	adds	r3, r7, r6
 8003984:	781b      	ldrb	r3, [r3, #0]
 8003986:	193a      	adds	r2, r7, r4
 8003988:	7812      	ldrb	r2, [r2, #0]
 800398a:	490a      	ldr	r1, [pc, #40]	@ (80039b4 <UARTEx_SetNbDataToProcess+0xb4>)
 800398c:	5c8a      	ldrb	r2, [r1, r2]
 800398e:	435a      	muls	r2, r3
 8003990:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003992:	193b      	adds	r3, r7, r4
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	4a08      	ldr	r2, [pc, #32]	@ (80039b8 <UARTEx_SetNbDataToProcess+0xb8>)
 8003998:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800399a:	0019      	movs	r1, r3
 800399c:	f7fc fc3e 	bl	800021c <__divsi3>
 80039a0:	0003      	movs	r3, r0
 80039a2:	b299      	uxth	r1, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2268      	movs	r2, #104	@ 0x68
 80039a8:	5299      	strh	r1, [r3, r2]
}
 80039aa:	46c0      	nop			@ (mov r8, r8)
 80039ac:	46bd      	mov	sp, r7
 80039ae:	b005      	add	sp, #20
 80039b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80039b2:	46c0      	nop			@ (mov r8, r8)
 80039b4:	08003aa4 	.word	0x08003aa4
 80039b8:	08003aac 	.word	0x08003aac

080039bc <memset>:
 80039bc:	0003      	movs	r3, r0
 80039be:	1882      	adds	r2, r0, r2
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d100      	bne.n	80039c6 <memset+0xa>
 80039c4:	4770      	bx	lr
 80039c6:	7019      	strb	r1, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	e7f9      	b.n	80039c0 <memset+0x4>

080039cc <__libc_init_array>:
 80039cc:	b570      	push	{r4, r5, r6, lr}
 80039ce:	2600      	movs	r6, #0
 80039d0:	4c0c      	ldr	r4, [pc, #48]	@ (8003a04 <__libc_init_array+0x38>)
 80039d2:	4d0d      	ldr	r5, [pc, #52]	@ (8003a08 <__libc_init_array+0x3c>)
 80039d4:	1b64      	subs	r4, r4, r5
 80039d6:	10a4      	asrs	r4, r4, #2
 80039d8:	42a6      	cmp	r6, r4
 80039da:	d109      	bne.n	80039f0 <__libc_init_array+0x24>
 80039dc:	2600      	movs	r6, #0
 80039de:	f000 f819 	bl	8003a14 <_init>
 80039e2:	4c0a      	ldr	r4, [pc, #40]	@ (8003a0c <__libc_init_array+0x40>)
 80039e4:	4d0a      	ldr	r5, [pc, #40]	@ (8003a10 <__libc_init_array+0x44>)
 80039e6:	1b64      	subs	r4, r4, r5
 80039e8:	10a4      	asrs	r4, r4, #2
 80039ea:	42a6      	cmp	r6, r4
 80039ec:	d105      	bne.n	80039fa <__libc_init_array+0x2e>
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	00b3      	lsls	r3, r6, #2
 80039f2:	58eb      	ldr	r3, [r5, r3]
 80039f4:	4798      	blx	r3
 80039f6:	3601      	adds	r6, #1
 80039f8:	e7ee      	b.n	80039d8 <__libc_init_array+0xc>
 80039fa:	00b3      	lsls	r3, r6, #2
 80039fc:	58eb      	ldr	r3, [r5, r3]
 80039fe:	4798      	blx	r3
 8003a00:	3601      	adds	r6, #1
 8003a02:	e7f2      	b.n	80039ea <__libc_init_array+0x1e>
 8003a04:	08003ab4 	.word	0x08003ab4
 8003a08:	08003ab4 	.word	0x08003ab4
 8003a0c:	08003ab8 	.word	0x08003ab8
 8003a10:	08003ab4 	.word	0x08003ab4

08003a14 <_init>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	46c0      	nop			@ (mov r8, r8)
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr

08003a20 <_fini>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	46c0      	nop			@ (mov r8, r8)
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr
